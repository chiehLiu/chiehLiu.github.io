<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chieh Liu&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-22T11:25:16.619Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Chieh Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS-OOP Crash Course (ES5 &amp; ES6)</title>
    <link href="http://example.com/2021/03/22/JS-OOP%20Crash%20Course%20(ES5%20&amp;%20ES6)/"/>
    <id>http://example.com/2021/03/22/JS-OOP%20Crash%20Course%20(ES5%20&amp;%20ES6)/</id>
    <published>2021-03-22T11:23:44.742Z</published>
    <updated>2021-03-22T11:25:16.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-OOP-Crash-Course-ES5-amp-ES6"><a href="#JavaScript-OOP-Crash-Course-ES5-amp-ES6" class="headerlink" title="JavaScript OOP Crash Course (ES5 &amp; ES6)"></a>JavaScript OOP Crash Course (ES5 &amp; ES6)</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><p>我們先來解釋一下”<strong>物件</strong>“(object)</p><p>基本上就是一個<strong>物品</strong>，車子、人、房子等等。</p><p>其實”<strong>物件</strong>“就是用程式碼在電腦裡表達出： “這是個物品”，這樣的概念。</p><h2 id="物件的構成"><a href="#物件的構成" class="headerlink" title="物件的構成:"></a>物件的構成:</h2><ul><li>屬性(property) 這就好比車子的廠牌 大小 人的姓名年齡等等各種資訊</li><li>方法(method) 就像是物件的運行方式，車子的發動、煞車，人的吃飯睡覺行走等等</li></ul><p>用一個”物件”來形容人，上方的資料是這個人的屬性，下方的function是方法<br><img src="https://i.imgur.com/WvnsOYh.png"></p><h2 id="基本結構語法-basic-literal"><a href="#基本結構語法-basic-literal" class="headerlink" title="基本結構語法(basic literal)"></a>基本結構語法(basic literal)</h2><p>下方的程式碼解釋了應用屬性(property)的用法以及產生新的object的用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="string">&#x27;helloaaa&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (s1));</span><br><span class="line"><span class="built_in">console</span>.log(s1.toUpperCase());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這邊的 s 用typeof出來會顯示字串不是物件卻可以像object一樣使用屬性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (s2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//不過同時也可以直接把string這個屬性直接賦予他變成物件</span></span><br></pre></td></tr></table></figure><p>window是所有的物件的父母層所以基本上在撰寫的時候可以省略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">alert(<span class="number">1</span>);<span class="comment">//同樣可以執行跟上方一樣的結果</span></span><br></pre></td></tr></table></figure><p>下方的內容是一個object (.)後面接一個 property</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(navigator.appVersion);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>下方我們舉些例子說明:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book1 = &#123;</span><br><span class="line">    title: <span class="string">&#x27;Bool one&#x27;</span>,</span><br><span class="line">    author: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">    year: <span class="string">&#x27;2013&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//結果如下</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;title: &quot;Bool one&quot;, author: &quot;John Doe&quot;, year: &quot;2013&quot;&#125;</span></span><br><span class="line"><span class="comment">author: &quot;John Doe&quot;</span></span><br><span class="line"><span class="comment">title: &quot;Bool one&quot;</span></span><br><span class="line"><span class="comment">year: &quot;2013&quot;</span></span><br><span class="line"><span class="comment">__proto__: Object </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我們想要取得object裡面的key可以使用<code>Object.keys</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(book2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這邊會印出這個object的property像是[&quot;title&quot;, &quot;author&quot;, &quot;year&quot;, &quot;getSUmmary&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我們想要取得object裡面的值可以使用<code>Object.values</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(book2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//會印出含有book2 values 的 array</span></span><br></pre></td></tr></table></figure><p>如果我們想要使用其中的屬性(property)假設我們想要使用title:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book1.title);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 會印出結果  Book one</span></span><br></pre></td></tr></table></figure><h2 id="物件實字-Object-Literals"><a href="#物件實字-Object-Literals" class="headerlink" title="物件實字 (Object Literals)"></a>物件實字 (Object Literals)</h2><p>物件實字的語法重點：</p><ul><li>會用大括號表示。</li><li>裡面的屬性 (Properties) 用名值對 (name-value pairs) 表示。ex.(title: ‘Book one’,)</li><li>多個屬性以逗號 (comma) 分隔。</li><li>宣告完後，還是可以再增加 Properties 進去。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book1 = &#123;</span><br><span class="line">    title: <span class="string">&#x27;Book one&#x27;</span>,</span><br><span class="line">    author: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">    year: <span class="string">&#x27;2013&#x27;</span>,</span><br><span class="line">    getSUmmary: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1.getSUmmary());</span><br></pre></td></tr></table></figure><h2 id="建構子-constructor"><a href="#建構子-constructor" class="headerlink" title="建構子(constructor)"></a>建構子(constructor)</h2><p>用來建構很大量內容的時候可以使用就不用重複寫很多地方可以建構起來重複使用</p><p>上方的function就是建構子的部分，下面是實體化(Instatiate)建構子使用物件，所以它會印出上方建構子的內容:</p><p><img src="https://i.imgur.com/o2xs5CY.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constructor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Book Initialized..&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instatiate an Object</span></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="keyword">new</span> Book();</span><br><span class="line"><span class="keyword">const</span> book2 = <span class="keyword">new</span> Book();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1.title);</span><br><span class="line"><span class="comment">//這邊一樣可以使用這個來取的它的title &quot;Book One&quot;</span></span><br></pre></td></tr></table></figure><p>如果我們直接輸入:<br>會得到<br><img src="https://i.imgur.com/hqtZbmQ.png"></p><p><img src="https://i.imgur.com/kzLJ5sL.png"></p><p>就不需要再重複寫一次Book的內容以及它的function因為已經建構在上面了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book2.getSUmmary());</span><br></pre></td></tr></table></figure><p>這個部分在上面建構子裡面寫入function這樣之後只要使用<code>console.log(book2.getSUmmary());</code>就可以呼叫了不需要重複寫入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">title, author, year</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">    <span class="built_in">this</span>.author = author;</span><br><span class="line">    <span class="built_in">this</span>.year = year;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.getSUmmary = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型-Prototypes"><a href="#原型-Prototypes" class="headerlink" title="原型(Prototypes)"></a>原型(Prototypes)</h2><p>另一種建構方法(methods)的方式是使用<code>prototype</code></p><p>把它額外拉出來做prototype這樣一樣可以用剛剛一樣的方式取得一樣的效果<code>console.log(book2.getSUmmary());</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getSummary</span></span><br><span class="line">Book.prototype.getSUmmary = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個時候我們在印出book2會發現function已經沒有在裡面了，而是會存在下方prototype裡面，會這樣做的原因是有些時候方法(method)不一定每個物件都要使用就可以這樣把他拉出來需要得再去取用它就好</p><p><img src="https://i.imgur.com/Dioa6SV.png"></p><p>下個範例使用了兩個元素來表達想要獲取得書本歲數</p><ul><li>new Date()取的現在時間</li><li>getFullYear()取得現在年分</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getAge</span></span><br><span class="line">Book.prototype.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> years = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.year;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> is <span class="subst">$&#123;years&#125;</span> years old`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下方會解釋如何操作內容的資料</p><p>我們想要修改裡面的時間，所以設定一個新的年分並且下方設定reviesed為true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Revise / Change Year</span></span><br><span class="line">Book.prototype.revise = <span class="function"><span class="keyword">function</span> (<span class="params">newYear</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.year = newYear;</span><br><span class="line">    <span class="built_in">this</span>.revised = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book2);</span><br><span class="line">book2.revise(<span class="string">&#x27;2018&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(book2);</span><br></pre></td></tr></table></figure><p>可以得出這個結果</p><p><img src="https://i.imgur.com/BOhPzJ9.png"></p><h2 id="繼承-Inheritance"><a href="#繼承-Inheritance" class="headerlink" title="繼承(Inheritance)"></a>繼承(Inheritance)</h2><p>下方提到繼承這個特性:</p><p>創造一個Magazine來繼承Book的屬性之外還可以添加屬性使用<code>call</code>這個方法來達成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Magazine Constructor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Magazine</span>(<span class="params">title, author, year, month</span>) </span>&#123;</span><br><span class="line">    Book.call(<span class="built_in">this</span>, title, author, year);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.month = month;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Magazine Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mag1 = <span class="keyword">new</span> Magazine(<span class="string">&#x27;Mag One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;Jan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mag1);</span><br></pre></td></tr></table></figure><h3 id="Prototype-methods-Inheritance"><a href="#Prototype-methods-Inheritance" class="headerlink" title="Prototype methods Inheritance"></a>Prototype methods Inheritance</h3><p>prototype的方法卻不能直接繼承所以使用<code>create</code>這個屬性讓Magazine也可以繼承prototype<strong>所有</strong>的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Magazine.prototype = <span class="built_in">Object</span>.create(Book.prototype);</span><br></pre></td></tr></table></figure><p>因為Magazine是繼承上面Book的屬性所以在constructor的部分還是會顯示Book</p><p><img src="https://i.imgur.com/nDROuBV.png"></p><p>如果想要修改的話可以使用constructor這個使用來修改:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use Magazine as Constructor instead of Book</span></span><br><span class="line"></span><br><span class="line">Magazine.prototype.constructor = Magazine;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/tmWKXpa.png"></p><h2 id="創造-Object-create"><a href="#創造-Object-create" class="headerlink" title="創造(Object_create)"></a>創造(Object_create)</h2><p>一開始使用一個const包住兩個方法，接下來使用<code>create</code>來創建新的物件來包含這兩個方法並且下方用新增的方式來把title,author,year加進去新的object book1裡面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object Of Protos</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bookProtos = &#123;</span><br><span class="line">    getSummary: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> years = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.year;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> is <span class="subst">$&#123;years&#125;</span> years old`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="built_in">Object</span>.create(bookProtos);</span><br><span class="line">book1.title = <span class="string">&#x27;Book One&#x27;</span>;</span><br><span class="line">book1.author = <span class="string">&#x27;John Doe&#x27;</span>;</span><br><span class="line">book1.year = <span class="string">&#x27;2013&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/jzu1G7R.png"></p><p>下面這個寫法跟上面出來的結果是一樣的只是換個方式寫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book1 = <span class="built_in">Object</span>.create(bookProtos, &#123;</span><br><span class="line">    title: &#123;<span class="attr">value</span>: <span class="string">&#x27;Book One&#x27;</span>&#125;,</span><br><span class="line">    author: &#123;<span class="attr">value</span>: <span class="string">&#x27;John Doe&#x27;</span>&#125;,</span><br><span class="line">    year: &#123;<span class="attr">value</span>: <span class="string">&#x27;2013&#x27;</span>&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><hr><h2 id="ES6的東西開始"><a href="#ES6的東西開始" class="headerlink" title="ES6的東西開始"></a>ES6的東西開始</h2><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>用法跟上面的建構子很像在做一樣的事情，也一樣需要建構物件以及實體化物件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Object</span></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="keyword">new</span> Book(<span class="string">&#x27;Book One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><p>接下來放入方法進去跟前面的寫法差不多，引用跟使用的方式也差不多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getSummary</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> years = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.year;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> is <span class="subst">$&#123;years&#125;</span> years old`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">revise</span>(<span class="params">newYear</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = newYear;</span><br><span class="line">        <span class="built_in">this</span>.revised = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Object</span></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="keyword">new</span> Book(<span class="string">&#x27;Book One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br><span class="line">book1.revise(<span class="string">&#x27;2018&#x27;</span>);</span><br></pre></td></tr></table></figure><p>輸出的結果如下:</p><p><img src="https://i.imgur.com/78nS8BQ.png"></p><h3 id="靜態語法-static"><a href="#靜態語法-static" class="headerlink" title="靜態語法(static)"></a>靜態語法(static)</h3><p>會寫在class裡面，它的特性是不會被已經實體化的物件呼叫比方說，而是被類別本身(class)直接呼叫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">topBookStore</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Barnes &amp; Nobles&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//這邊就是實體化的部分所以book1無法呼叫static方法</span></span><br><span class="line">    <span class="keyword">const</span> book1 = <span class="keyword">new</span> Book(<span class="string">&#x27;Book One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//可以這樣子直接使用</span></span><br><span class="line">    <span class="built_in">console</span>.log(Book.topBookStore());</span><br></pre></td></tr></table></figure><h3 id="Subclasses"><a href="#Subclasses" class="headerlink" title="Subclasses"></a>Subclasses</h3><p>這邊很類似上面繼承的概念只是更新語法更簡潔</p><p>使用到<code>extend</code>來繼承Book的物件，然後一樣使用建構子<code>constructor</code>寫入所有的物件內容，之後使用<code>super</code>繼承物件內容，最後放入要新增的內容即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getSummary</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Magazine Subclass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Magazine</span> <span class="keyword">extends</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year, month</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(title, author, year);</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Magazine</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mag1 = <span class="keyword">new</span> Magazine(<span class="string">&#x27;Mag One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;Jan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mag1.getSummary());</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-OOP-Crash-Course-ES5-amp-ES6&quot;&gt;&lt;a href=&quot;#JavaScript-OOP-Crash-Course-ES5-amp-ES6&quot; class=&quot;headerlink&quot; title=&quot;JavaScript OOP</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-JavaScript Higher Order Functions &amp; Arrays (Vanilla JavaScript)</title>
    <link href="http://example.com/2021/03/22/JS-JavaScript%20Higher%20Order%20Functions%20&amp;%20Arrays%20(Vanilla%20JavaScript)/"/>
    <id>http://example.com/2021/03/22/JS-JavaScript%20Higher%20Order%20Functions%20&amp;%20Arrays%20(Vanilla%20JavaScript)/</id>
    <published>2021-03-22T11:21:35.872Z</published>
    <updated>2021-03-22T11:22:30.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Higher-Order-Functions-amp-Arrays-Vanilla-JavaScript"><a href="#JavaScript-Higher-Order-Functions-amp-Arrays-Vanilla-JavaScript" class="headerlink" title="JavaScript Higher Order Functions &amp; Arrays (Vanilla JavaScript)"></a>JavaScript Higher Order Functions &amp; Arrays (Vanilla JavaScript)</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備:"></a>事前準備:</h1><p>待會要處理的資料</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> companies= [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company One&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Finance&quot;</span>, <span class="attr">start</span>: <span class="number">1981</span>, <span class="attr">end</span>: <span class="number">2004</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Two&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Retail&quot;</span>, <span class="attr">start</span>: <span class="number">1992</span>, <span class="attr">end</span>: <span class="number">2008</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Three&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Auto&quot;</span>, <span class="attr">start</span>: <span class="number">1999</span>, <span class="attr">end</span>: <span class="number">2007</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Four&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Retail&quot;</span>, <span class="attr">start</span>: <span class="number">1989</span>, <span class="attr">end</span>: <span class="number">2010</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Five&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Technology&quot;</span>, <span class="attr">start</span>: <span class="number">2009</span>, <span class="attr">end</span>: <span class="number">2014</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Six&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Finance&quot;</span>, <span class="attr">start</span>: <span class="number">1987</span>, <span class="attr">end</span>: <span class="number">2010</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Seven&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Auto&quot;</span>, <span class="attr">start</span>: <span class="number">1986</span>, <span class="attr">end</span>: <span class="number">1996</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Eight&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Technology&quot;</span>, <span class="attr">start</span>: <span class="number">2011</span>, <span class="attr">end</span>: <span class="number">2016</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Nine&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Retail&quot;</span>, <span class="attr">start</span>: <span class="number">1981</span>, <span class="attr">end</span>: <span class="number">1989</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ages = [<span class="number">33</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">54</span>, <span class="number">21</span>, <span class="number">44</span>, <span class="number">61</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">45</span>, <span class="number">25</span>, <span class="number">64</span>, <span class="number">32</span>];</span><br></pre></td></tr></table></figure><h1 id="forEach-逐個印出"><a href="#forEach-逐個印出" class="headerlink" title="forEach 逐個印出"></a>forEach 逐個印出</h1><h2 id="使用for作範例"><a href="#使用for作範例" class="headerlink" title="使用for作範例"></a>使用for作範例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; companies.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(companies[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/ebpS8lu.png"></p><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><ul><li>是一個比較好的方法來跑array的迴圈相較於一般的for迴圈並且不會return東西回來</li><li>是個比較優雅的方式處理資料</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//這邊做的印出每一個物件</span></span><br><span class="line">companies.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">company</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(company);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//當然也可以取用裡面的資料</span></span><br><span class="line"></span><br><span class="line">companies.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">company</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(company.name);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>印出結果:<br>跟for跑出來的結果一模一樣，但比較淺顯易懂就是使用了一個forEach方法省去了很多複雜的條件<br><img src="https://i.imgur.com/ebpS8lu.png"></p><p>取用裡面的name資料印出的結果<br><img src="https://i.imgur.com/6NB9sFX.png"></p><h1 id="filter-篩選功能"><a href="#filter-篩選功能" class="headerlink" title="filter 篩選功能"></a>filter 篩選功能</h1><h2 id="練習一"><a href="#練習一" class="headerlink" title="練習一:"></a>練習一:</h2><p>篩選 ages 這個array裡面大於等於21歲的人<br><img src="https://i.imgur.com/YhViXk1.png"></p><h2 id="使用for作範例-1"><a href="#使用for作範例-1" class="headerlink" title="使用for作範例"></a>使用for作範例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canDrink = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ages.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ages[i] &gt;= <span class="number">21</span>) &#123;</span><br><span class="line">        canDrink.push(ages[i]); <span class="comment">//使用push把符合條件的人推進去</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(canDrink);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/WgyScBp.png"></p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canDrink = ages.filter(<span class="function"><span class="keyword">function</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (age &gt;= <span class="number">21</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(canDrink);</span><br></pre></td></tr></table></figure><p>甚至使用ES6語法的箭頭函式可以更簡潔:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canDrink = ages.filter(<span class="function"><span class="params">age</span> =&gt;</span> age &gt;= <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(canDrink);</span><br></pre></td></tr></table></figure><p>印出結果:<br>一樣不需要處理條件式且比較簡潔也不需要而外多使用其他的方法<br><img src="https://i.imgur.com/WgyScBp.png"></p><h2 id="練習二"><a href="#練習二" class="headerlink" title="練習二:"></a>練習二:</h2><p>抓出companies資料裡面含有’Retail內容的物件</p><h2 id="使用ES5的寫法"><a href="#使用ES5的寫法" class="headerlink" title="使用ES5的寫法"></a>使用ES5的寫法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> retailCompanies = companies.filter(<span class="function"><span class="keyword">function</span> (<span class="params">company</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (company.category === <span class="string">&#x27;Retail&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(retailCompanies);</span><br></pre></td></tr></table></figure><h2 id="ES6箭頭函式的寫法"><a href="#ES6箭頭函式的寫法" class="headerlink" title="ES6箭頭函式的寫法"></a>ES6箭頭函式的寫法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> retailCompanies = companies.filter(<span class="function"><span class="params">company</span> =&gt;</span> company.category === <span class="string">&#x27;Retail&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(retailCompanies);</span><br></pre></td></tr></table></figure><p>印出結果會一樣:<br><img src="https://i.imgur.com/4M3q9Oj.png"></p><h2 id="練習三"><a href="#練習三" class="headerlink" title="練習三:"></a>練習三:</h2><p>篩選公司成立時間在1980年代</p><p>主要篩選companies 的start區塊作時間上的判斷</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eightiesCompanies = companies.filter(<span class="function"><span class="params">company</span> =&gt;</span> (company.start &gt;= <span class="number">1980</span> &amp;&amp; company.start &lt; <span class="number">1990</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(eightiesCompanies)</span><br></pre></td></tr></table></figure><p>印出結果:</p><p><img src="https://i.imgur.com/x1PBpe5.png"></p><h2 id="練習四"><a href="#練習四" class="headerlink" title="練習四:"></a>練習四:</h2><p>篩選出所有成立超過或是等於十年的公司</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lastedTenYears = companies.filter(<span class="function"><span class="params">company</span> =&gt;</span> (company.end - company.start &gt;= <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lastedTenYears);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/zuEWelh.png"></p><h1 id="map-印出資料-新的array-並且操作他們"><a href="#map-印出資料-新的array-並且操作他們" class="headerlink" title="map 印出資料(新的array)並且操作他們"></a>map 印出資料(新的array)並且操作他們</h1><p>除了篩選資料之外我們還可以創造新的array從現存的array中<br>並且對新的array做各種操作</p><h2 id="練習一-1"><a href="#練習一-1" class="headerlink" title="練習一:"></a>練習一:</h2><p>把所有的公司名稱取出來並放入一個新的array</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> companyNames = companies.map(<span class="function"><span class="keyword">function</span> (<span class="params">company</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> company.name</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(companyNames);</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>一個全新的array包含了公司名稱<br><img src="https://i.imgur.com/gKHMYRC.png"></p><h2 id="練習二-1"><a href="#練習二-1" class="headerlink" title="練習二:"></a>練習二:</h2><p>可以操作map取得的新array:</p><p>放入公司名稱跟年份組成新的arra</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testMap = companies.map(<span class="function"><span class="params">company</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;company.name&#125;</span>[<span class="subst">$&#123;company.start&#125;</span> - <span class="subst">$&#123;company.end&#125;</span>]`</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(testMap);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/CQ5MNjw.png"></p><h2 id="練習三-1"><a href="#練習三-1" class="headerlink" title="練習三:"></a>練習三:</h2><p>對map的新array做數字上面的處理</p><p>把數字開平方</p><p>把數字乘2</p><p>把數字開平方後乘2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> agesSquare = ages.map(<span class="function"><span class="params">age</span> =&gt;</span> <span class="built_in">Math</span>.sqrt(age));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(agesSquare);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> agesTimesTwo = ages.map(<span class="function"><span class="params">age</span> =&gt;</span> age * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(agesTimesTwo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 甚至可以把它們做串接處理</span></span><br><span class="line"><span class="keyword">const</span> agesMap = ages</span><br><span class="line">    .map(<span class="function"><span class="params">age</span> =&gt;</span> <span class="built_in">Math</span>.sqrt(age))</span><br><span class="line">    .map(<span class="function"><span class="params">age</span> =&gt;</span> age * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(agesMap);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>印出結果:</p><p>開平方<br><img src="https://i.imgur.com/t0Gbuob.png"></p><p>乘2<br><img src="https://i.imgur.com/qTnAnZK.png"></p><p>開平方後乘2<br><img src="https://i.imgur.com/Siwzx2V.png"></p><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p>如果我們不對sort做任何處理的話會這樣安排:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedAges = ages.sort();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortedAges);</span><br></pre></td></tr></table></figure><p>看似是由大到小但是有個小問題在於其實只比較了第一個數字然後再比較第二位所以5竟然排在那麼下面顯然不太合理(對一般使用的情況下)<br><img src="https://i.imgur.com/qXvWpx0.png"></p><h2 id="一般我們會這樣處理sort"><a href="#一般我們會這樣處理sort" class="headerlink" title="一般我們會這樣處理sort:"></a>一般我們會這樣處理sort:</h2><p>讓順序由大排到小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedAges = ages.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortedAges);</span><br></pre></td></tr></table></figure><p>由小排到大</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedAges = ages.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> b-a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortedAges);</span><br></pre></td></tr></table></figure><h2 id="練習一-2"><a href="#練習一-2" class="headerlink" title="練習一:"></a>練習一:</h2><p>分類公司藉著他們的開始年分 最早排到最晚</p><p>一次比較兩個公司如果a&gt;b 則顯示-1排前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedCompanies = companies.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a.start &gt; b.start ? <span class="number">1</span> : -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortedCompanies);</span><br></pre></td></tr></table></figure><p>印出的結果:<br><img src="https://i.imgur.com/5OueGVc.png"></p><h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><p>作加總，記得寫法reduce(參數1,參數2){function(){},0}後面的0要記得寫</p><h2 id="練習一-3"><a href="#練習一-3" class="headerlink" title="練習一:"></a>練習一:</h2><p>加總ages所有的數字和</p><h2 id="使用for範例"><a href="#使用for範例" class="headerlink" title="使用for範例"></a>使用for範例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ageSum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ages.length; i++) &#123;</span><br><span class="line">    ageSum += ages[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ageSum);</span><br></pre></td></tr></table></figure><p>得出加總的數字為:460</p><h2 id="使用reduce"><a href="#使用reduce" class="headerlink" title="使用reduce"></a>使用reduce</h2><h2 id="Es5語法"><a href="#Es5語法" class="headerlink" title="Es5語法:"></a>Es5語法:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ageSum = ages.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">total, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> total + age;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ageSum);</span><br></pre></td></tr></table></figure><p>得出加總的數字為:460</p><h2 id="ES6語法"><a href="#ES6語法" class="headerlink" title="ES6語法:"></a>ES6語法:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ageSum = ages.reduce(<span class="function">(<span class="params">total, age</span>) =&gt;</span> total + age, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ageSum);</span><br></pre></td></tr></table></figure><p>得出加總的數字為:460</p><h2 id="練習二-2"><a href="#練習二-2" class="headerlink" title="練習二:"></a>練習二:</h2><p>加總所有公司的存在年分</p><p>把公司的end年份減去start年份就是存在時間並且做加上total就好瞜</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> totalYears = companies.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">total, company</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> total + (company.end - company.start);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(totalYears);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ES6的簡化寫法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalYears = companies.reduce(<span class="function">(<span class="params">total, company</span>) =&gt;</span></span><br><span class="line">    total + (company.end - company.start), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalYears);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得出結果: 119</p><h1 id="串接使用全部方法"><a href="#串接使用全部方法" class="headerlink" title="串接使用全部方法"></a>串接使用全部方法</h1><p>不是很實用但是他們可以這樣串接使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> combined = ages</span><br><span class="line">    .map(<span class="function"><span class="params">age</span> =&gt;</span> age * <span class="number">2</span>)</span><br><span class="line">    .filter(<span class="function"><span class="params">age</span> =&gt;</span> age &gt;= <span class="number">40</span>)</span><br><span class="line">    .sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(combined);</span><br></pre></td></tr></table></figure><p>由大到小排列:<br><img src="https://i.imgur.com/1zQSVkn.png"></p><p>得到加總結果結果是798</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-Higher-Order-Functions-amp-Arrays-Vanilla-JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript-Higher-Order-Functions-amp-Arrays-Vanilla-Java</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-正則表達式 Regular Expression</title>
    <link href="http://example.com/2021/03/22/JS-%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%20Regular%20Expression/"/>
    <id>http://example.com/2021/03/22/JS-%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%20Regular%20Expression/</id>
    <published>2021-03-22T11:21:35.872Z</published>
    <updated>2021-03-22T11:23:11.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正則表達式-Regular-Expression"><a href="#正則表達式-Regular-Expression" class="headerlink" title="正則表達式 Regular Expression"></a>正則表達式 Regular Expression</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="JS-與-Regular-Expression"><a href="#JS-與-Regular-Expression" class="headerlink" title="JS 與 Regular Expression"></a>JS 與 Regular Expression</h1><h2 id="01-正則表達式是什麼-JS-中如何使用"><a href="#01-正則表達式是什麼-JS-中如何使用" class="headerlink" title="01 正則表達式是什麼 ? JS 中如何使用 ?"></a>01 正則表達式是什麼 ? JS 中如何使用 ?</h2><ul><li>做字串模式的判斷</li><li>做格式的過濾如電話、email、身分證</li><li>登入資料判讀、擷取</li><li>電子試算表資料擷取</li><li>單據檔案資料擷取</li></ul><h2 id="正則表達式的呈現"><a href="#正則表達式的呈現" class="headerlink" title="正則表達式的呈現:"></a>正則表達式的呈現:</h2><p><img src="https://i.imgur.com/7zh7HJL.png"></p><h1 id="Regular-Expression-學習資源"><a href="#Regular-Expression-學習資源" class="headerlink" title="Regular Expression 學習資源"></a>Regular Expression 學習資源</h1><p><a href="https://regexone.com/">學習網站</a></p><h2 id="Lesson-1-An-Introduction-and-the-ABCs"><a href="#Lesson-1-An-Introduction-and-the-ABCs" class="headerlink" title="Lesson 1: An Introduction, and the ABCs"></a>Lesson 1: An Introduction, and the ABCs</h2><p>輸入符合全部text的pattern:</p><p>三個text都包含了abc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchabcdefgTo be completed</span><br><span class="line">MatchabcdeTo be completed</span><br><span class="line">Matchabc</span><br><span class="line"></span><br><span class="line">input: abc</span><br></pre></td></tr></table></figure><h2 id="Lesson-1½-The-123s"><a href="#Lesson-1½-The-123s" class="headerlink" title="Lesson 1½: The 123s"></a>Lesson 1½: The 123s</h2><p>輸入符合全部text的pattern，因此除了字母會符合，數字也可以:</p><p>三個text都包含123</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Matchabc123xyzTo be completed</span><br><span class="line">Matchdefine &quot;123&quot;To be completed</span><br><span class="line">Matchvar g &#x3D; 123;</span><br><span class="line"></span><br><span class="line">input: 123 &#x2F; \D*123\D*</span><br></pre></td></tr></table></figure><h2 id="Lesson-2-The-Dot-萬用字元"><a href="#Lesson-2-The-Dot-萬用字元" class="headerlink" title="Lesson 2: The Dot(.)萬用字元"></a>Lesson 2: The Dot(.)萬用字元</h2><p>題目要吻合前三個text並且讓最後一個task被跳過，所以使用跳脫字元()在最後一個(.)之前</p><p>wildcard(通用字元)也就是Dot(.)<br>跳脫字元()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Matchcat.Success</span><br><span class="line">Match896.Success</span><br><span class="line">Match?&#x3D;+.Success</span><br><span class="line">Skipabc1</span><br><span class="line"></span><br><span class="line">input: ...\.</span><br></pre></td></tr></table></figure><h2 id="Lesson-3-Matching-specific-characters-符合特定字元"><a href="#Lesson-3-Matching-specific-characters-符合特定字元" class="headerlink" title="Lesson 3: Matching specific characters(符合特定字元)"></a>Lesson 3: Matching specific characters(符合特定字元)</h2><p>[]內部可以放入想要抓取的字元</p><p>前三個task符合後三個跳過:</p><p>使用中括號([])包含的字元會被特別抓取出來除此之外則跳過</p><p>例如[abc]只會抓取符合單一a,b,c沒有其他的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchcanSuccess</span><br><span class="line">MatchmanSuccess</span><br><span class="line">MatchfanSuccess</span><br><span class="line">SkipdanTo be completed</span><br><span class="line">SkipranTo be completed</span><br><span class="line">Skippan</span><br><span class="line"></span><br><span class="line">input: [cmf]</span><br></pre></td></tr></table></figure><h2 id="Lesson-4-Excluding-specific-characters-排除特定字元"><a href="#Lesson-4-Excluding-specific-characters-排除特定字元" class="headerlink" title="Lesson 4: Excluding specific characters(排除特定字元)"></a>Lesson 4: Excluding specific characters(排除特定字元)</h2><p>排除特定字元</p><p>[^abc]會符合任何字元除了a,b,c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchhogSuccess</span><br><span class="line">MatchdogSuccess</span><br><span class="line">Skipbog</span><br><span class="line"></span><br><span class="line">input: [^b]og</span><br></pre></td></tr></table></figure><h2 id="Lesson-5-Character-ranges-字元的範圍"><a href="#Lesson-5-Character-ranges-字元的範圍" class="headerlink" title="Lesson 5: Character ranges(字元的範圍)"></a>Lesson 5: Character ranges(字元的範圍)</h2><p>\w代表所有字母數字的集合<br>\W代表非字母數字的集合</p><p>使用中括號[] 以及 (-)代表range<br>使用[A-C]選出前三個符合下三個完全沒有ABC所以被篩掉了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchAnaSuccess</span><br><span class="line">MatchBobSuccess</span><br><span class="line">MatchCpcSuccess</span><br><span class="line">SkipaaxTo be completed</span><br><span class="line">SkipbbyTo be completed</span><br><span class="line">Skipccz</span><br><span class="line"></span><br><span class="line">input: [A-C][n-p][a-c]</span><br></pre></td></tr></table></figure><h2 id="Lesson-6-Catching-some-zzz’s-擷取重複的字元"><a href="#Lesson-6-Catching-some-zzz’s-擷取重複的字元" class="headerlink" title="Lesson 6: Catching some zzz’s(擷取重複的字元)"></a>Lesson 6: Catching some zzz’s(擷取重複的字元)</h2><p>擷取重複的字元</p><p>使用 要擷取的字元{數字}</p><p>例如下面的題目擷取z 3次 以及 5次  z{3,5}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchwazzzzzupSuccess</span><br><span class="line">MatchwazzzupSuccess</span><br><span class="line">Skipwazup</span><br><span class="line"></span><br><span class="line">input: waz&#123;3,5&#125;up</span><br></pre></td></tr></table></figure><h2 id="Lesson-7-Mr-Kleene-Mr-Kleene"><a href="#Lesson-7-Mr-Kleene-Mr-Kleene" class="headerlink" title="Lesson 7: Mr. Kleene, Mr. Kleene"></a>Lesson 7: Mr. Kleene, Mr. Kleene</h2><p>(*) 0個或是更多重複</p><p>(+) 1個或是更多重複</p><p>這兩者都可以使用在任何字元或是元字符 (Metacharacter)上面</p><blockquote><p>在POSIX擴展正則表達式裡[1]，定義了14個元字符，它們被作為一般的字符使用時，必須要通過「轉義」（前面加一個反斜槓「\」）來去除他們本身的特殊意義，這些元字符包括：</p><p>開和閉方括號：”[“和”]”<br>反斜線：”&quot;<br>脫字符：”^”<br>美元符號：”$”<br>句號/點：”.”<br>豎線/管道符：”|”<br>問號：”?”<br>星號：”*”<br>加號：”+”<br>開和閉 花括號：”{“和”}”<br>開和閉 小括號：”(“和”)”[2][3]</p></blockquote><p>下方範例可以看到:</p><p>a+ 代表 a是一個以上<br>b* 代表 b可以包含0以及以上<br>c+ 代表 c是一個以上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchaaaabccSuccess</span><br><span class="line">MatchaabbbbcSuccess</span><br><span class="line">MatchaaccSuccess</span><br><span class="line">Skipa</span><br><span class="line"></span><br><span class="line">input: a+b*c+</span><br></pre></td></tr></table></figure><h2 id="Lesson-8-Characters-optional-選擇性符號"><a href="#Lesson-8-Characters-optional-選擇性符號" class="headerlink" title="Lesson 8: Characters optional(?)選擇性符號"></a>Lesson 8: Characters optional(?)選擇性符號</h2><p>範例:</p><p>ab?c =&gt; abc or ac (b是選擇性的)</p><p>中括號124抓取前三個數字 跳過skip</p><p>並且使用?讓s變成選擇性的</p><p>最後跳脫字元?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Match1 file found?Success</span><br><span class="line">Match2 files found?Success</span><br><span class="line">Match24 files found?Success</span><br><span class="line">SkipNo files found.</span><br><span class="line"></span><br><span class="line">input: [124]+files? found\?</span><br></pre></td></tr></table></figure><h2 id="Lesson-9-All-this-whitespace-空白符號"><a href="#Lesson-9-All-this-whitespace-空白符號" class="headerlink" title="Lesson 9: All this whitespace(空白符號)"></a>Lesson 9: All this whitespace(空白符號)</h2><ul><li>space (␣)使用space產生的空白</li><li>tab (\t)使用tab產生的空白</li><li>new line (\n)斷行</li><li>carriage return (\r) 很少使用只有在character terminal</li><li>whitespace special character (\s) 此功能包含以上全部的空白</li><li>(\S)任何不是空格的字元</li></ul><p>這邊我的解法是</p><p>使用數字符號<br>代表第一個數字 \d</p><p>使用跳脫字元加上dot .代表順序後方的dot</p><p>接下來就是\s代表全部的空白處</p><p>最後是abc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Match1.   abcSuccess</span><br><span class="line">Match2.abcSuccess</span><br><span class="line">Match3.           abcSuccess</span><br><span class="line">Skip4.abcTo be completed</span><br><span class="line"></span><br><span class="line">input: \d\.\s+abc</span><br></pre></td></tr></table></figure><h2 id="Lesson-10-Starting-and-ending-搜尋完整的字句"><a href="#Lesson-10-Starting-and-ending-搜尋完整的字句" class="headerlink" title="Lesson 10: Starting and ending (搜尋完整的字句)"></a>Lesson 10: Starting and ending (搜尋完整的字句)</h2><p>使用 ^…$ 可以包含要搜尋的完整字句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchMission: successfulSuccess</span><br><span class="line">SkipLast Mission: unsuccessfulTo be completed</span><br><span class="line">SkipNext Mission: successful upon capture of target</span><br><span class="line"></span><br><span class="line">input: ^Mission: successful$</span><br></pre></td></tr></table></figure><h2 id="Lesson-11-Match-groups-限定要抓取的範圍"><a href="#Lesson-11-Match-groups-限定要抓取的範圍" class="headerlink" title="Lesson 11: Match groups (()) (限定要抓取的範圍)"></a>Lesson 11: Match groups (()) (限定要抓取的範圍)</h2><p>使用(以及)限定要抓取的範圍</p><p>例如:</p><p>^(IMG\d+.png)$<br>這樣使用會抓取所以有的 IMG數字.png</p><p>如果想要只抓取檔案名稱可以這樣寫:</p><p>^(IMG\d+).png$<br>用()去框在名字的地方限定抓取的範圍只能檔案名稱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Capturefile_record_transcript.pdffile_record_transcriptSuccess</span><br><span class="line">Capturefile_07241999.pdffile_07241999Success</span><br><span class="line">Skiptestfile_fake.pdf.tmp</span><br><span class="line"></span><br><span class="line">input: ^(file.+)\.pdf$</span><br></pre></td></tr></table></figure><h2 id="Lesson-12-Nested-groups-巢狀擷取"><a href="#Lesson-12-Nested-groups-巢狀擷取" class="headerlink" title="Lesson 12: Nested groups(巢狀擷取)"></a>Lesson 12: Nested groups(巢狀擷取)</h2><p>巢狀擷取</p><p>一樣使用括號(())來擷取內容，可以用多層的方式擷取內容中的內容</p><p>範例:</p><p>^(IMG(\d+)).png$<br>這邊會擷取IMG的數字.png然後再擷取只有數字的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">CaptureJan 1987Jan 1987 1987Success</span><br><span class="line">CaptureMay 1969May 1969 1969Success</span><br><span class="line">CaptureAug 2011Aug 2011 2011Success</span><br><span class="line"></span><br><span class="line">input: ^(\D+(\d+))$ or ^(\w+(\d+))$</span><br></pre></td></tr></table></figure><h2 id="Lesson-13-More-group-work"><a href="#Lesson-13-More-group-work" class="headerlink" title="Lesson 13: More group work"></a>Lesson 13: More group work</h2><p>中間多了一個字母一樣要抓取他其他的部份用括號擷取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Capture1280x7201280 720Success</span><br><span class="line">Capture1920x16001920 1600Success</span><br><span class="line">Capture1024x7681024 768Success</span><br><span class="line"></span><br><span class="line">input: ^((\d+)[x](\d+))$ or ^((\d+)x(\d+))$</span><br></pre></td></tr></table></figure><h2 id="Lesson-14-It’s-all-conditional"><a href="#Lesson-14-It’s-all-conditional" class="headerlink" title="Lesson 14: It’s all conditional(|)"></a>Lesson 14: It’s all conditional(|)</h2><p>當作or使用即可(|)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchI love catsSuccess</span><br><span class="line">MatchI love dogsSuccess</span><br><span class="line">SkipI love logsTo be completed</span><br><span class="line">SkipI love cogs</span><br><span class="line"></span><br><span class="line">input: I love cats|dogs</span><br></pre></td></tr></table></figure><h2 id="Lesson-15-Other-special-characters-其他特殊字元"><a href="#Lesson-15-Other-special-characters-其他特殊字元" class="headerlink" title="Lesson 15: Other special characters(其他特殊字元)"></a>Lesson 15: Other special characters(其他特殊字元)</h2><ul><li>\d 所有數字</li><li>\s 所有空白字元</li><li>\w 所有數字、字母</li></ul><hr><ul><li>\D 所有字母</li><li>\S 所有非空白字元</li><li>\W 所有非數字、字母</li></ul><p>\b 所有單詞</p><p>這邊的練習是個練習用的沙盒可以不用擺上來可以連上去練一下使用regex</p><p><a href="https://regexone.com/lesson/misc_meta_characters">練習網站</a></p><h2 id="YA完成了-第一部分ZZ"><a href="#YA完成了-第一部分ZZ" class="headerlink" title="YA完成了~第一部分ZZ"></a>YA完成了~第一部分ZZ</h2><p><img src="https://i.imgur.com/cLWvW2l.png"></p><h2 id="Practice-Problems"><a href="#Practice-Problems" class="headerlink" title="Practice Problems"></a>Practice Problems</h2><h2 id="Problem-1-Matching-a-decimal-numbers-擷取小數"><a href="#Problem-1-Matching-a-decimal-numbers-擷取小數" class="headerlink" title="Problem 1: Matching a decimal numbers (擷取小數)"></a>Problem 1: Matching a decimal numbers (擷取小數)</h2><p>主要是用[]解的 並且後面加上\d表示數字結尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Match3.14529Success</span><br><span class="line">Match-255.34Success</span><br><span class="line">Match128Success</span><br><span class="line">Match1.9e10Success</span><br><span class="line">Match123,340.00Success</span><br><span class="line">Skip720p</span><br><span class="line"></span><br><span class="line">input: ^[-\.,\de]+\d$</span><br></pre></td></tr></table></figure><h2 id="Problem-2-Matching-phone-numbers"><a href="#Problem-2-Matching-phone-numbers" class="headerlink" title="Problem 2: Matching phone numbers"></a>Problem 2: Matching phone numbers</h2><p>只抓前三個連號都可以辦到搂!基本上電話區碼的部分可以這樣抓</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Capture415-555-1234415Success</span><br><span class="line">Capture650-555-2345650Success</span><br><span class="line">Capture(416)555-3456416Success</span><br><span class="line">Capture202 555 4567202Success</span><br><span class="line">Capture4035555678403Success</span><br><span class="line">Capture1 416 555 9292416Success</span><br><span class="line"></span><br><span class="line">input: (\d&#123;3&#125;)</span><br></pre></td></tr></table></figure><h2 id="Problem-3-Matching-emails"><a href="#Problem-3-Matching-emails" class="headerlink" title="Problem 3: Matching emails"></a>Problem 3: Matching emails</h2><p>排除所有符號後方的字元</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Capturetom@hogwarts.comtomSuccess</span><br><span class="line">Capturetom.riddle@hogwarts.comtom.riddleSuccess</span><br><span class="line">Capturetom.riddle+regexone@hogwarts.comtom.riddleSuccess</span><br><span class="line">Capturetom@hogwarts.eu.comtomSuccess</span><br><span class="line">Capturepotter@hogwarts.compotterSuccess</span><br><span class="line">Captureharry@hogwarts.comharrySuccess</span><br><span class="line">Capturehermione+regexone@hogwarts.comhermioneSuccess</span><br><span class="line"></span><br><span class="line">input: ^([\w\.]*)</span><br></pre></td></tr></table></figure><h2 id="Problem-4-Matching-HTML"><a href="#Problem-4-Matching-HTML" class="headerlink" title="Problem 4: Matching HTML"></a>Problem 4: Matching HTML</h2><p>選取”&lt;”以及後面的字母 就是tag瞜!</p><p>ex. &lt;a or &lt;div</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Capture&lt;a&gt;This is a link&lt;&#x2F;a&gt;aSuccess</span><br><span class="line">Capture&lt;a href&#x3D;&#39;https:&#x2F;&#x2F;regexone.com&#39;&gt;Link&lt;&#x2F;a&gt;aSuccess</span><br><span class="line">Capture&lt;div class&#x3D;&#39;test_style&#39;&gt;Test&lt;&#x2F;div&gt;divSuccess</span><br><span class="line">Capture&lt;div&gt;Hello &lt;span&gt;world&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;divSuccess</span><br><span class="line"></span><br><span class="line">input: &lt;(\w+)</span><br></pre></td></tr></table></figure><h2 id="Problem-5-Matching-specific-filenames"><a href="#Problem-5-Matching-specific-filenames" class="headerlink" title="Problem 5: Matching specific filenames"></a>Problem 5: Matching specific filenames</h2><p>| and $的活用</p><p>選擇jpg or png or gif $(作為結尾)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Skip.bash_profileTo be completed</span><br><span class="line">Skipworkspace.docTo be completed</span><br><span class="line">Captureimg0912.jpgimg0912 jpgSuccess</span><br><span class="line">Captureupdated_img0912.pngupdated_img0912 pngSuccess</span><br><span class="line">Skipdocumentation.htmlTo be completed</span><br><span class="line">Capturefavicon.giffavicon gifSuccess</span><br><span class="line">Skipimg0912.jpg.tmpTo be completed</span><br><span class="line">Skipaccess.lock</span><br><span class="line"></span><br><span class="line">input:(\w+)\.(jpg|png|gif)$</span><br></pre></td></tr></table></figure><h2 id="Problem-6-Trimming-whitespace-from-start-and-end-of-line"><a href="#Problem-6-Trimming-whitespace-from-start-and-end-of-line" class="headerlink" title="Problem 6: Trimming whitespace from start and end of line"></a>Problem 6: Trimming whitespace from start and end of line</h2><p>這邊我使用一開始去掉空白之後抓取全部的文字最後抓取串接以(.)結尾的句子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CaptureThe quick brown fox...The quick brown fox...Success</span><br><span class="line">Capture   jumps over the lazy dog.jumps over the lazy dog.Success</span><br><span class="line"></span><br><span class="line">input: ([^\s+](.+)\.)$</span><br></pre></td></tr></table></figure><h2 id="Problem-7-Extracting-information-from-a-log-file"><a href="#Problem-7-Extracting-information-from-a-log-file" class="headerlink" title="Problem 7: Extracting information from a log file"></a>Problem 7: Extracting information from a log file</h2><p>(\w+)( 純文字以及跳脫字元&quot;(“\</p><p>[\w.]+): 這段是抓取所有文字以及有(.)加上一個(:)</p><p>(\d+))$ 這段是抓取括號以及數字結尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SkipW&#x2F;dalvikvm( 1553): threadid&#x3D;1: uncaught exceptionTo be completed</span><br><span class="line">SkipE&#x2F;( 1553): FATAL EXCEPTION: mainTo be completed</span><br><span class="line">SkipE&#x2F;( 1553): java.lang.StringIndexOutOfBoundsExceptionTo be completed</span><br><span class="line">CaptureE&#x2F;( 1553):   at widget.List.makeView(ListView.java:1727)makeView ListView.java 1727Success</span><br><span class="line">CaptureE&#x2F;( 1553):   at widget.List.fillDown(ListView.java:652)fillDown ListView.java 652Success</span><br><span class="line">CaptureE&#x2F;( 1553):   at widget.List.fillFrom(ListView.java:709)fillFrom ListView.java 709Success</span><br><span class="line"></span><br><span class="line">input: (\w+)\(([\w\.]+):(\d+)\)$</span><br></pre></td></tr></table></figure><h2 id="Problem-8-Parsing-and-extracting-data-from-a-URL"><a href="#Problem-8-Parsing-and-extracting-data-from-a-URL" class="headerlink" title="Problem 8: Parsing and extracting data from a URL"></a>Problem 8: Parsing and extracting data from a URL</h2><p>(\w+):// 這段吃所有的 ://之前的字母</p><p>://([\w-.]+) 使用[]內部包含字母、跳脫字元的- .</p><p>(:(\d+))?  最後幾個(:)之後的數字因為不是每個都有所以上問號讓它們變成optional</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Captureftp:&#x2F;&#x2F;file_server.com:21&#x2F;top_secret&#x2F;life_changing_plans.pdfftp file_server.com 21Success</span><br><span class="line">Capturehttps:&#x2F;&#x2F;regexone.com&#x2F;lesson&#x2F;introduction#sectionhttps regexone.comSuccess</span><br><span class="line">Capturefile:&#x2F;&#x2F;localhost:4040&#x2F;zip_filefile localhost 4040Success</span><br><span class="line">Capturehttps:&#x2F;&#x2F;s3cur3-server.com:9999&#x2F;https s3cur3-server.com 9999Success</span><br><span class="line">Capturemarket:&#x2F;&#x2F;search&#x2F;angry%20birdsmarket searchSuccess</span><br><span class="line"></span><br><span class="line">input: (\w+):&#x2F;&#x2F;([\w\-\.]+)(:(\d+))?</span><br></pre></td></tr></table></figure><h2 id="Problem-X-Infinity-and-beyond"><a href="#Problem-X-Infinity-and-beyond" class="headerlink" title="Problem X: Infinity and beyond!"></a>Problem X: Infinity and beyond!</h2><p><img src="https://i.imgur.com/wTERooE.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正則表達式-Regular-Expression&quot;&gt;&lt;a href=&quot;#正則表達式-Regular-Expression&quot; class=&quot;headerlink&quot; title=&quot;正則表達式 Regular Expression&quot;&gt;&lt;/a&gt;正則表達式 Regular </summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-Async JS Crash Course</title>
    <link href="http://example.com/2021/03/22/JS-Async%20JS%20Crash%20Course/"/>
    <id>http://example.com/2021/03/22/JS-Async%20JS%20Crash%20Course/</id>
    <published>2021-03-22T11:20:08.517Z</published>
    <updated>2021-03-22T11:21:09.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Async-JS-Crash-Course"><a href="#Async-JS-Crash-Course" class="headerlink" title="Async JS Crash Course"></a>Async JS Crash Course</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="使用範例來理解Async-JS在什麼情況下適合作用"><a href="#使用範例來理解Async-JS在什麼情況下適合作用" class="headerlink" title="使用範例來理解Async JS在什麼情況下適合作用:"></a>使用範例來理解Async JS在什麼情況下適合作用:</h1><ul><li>取得post貼上DOM延遲一秒鐘</li><li>創造新的post花了兩秒鐘</li></ul><p>這樣會發生什麼情況?</p><p><img src="https://i.imgur.com/lW6aV3a.png"></p><p>DOM會先PO post上去不等新的post創造好，所以永遠更新不到新的post</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [&#123;</span><br><span class="line">        title: <span class="string">&#x27;Post One&#x27;</span>,</span><br><span class="line">        body: <span class="string">&#x27;This is post one&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">&#x27;Post Two&#x27;</span>,</span><br><span class="line">        body: <span class="string">&#x27;This is post two&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把取得的post貼到DOM上面 延遲一秒鐘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPost</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        posts.forEach(<span class="function">(<span class="params">post, index</span>) =&gt;</span> &#123;</span><br><span class="line">            output += <span class="string">`&lt;li&gt;<span class="subst">$&#123;post.title&#125;</span>&lt;/li&gt;`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">document</span>.body.innerHTML = output;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//創造一個新的post丟上去花了兩秒鐘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        posts.push(post);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getPost();</span><br><span class="line"></span><br><span class="line">createPost(&#123;</span><br><span class="line">    title: <span class="string">&#x27;Post Three&#x27;</span>,</span><br><span class="line">    body: <span class="string">&#x27;This is post Three&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="使用callback"><a href="#使用callback" class="headerlink" title="使用callback:"></a>使用callback:</h1><p>使用callback代表getPosts，這樣一來就會在創造好新的post之後才會觸發getPosts整個過程會在兩秒內完成</p><p>需要注意callback的寫法在呼叫函式的部分撰寫的callback不需要加上()要特別留意</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//創造一個新的post丟上去花了兩秒鐘</span></span><br><span class="line"><span class="comment">//這邊的callback就代表了getPosts所以必須等創造好了新的post之後</span></span><br><span class="line"><span class="comment">// getPost才會觸發也才會把取的的物件推上去DOM所以就可以顯示新的post搂!</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post, callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        posts.push(post);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createPost(&#123;</span><br><span class="line">    title: <span class="string">&#x27;Post Three&#x27;</span>,</span><br><span class="line">    body: <span class="string">&#x27;This is post Three&#x27;</span></span><br><span class="line">&#125;, getPosts)</span><br></pre></td></tr></table></figure><h1 id="使用promise"><a href="#使用promise" class="headerlink" title="使用promise:"></a>使用promise:</h1><ul><li>promise解決會呼叫resolve</li><li>promise錯誤則呼叫reject</li></ul><p>promise成功則會使用then()內部的函式順利的印出新的post<br><img src="https://i.imgur.com/Vc1kOWO.png"></p><p>promise失敗(改寫error變數成true)則會顯示錯誤訊息在console裡面<br>也可以使用<code>catch</code>方法抓取錯誤的內容<br><img src="https://i.imgur.com/s18nYiL.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post, </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果promise解決會呼叫resolve</span></span><br><span class="line">    <span class="comment">//如果promise錯誤則呼叫reject</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            posts.push(post);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解釋promise內部的兩個參數的判斷是如何運作</span></span><br><span class="line">            <span class="keyword">const</span> error = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">&#x27;Error: something went wrong&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createPost(&#123;</span><br><span class="line">        title: <span class="string">&#x27;Post Three&#x27;</span>,</span><br><span class="line">        body: <span class="string">&#x27;This is post three&#x27;</span></span><br><span class="line">    &#125;).then(getPosts).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure><h2 id="示範promise-all"><a href="#示範promise-all" class="headerlink" title="示範promise.all"></a>示範promise.all</h2><p>常常promise會不只一個，一個一個接then太累了，所以可以使用promise.all一次抓住一同使用.then就好瞜!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>, <span class="string">&#x27;Goodbye&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2, promise3]).then(<span class="function"><span class="params">values</span> =&gt;</span> <span class="built_in">console</span>.log(values));</span><br></pre></td></tr></table></figure><p>最後.then的印出結果<br><img src="https://i.imgur.com/9yQSz0L.png"></p><h2 id="示範fetch-API-相關的promise寫法"><a href="#示範fetch-API-相關的promise寫法" class="headerlink" title="示範fetch API 相關的promise寫法"></a>示範fetch API 相關的promise寫法</h2><p>使用fetch抓取資料的話必須轉化格式所以在指派給變數的階段就要先.then轉換格式</p><p>這樣才可以在promise.all的階段被真正抓取到資料</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用兩個.then因為要轉換JSON格式</span></span><br><span class="line"><span class="keyword">const</span> promise4 = fetch(<span class="string">&#x27;https://jsonplaceholder.typicode.com/users&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json());</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2, promise3, promise4]).then(<span class="function"><span class="params">values</span> =&gt;</span> <span class="built_in">console</span>.log(values));</span><br></pre></td></tr></table></figure><p>最後.then的印出結果<br><img src="https://i.imgur.com/8fI5g5T.png"></p><h2 id="使用async"><a href="#使用async" class="headerlink" title="使用async:"></a>使用async:</h2><p><code>await</code> 等待一個同步的過程或動作去完成後才去執行其他動作</p><p>等待createPost處理完內部的函式createPost後也就是創造新的post後，才會往getPosts去執行這樣就會顯示摟!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post, </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            posts.push(post);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> error = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">&#x27;Error: something went wrong&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待createPost處理完成後，才會往getPosts去執行</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> createPost(&#123;</span><br><span class="line">        title: <span class="string">&#x27;Post Three&#x27;</span>,</span><br><span class="line">        body: <span class="string">&#x27;This is post three&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    getPosts();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init();</span><br></pre></td></tr></table></figure><h2 id="示範fetch-API-相關的async寫法"><a href="#示範fetch-API-相關的async寫法" class="headerlink" title="示範fetch API 相關的async寫法"></a>示範fetch API 相關的async寫法</h2><p>不只用.then一切都更乾淨好讀</p><p>一樣fetch都需要資料轉換，但是這邊從新指派一個變數處理比較特別</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">&#x27;https://jsonplaceholder.typicode.com/users&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchUsers();</span><br></pre></td></tr></table></figure><p>fetch的資料印出:<br><img src="https://i.imgur.com/Xc4q0xs.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Async-JS-Crash-Course&quot;&gt;&lt;a href=&quot;#Async-JS-Crash-Course&quot; class=&quot;headerlink&quot; title=&quot;Async JS Crash Course&quot;&gt;&lt;/a&gt;Async JS Crash Course&lt;/</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-AJAX Crash Course (5000字)</title>
    <link href="http://example.com/2021/03/22/JS-AJAX%20Crash%20Course%20(Vanilla%20JavaScript)/"/>
    <id>http://example.com/2021/03/22/JS-AJAX%20Crash%20Course%20(Vanilla%20JavaScript)/</id>
    <published>2021-03-22T11:17:15.184Z</published>
    <updated>2021-03-22T11:18:52.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX-Crash-Course-Vanilla-JavaScript"><a href="#AJAX-Crash-Course-Vanilla-JavaScript" class="headerlink" title="AJAX Crash Course (Vanilla JavaScript)"></a>AJAX Crash Course (Vanilla JavaScript)</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="AJAX是甚麼"><a href="#AJAX是甚麼" class="headerlink" title="AJAX是甚麼?"></a>AJAX是甚麼?</h1><ul><li>Asynchronous Javascript&amp;XML<blockquote><p>不是種語言、框架、函式庫只是一種網頁工具用來傳送、接收來自客戶端的資料給伺服器用一種非同步的處理方式那就是AJAX</p></blockquote></li><li>簡單來說就是處理這些發送的動作在看不到的狀況下同時不需要重新下載頁面</li><li>諷刺的地方是雖然命名有被使用到但是 XML相當少使用，比較多使用JSON(Javascript Object Notation)因為比較簡潔快速且受歡迎</li><li>單純的text也可以被使用</li></ul><h2 id="圖解AJAX"><a href="#圖解AJAX" class="headerlink" title="圖解AJAX"></a>圖解AJAX</h2><p><img src="https://i.imgur.com/TKMLQTR.png"></p><h3 id="Common-Request-amp-Response"><a href="#Common-Request-amp-Response" class="headerlink" title="Common Request&amp;Response"></a>Common Request&amp;Response</h3><p>例子:<br>點擊網頁連結會發出一個common request 給server會回傳common response，而這個response 包含了header或者是網頁內容，基本上使用者要求什麼就回傳甚麼 </p><h3 id="AJAX做的事情"><a href="#AJAX做的事情" class="headerlink" title="AJAX做的事情"></a>AJAX做的事情</h3><p>AJAX可做到的事情就是發送request 非同步的方式(Asynchronously)在後方，而不需要重新下載或是刷新全部頁面，而是只更新一小區域的內容，這樣的方式相對快速並且更充滿互動感</p><h3 id="AJAX去做request有幾種方式可以使用"><a href="#AJAX去做request有幾種方式可以使用" class="headerlink" title="AJAX去做request有幾種方式可以使用"></a>AJAX去做request有幾種方式可以使用</h3><p>1.使用原生JS語法<br>2.使用函式庫jQuery, Axios等等</p><h3 id="XmlHttpRequest"><a href="#XmlHttpRequest" class="headerlink" title="XmlHttpRequest"></a>XmlHttpRequest</h3><p>XmlHttpRequest Object (XHR)</p><blockquote><p>是一種物件型態的API 而他是一種物件代表會有屬性、方法可以使用，而這些其實是瀏覽器的JS環境提供的所以幾乎所有現代的瀏覽器都有這些API可以使用，其中的方法用來<strong>傳送資料往來</strong>用戶端-伺服器端或是瀏覽器-伺服器端</p></blockquote><ul><li>一種物件型態的API</li><li>瀏覽器的JS提供的環境</li><li>使用方法(methods)傳送資料往來用戶端-伺服器端</li><li>不只使用http，其他的protocols也可以使用</li><li>可以使用的資料格式有XML,JSON,plain text(純文字)</li></ul><h3 id="Server端回傳資料"><a href="#Server端回傳資料" class="headerlink" title="Server端回傳資料"></a>Server端回傳資料</h3><p>通常回傳的資料或是以JSON或是XML格式或是純文字</p><h3 id="HTML-Response"><a href="#HTML-Response" class="headerlink" title="HTML Response"></a>HTML Response</h3><p>這部分通常可以通過DOM去更新頁面或是回傳使用者要求的資料等等，回應使用者的需求</p><h3 id="Different-ways-libraries-amp-other-methods-to-make-AJAX-call"><a href="#Different-ways-libraries-amp-other-methods-to-make-AJAX-call" class="headerlink" title="Different ways(libraries&amp;other methods) to make AJAX call"></a>Different ways(libraries&amp;other methods) to make AJAX call</h3><ul><li>jQuery</li><li>Axios</li><li>Superagent</li><li>Fetch API 瀏覽器提供的功能</li><li>Prototype</li><li>Node HTTP</li></ul><h1 id="Let’s-Write-Some-Code"><a href="#Let’s-Write-Some-Code" class="headerlink" title="Let’s Write Some Code"></a>Let’s Write Some Code</h1><h2 id="Environment-setup"><a href="#Environment-setup" class="headerlink" title="Environment setup"></a>Environment setup</h2><p><a href="https://www.apachefriends.org/zh_tw/download.html">下載 XAMPP</a></p><p><img src="https://i.imgur.com/afbClYT.png"></p><p><a href="https://www.youtube.com/watch?v=6tCWiexc05U&list=PLillGF-Rfqbap2IB6ZS4BBBcYPagAjpjn&index=2&ab_channel=TraversyMedia">XAMPP設定影片</a></p><h3 id="創造資料夾擺接下來的要操作的範例"><a href="#創造資料夾擺接下來的要操作的範例" class="headerlink" title="創造資料夾擺接下來的要操作的範例"></a>創造資料夾擺接下來的要操作的範例</h3><p><img src="https://i.imgur.com/SyFwXky.png"></p><p>創造資料夾ajaxcrash<br><img src="https://i.imgur.com/MlL1rhU.png"></p><p>使用VScode開啟這個資料夾並且創建html檔案ajax1.html</p><p>打開一個網頁連接到剛剛創建好的資料夾就可以開始跟課程瞜!<br><img src="https://i.imgur.com/e4Q1w72.png"></p><p>設置一個sample.txt待會<br>待會程式會抓取使用並放入一些隨意的內文</p><p><img src="https://i.imgur.com/ioDd0QK.png"></p><h2 id="AJAX-1-Text-File-純文字檔案AJAX提取"><a href="#AJAX-1-Text-File-純文字檔案AJAX提取" class="headerlink" title="AJAX 1 -Text File 純文字檔案AJAX提取"></a>AJAX 1 -Text File 純文字檔案AJAX提取</h2><h3 id="onload"><a href="#onload" class="headerlink" title="onload()"></a>onload()</h3><p>當印出xhr會得到一些可以使用的方法<br><img src="https://i.imgur.com/Yt8JHRd.png"></p><p>創建一個按鈕來抓取sample.txt的內容<br><img src="https://i.imgur.com/SEEgr3F.png"></p><p>當成功抓取內文後，查看Netword內容<br>使用的方法:GET<br>Status Code:200 OK<br>Content Type:text/plain<br><img src="https://i.imgur.com/YfTSz3F.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button&quot;</span>&gt;Get Text File&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//create event listener</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;button&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, loadText);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//創造xhr物件 create XHR object</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="comment">//open方法填入的參數 open - type, url/file, async</span></span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&#x27;sample.txt&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//當status =200時印出sample.txt的內容</span></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用這個方法後才會顯示出內容在console裡面(send request)</span></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//HTTP Status</span></span><br><span class="line">        <span class="comment">//200 : &quot;OK&quot;</span></span><br><span class="line">        <span class="comment">//403 : &quot;Forbidden&quot;</span></span><br><span class="line">        <span class="comment">//404 : &quot;Not Found&quot;</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在onload狀態做<code>console.log(&#39;readystate:&#39;, xhr.readyState);</code>來看看目前位置的readystate在哪個位置</p><p>會發現只有<img src="https://i.imgur.com/uLMFaJP.png">中間的過程都不會跑</p><h4 id="當onload出錯的時候-產生404狀態的時候也可以呈現在DOM上面"><a href="#當onload出錯的時候-產生404狀態的時候也可以呈現在DOM上面" class="headerlink" title="當onload出錯的時候 產生404狀態的時候也可以呈現在DOM上面"></a>當onload出錯的時候 產生404狀態的時候也可以呈現在DOM上面</h4><p>這邊如果想要練習可以藉著把sample改名就可以取得這樣的狀態摟!</p><p><img src="https://i.imgur.com/LBmMEiF.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;readystate:&#x27;</span>, xhr.readyState);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">//正常狀態下顯示在DOM的處理</span></span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>).innerHTML = <span class="built_in">this</span>.responseText</span><br><span class="line">                <span class="comment">// 也就是404的狀態也可以呈現在HTML上面</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">404</span>) &#123;</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>).innerHTML = <span class="string">&quot;Not Found&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="onreadystatechange"><a href="#onreadystatechange" class="headerlink" title="onreadystatechange()"></a>onreadystatechange()</h3><p>會得出一樣的respose內容，差別在於<code>onreadystatechange()</code>在readystate必須在4的情況下也就是(4:request finished and response is ready)才會印出reponse的內容</p><p>可以使用<code>console.log(&#39;readystate:&#39;, xhr.readyState);</code>來看看目前位置的readystate在哪個位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//create XHR object</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="comment">//open - type, url/file, async</span></span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&#x27;sample.txt&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 當放在這一段的時候只會得到readystate1</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;readystate:&#x27;</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// xhr.onload = function () &#123;</span></span><br><span class="line">            <span class="comment">//     if (this.status == 200) &#123;</span></span><br><span class="line">            <span class="comment">//         // console.log(this.responseText);</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;readystate:&#x27;</span>, xhr.readyState);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// console.log(this.responseText);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//send request</span></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>放在條件式function之前時會顯示1</p><p>放在條件式中時會跑1234一直到也就是完成request以及respose ready內容進條件事就會跑後方的動作也就是印出responseText</p><p><img src="https://i.imgur.com/CI6r4hC.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button&quot;</span>&gt;Get Text File&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//create event listener</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;button&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, loadText);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//create XHR object</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="comment">//open - type, url/file, async</span></span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&#x27;sample.txt&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 這邊的readyState必須是4下方的內容才會被印出</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//send request</span></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// readyState Values</span></span><br><span class="line">        <span class="comment">// 0:request not initialized</span></span><br><span class="line">        <span class="comment">// 1:server connection established</span></span><br><span class="line">        <span class="comment">// 2:request received</span></span><br><span class="line">        <span class="comment">// 3:processing request</span></span><br><span class="line">        <span class="comment">// 4:request finished and response is ready</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="兩者的區別"><a href="#兩者的區別" class="headerlink" title="兩者的區別"></a>兩者的區別</h4><p>在於兩者的readyState</p><ul><li>onload - 它不會執行除非狀態是readyState:4</li><li>onreadystatechange - 卻是readyState:2,3也會執行</li></ul><h3 id="onprogress"><a href="#onprogress" class="headerlink" title="onprogress()"></a>onprogress()</h3><p>等待網頁載入時會跑的gif動畫時背景在做的事情</p><p>使用<code>console.log(&#39;readystate:&#39;, xhr.readyState);</code>來看看目前位置的readystate在哪個位置得出 3:processing request</p><p><img src="https://i.imgur.com/EUDGFaX.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;readyState:&#x27;</span>, xhr.readyState);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="onerror"><a href="#onerror" class="headerlink" title="onerror()"></a>onerror()</h3><p>當onload事件出錯時會跑這邊的函式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;Request Error...&#x27;</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="把取得的response放到DOM上面"><a href="#把取得的response放到DOM上面" class="headerlink" title="把取得的response放到DOM上面"></a>把取得的response放到DOM上面</h3><p>在上方的HTML先設置一個區域可以抓取的div</p><p><img src="https://i.imgur.com/a6SCQQi.png"></p><p>抓好之後使用<code>innerHTML</code>修改內容變成<code>responseText</code>就可以把DOM呈現reponse的內容了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;readystate:&#x27;</span>, xhr.readyState);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// console.log(this.responseText);</span></span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>).innerHTML = <span class="built_in">this</span>.responseText</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h2 id="AJAX2-Local-JSON-本地端資料夾AJAX提取資料"><a href="#AJAX2-Local-JSON-本地端資料夾AJAX提取資料" class="headerlink" title="AJAX2 - Local JSON 本地端資料夾AJAX提取資料"></a>AJAX2 - Local JSON 本地端資料夾AJAX提取資料</h2><p>前置作業:</p><p>設置ajax2.html來操作JSON<br><img src="https://i.imgur.com/0DC8Qzo.png"></p><p>多設置兩個資料夾待會做操作使用<br><img src="https://i.imgur.com/qrt5R5j.png"></p><p><img src="https://i.imgur.com/PQBR87Z.png"></p><p>並且轉換伺服器網址到ajax2<br><img src="https://i.imgur.com/qjvxRwM.png"></p><h3 id="取得JSON格式得內容"><a href="#取得JSON格式得內容" class="headerlink" title="取得JSON格式得內容"></a>取得JSON格式得內容</h3><p>使用下方的程式碼可以取得JSON全部的內容!</p><p>當點Get User時會產生下面的資料在console中<br><img src="https://i.imgur.com/ebGT9GQ.png"></p><p><img src="https://i.imgur.com/UlScz1z.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button1&quot;</span>&gt;Get User&lt;/button&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button2&quot;</span>&gt;Get Users&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;User&lt;/h1&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;user&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;h1&gt;Users&lt;/h1&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;users&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;button1&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, loadUser);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;user.json&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a><code>JSON.parse</code></h3><p>但是如果要取得其中的id,name,email個別取得的時候必須使用<code>JSON.parse</code></p><p>下方的範例我使用取的user的名字:Rick以字串的形式印出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> user = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">                    <span class="built_in">console</span>.log(user.name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="抓取到的JSON呈現到DOM上"><a href="#抓取到的JSON呈現到DOM上" class="headerlink" title="抓取到的JSON呈現到DOM上"></a>抓取到的JSON呈現到DOM上</h3><p>這邊我使用ES6的語法做串接直接貼到innerHTML上</p><p>當點擊Get User可以做到這樣的效果<br><img src="https://i.imgur.com/xEdYHx6.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;user.json&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> user = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&quot;user&quot;</span>).innerHTML =</span><br><span class="line">                        <span class="string">`&lt;ul&gt;&lt;li&gt;ID:<span class="subst">$&#123;user.id&#125;</span>&lt;/li&gt;&lt;li&gt;name:<span class="subst">$&#123;user.name&#125;</span>&lt;/li&gt;&lt;li&gt;email:<span class="subst">$&#123;user.email&#125;</span>&lt;/li&gt;&lt;/ul&gt;`</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="如果要取的複數JSON資料呈現到DOM上"><a href="#如果要取的複數JSON資料呈現到DOM上" class="headerlink" title="如果要取的複數JSON資料呈現到DOM上"></a>如果要取的複數JSON資料呈現到DOM上</h3><p>這邊的for…in迴圈會印出物件的屬性並且使用+=把所有的內容接續印出直到把內容印完為止</p><p><img src="https://i.imgur.com/xRC8VVu.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;users.json&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> users = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText);</span><br><span class="line">                    <span class="keyword">var</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> users) &#123;</span><br><span class="line">                        output +=</span><br><span class="line">                            <span class="string">`&lt;ul&gt;&lt;li&gt;ID:<span class="subst">$&#123;users[i].id&#125;</span>&lt;/li&gt;&lt;li&gt;name:<span class="subst">$&#123;users[i].name&#125;</span>&lt;/li&gt;&lt;li&gt;email:<span class="subst">$&#123;users[i].email&#125;</span>&lt;/li&gt;&lt;/ul&gt;`</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&quot;users&quot;</span>).innerHTML = output;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="AJAX3-External-API-AJAX提取-GitHub作範例"><a href="#AJAX3-External-API-AJAX提取-GitHub作範例" class="headerlink" title="AJAX3 - External API AJAX提取(GitHub作範例)"></a>AJAX3 - External API AJAX提取(GitHub作範例)</h2><p>處理方式基本上跟取的內部資料夾檔案的方式差不多只是在xhr.open的中間的參數改成Github API的網址，其他處理基本上都一樣</p><p><img src="https://i.imgur.com/l4pEydG.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button&quot;</span>&gt;Load GitHub Users&lt;/button&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;h1&gt;Github Users&lt;/h1&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;users&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;button&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, loadUsers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Load Github Users</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.github.com/users&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> users = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText);</span><br><span class="line">                    <span class="keyword">var</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> users) &#123;</span><br><span class="line">                        output +=</span><br><span class="line">                            <span class="string">`&lt;div class=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="string">                            &lt;img src=&quot;<span class="subst">$&#123;users[i].avatar_url&#125;</span>&quot; width =&quot;70&quot; height =&quot;70&quot;&gt;</span></span><br><span class="line"><span class="string">                            &lt;ul&gt;</span></span><br><span class="line"><span class="string">                            &lt;li&gt;ID:<span class="subst">$&#123;users[i].id&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                            &lt;li&gt;Login:<span class="subst">$&#123;users[i].login&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                            &lt;/div&gt;`</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;users&#x27;</span>).innerHTML = output;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="AJAX4-使用PHP取得資料並且對比AJAX取得方式-參考閱讀PHP的部分"><a href="#AJAX4-使用PHP取得資料並且對比AJAX取得方式-參考閱讀PHP的部分" class="headerlink" title="AJAX4 - 使用PHP取得資料並且對比AJAX取得方式(參考閱讀PHP的部分)"></a>AJAX4 - 使用PHP取得資料並且對比AJAX取得方式(參考閱讀PHP的部分)</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>使用正常PHP方式會整個reload網頁<br><img src="https://i.imgur.com/JsuWQEJ.gif"></p><p>使用AJAX會再背景處理資料<br><img src="https://i.imgur.com/7dtHe3H.gif"></p><p>一樣修改<code>xhr.open(process.php?name=$&#123;name&#125;)</code> 這個部分讓name的部分是input去輸入，其他AJAX部分的操作都差不多，PHP部分就不多做介紹只是舉例子示範</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button&quot;</span>&gt;Get Name&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;PHP GET FORM&lt;/h1&gt;</span><br><span class="line">    &lt;form metod=<span class="string">&quot;GET&quot;</span> action=<span class="string">&quot;process.php&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;PHP AJAX GET FORM&lt;/h1&gt;</span><br><span class="line">    &lt;form id=<span class="string">&quot;getForm&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> id=<span class="string">&quot;name1&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;button&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, getName);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;getForm&quot;</span>).addEventListener(<span class="string">&quot;submit&quot;</span>, getName);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;name1&#x27;</span>).value;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">`process.php?name=<span class="subst">$&#123;name&#125;</span>`</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>頁面呈現其實跟GET差不多但是方法內容不同，可以做參考就好</p><p>POST PHP的寫法不太好懂不過也只是要呈現出跟AJAX的差異所以這邊不多做解釋<br>不過POST的作用是把資料傳進伺服器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;PHP POST FORM&lt;/h1&gt;</span><br><span class="line">    &lt;form method=<span class="string">&quot;POST&quot;</span> action=<span class="string">&quot;process.php&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;PHP AJAX POST FORM&lt;/h1&gt;</span><br><span class="line">    &lt;form id=<span class="string">&quot;postForm&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> id=<span class="string">&quot;name2&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;postForm&quot;</span>).addEventListener(<span class="string">&quot;submit&quot;</span>, postName);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">postName</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;name2&#x27;</span>).value;</span><br><span class="line">            <span class="keyword">var</span> params = <span class="string">&quot;name=&quot;</span> + name;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;process.php&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">            xhr.setRequestHeader(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            xhr.send(params);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AJAX-Crash-Course-Vanilla-JavaScript&quot;&gt;&lt;a href=&quot;#AJAX-Crash-Course-Vanilla-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;AJAX Crash Course (V</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-Fetch API Introduction(5000字)</title>
    <link href="http://example.com/2021/03/22/JS-Fetch%20API%20Introduction/"/>
    <id>http://example.com/2021/03/22/JS-Fetch%20API%20Introduction/</id>
    <published>2021-03-22T11:16:20.849Z</published>
    <updated>2021-03-22T11:19:44.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fetch-API-Introduction-Vanilla-JavaScript"><a href="#Fetch-API-Introduction-Vanilla-JavaScript" class="headerlink" title="Fetch API Introduction(Vanilla JavaScript)"></a>Fetch API Introduction(Vanilla JavaScript)</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="使用Fetch-API取得plain-text"><a href="#使用Fetch-API取得plain-text" class="headerlink" title="使用Fetch API取得plain text"></a>使用Fetch API取得plain text</h1><h2 id="建立一個plain-text待會使用"><a href="#建立一個plain-text待會使用" class="headerlink" title="建立一個plain text待會使用"></a>建立一個plain text待會使用</h2><p><img src="https://i.imgur.com/qo8Shae.png"></p><h2 id="response印出的結果是目前response的一些狀態"><a href="#response印出的結果是目前response的一些狀態" class="headerlink" title="response印出的結果是目前response的一些狀態"></a>response印出的結果是目前response的一些狀態</h2><p><img src="https://i.imgur.com/w40HcCx.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;getText&quot;</span>&gt;Get Text&lt;/button&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;getText&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, getText);</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fetch(<span class="string">&quot;sample.txt&quot;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="確認response的text"><a href="#確認response的text" class="headerlink" title="確認response的text()"></a>確認response的text()</h2><p>想要確認response的text()，卻得到還在pending的promise，同時可以看到裡面包含著value是我們要的內容，但目前還不能使用<br><img src="https://i.imgur.com/b5iqQch.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fetch(<span class="string">&quot;sample.txt&quot;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.text());</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="轉換response-成-text"><a href="#轉換response-成-text" class="headerlink" title="轉換response 成 text"></a>轉換response 成 text</h2><p>因為內容是plain tex所以必須轉換response 成 text<br>return其值後，再使用一次<code>.then</code>即可印出值摟!</p><p><img src="https://i.imgur.com/7sHhNNL.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fetch(<span class="string">&quot;sample.txt&quot;</span>)</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//因為內容是plain tex所以必須轉換response 成 text</span></span><br><span class="line">            <span class="keyword">return</span> res.text();</span><br><span class="line">          &#125;)</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="使用箭頭函式寫一遍"><a href="#使用箭頭函式寫一遍" class="headerlink" title="使用箭頭函式寫一遍"></a>使用箭頭函式寫一遍</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&quot;sample.txt&quot;</span>)</span><br><span class="line">          .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.text())</span><br><span class="line">          .then(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data));</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="把獲取到的plain-text-貼到DOM"><a href="#把獲取到的plain-text-貼到DOM" class="headerlink" title="把獲取到的plain text 貼到DOM"></a>把獲取到的plain text 貼到DOM</h2><p><img src="https://i.imgur.com/QBcQ8jN.png"></p><p><img src="https://i.imgur.com/aKSmxFf.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&quot;sample.txt&quot;</span>)</span><br><span class="line">          .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.text())</span><br><span class="line">          .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>).innerHTML = data;</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><h2 id="catch"><a href="#catch" class="headerlink" title="catch()"></a><code>catch()</code></h2><p>當reject情況發生的時候的時候，會跑catch內部的函式</p><p>印出錯誤訊息以及字串”err”<br><img src="https://i.imgur.com/ZPQXl47.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&quot;sample.txt&quot;</span>)</span><br><span class="line">          .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.text())</span><br><span class="line">          .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;divv&quot;</span>).innerHTML = data;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.error(err);</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><h1 id="使用Fetch-API取得JSON格式的資料"><a href="#使用Fetch-API取得JSON格式的資料" class="headerlink" title="使用Fetch API取得JSON格式的資料"></a>使用Fetch API取得JSON格式的資料</h1><h2 id="先建立一個JSON檔案待會做取用"><a href="#先建立一個JSON檔案待會做取用" class="headerlink" title="先建立一個JSON檔案待會做取用"></a>先建立一個JSON檔案待會做取用</h2><p>從這邊可以看到要操作的資料被包裹在陣列裡面<br><img src="https://i.imgur.com/jFUOq7A.png"></p><h2 id="用forEach操作陣列資料後以ES6字串串接的方式呈現"><a href="#用forEach操作陣列資料後以ES6字串串接的方式呈現" class="headerlink" title="用forEach操作陣列資料後以ES6字串串接的方式呈現"></a>用forEach操作陣列資料後以ES6字串串接的方式呈現</h2><p>因為內容是JSON格式所以必須轉換response 成 JSON格式再使用forEach去逐個印出<br>forEach內部的函式是每一個印出的user該長的樣子讓他符合html的格式後再使用innerHTML貼上去outputs<br><img src="https://i.imgur.com/Dr8rzap.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fetch(<span class="string">&quot;users.json&quot;</span>)</span><br><span class="line">          .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json())</span><br><span class="line">          .then(<span class="function">(<span class="params">users</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> outputs = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            users.forEach(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">              outputs += <span class="string">`</span></span><br><span class="line"><span class="string">              &lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;ID:<span class="subst">$&#123;user.id&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;name:<span class="subst">$&#123;user.name&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;email:<span class="subst">$&#123;user.email&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;/ul&gt;</span></span><br><span class="line"><span class="string">              `</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>).innerHTML = outputs;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="使用Fetch-API-POST-JSON格式的資料"><a href="#使用Fetch-API-POST-JSON格式的資料" class="headerlink" title="使用Fetch API POST JSON格式的資料"></a>使用Fetch API POST JSON格式的資料</h1><p>當點擊submit按鈕時，會送出POST方法。</p><p>下面有展示一些簡易的POST寫法，之後的.then處理方式是跟GET方法是一樣的</p><p><img src="https://i.imgur.com/P5SIhv4.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form id=<span class="string">&quot;addPost&quot;</span>&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;title&quot;</span> placeholder=<span class="string">&quot;Title&quot;</span>&gt;&lt;/input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;textarea type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;body&quot;</span> placeholder=<span class="string">&quot;Body&quot;</span><span class="string">&quot;&gt;&lt;/textarea&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;</span>submit<span class="string">&quot; value=&quot;</span>submit<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;div id=&quot;</span>div<span class="string">&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      document.getElementById(&quot;</span>addPost<span class="string">&quot;).addEventListener(&quot;</span>submit<span class="string">&quot;, addPost);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      function addPost(e) &#123;</span></span><br><span class="line"><span class="string">          e.preventDefault();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          let title = document.getElementById(&quot;</span>title<span class="string">&quot;).value;</span></span><br><span class="line"><span class="string">          let body = document.getElementById(&quot;</span>body<span class="string">&quot;).value;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          fetch(&#x27;https://jsonplaceholder.typicode.com/posts&#x27;, &#123;</span></span><br><span class="line"><span class="string">              method: &#x27;POST&#x27;,</span></span><br><span class="line"><span class="string">              headers: &#123;</span></span><br><span class="line"><span class="string">                  &#x27;Accept&#x27;: &#x27;application/json, text/plain, */*&#x27;,</span></span><br><span class="line"><span class="string">                  &#x27;Content-Type&#x27;: &#x27;application/json&#x27;</span></span><br><span class="line"><span class="string">              &#125;,</span></span><br><span class="line"><span class="string">              body:JSON.stringify(&#123;title: title, body: body&#125;)</span></span><br><span class="line"><span class="string">          &#125;)</span></span><br><span class="line"><span class="string">          .then((res) =&gt;res.json())</span></span><br><span class="line"><span class="string">          .then((data) =&gt;console.log(data))</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fetch-API-Introduction-Vanilla-JavaScript&quot;&gt;&lt;a href=&quot;#Fetch-API-Introduction-Vanilla-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Fetch API </summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-網頁前端工程入門(一萬字)</title>
    <link href="http://example.com/2021/03/22/JS-%E7%B6%B2%E9%A0%81%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%85%A5%E9%96%80(%E4%B8%80%E8%90%AC%E5%AD%97)/"/>
    <id>http://example.com/2021/03/22/JS-%E7%B6%B2%E9%A0%81%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%85%A5%E9%96%80(%E4%B8%80%E8%90%AC%E5%AD%97)/</id>
    <published>2021-03-22T11:13:05.333Z</published>
    <updated>2021-03-22T11:15:47.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="網頁前端工程入門"><a href="#網頁前端工程入門" class="headerlink" title="網頁前端工程入門"></a>網頁前端工程入門</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h2 id="Javascript-簡介"><a href="#Javascript-簡介" class="headerlink" title="Javascript 簡介"></a>Javascript 簡介</h2><ul><li> 現代網頁的必需品</li><li> Java V.S Javascript</li></ul><p>接下來他介紹了可以在HTML檔案裡寫入JS的其中一種方式如下:</p><p><img src="https://i.imgur.com/czM75KC.png"></p><h2 id="Javascript-變數與運算子"><a href="#Javascript-變數與運算子" class="headerlink" title="Javascript 變數與運算子"></a>Javascript 變數與運算子</h2><ul><li>資料: 數字 字串 布林值 物件</li><li>變數: 可存放資料的空間並且它可以命名</li><li>運算子: 可對資料做操作的符號</li></ul><h3 id="單行的註解以及多行註解"><a href="#單行的註解以及多行註解" class="headerlink" title="單行的註解以及多行註解:"></a>單行的註解以及多行註解:</h3><p><img src="https://i.imgur.com/q6YqNsN.png"></p><h3 id="數字-字串-需要””包裹或是’’包裹-布林值"><a href="#數字-字串-需要””包裹或是’’包裹-布林值" class="headerlink" title="數字 字串(需要””包裹或是’’包裹) 布林值"></a>數字 字串(需要””包裹或是’’包裹) 布林值</h3><p><img src="https://i.imgur.com/0Y3B0De.png"></p><h3 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h3><ul><li> 需要宣告並且賦予值之後才能跑</li><li> 等號右邊的值被抓取給變數</li><li> 可以被覆蓋，跟文章一樣有順序由上至下</li></ul><p><img src="https://i.imgur.com/JB1XwY5.png"></p><h3 id="運算子"><a href="#運算子" class="headerlink" title="運算子"></a>運算子</h3><p>常見的有加減乘除</p><p>單元運算 <code>++</code>把數值加一<br>result<code>++</code> =&gt; result = result + 1</p><p><img src="https://i.imgur.com/tHnVQHQ.png"></p><h3 id="布林值"><a href="#布林值" class="headerlink" title="布林值"></a>布林值</h3><p>比較運算 </p><p><img src="https://i.imgur.com/DvCSF3M.png"></p><p>一個 = 是指派<br>兩個 = 是相等的值</p><p><img src="https://i.imgur.com/VAxT3TU.png"></p><p>也可以用變數做運算</p><p><img src="https://i.imgur.com/G42xNwd.png"></p><h3 id="輸入、輸出"><a href="#輸入、輸出" class="headerlink" title="輸入、輸出"></a>輸入、輸出</h3><p>使用者有感的程式:</p><p>輸入: <code>prompt(提示語,預設值)</code>-&gt; 程式做運算 -&gt; 輸出:<code>alert(資料)</code></p><p>prompt的效果裡面的提示語是字串”請輸入數字”，”1”就是預設值</p><p><img src="https://i.imgur.com/NDC9t6U.png"></p><p>一個簡單的可以跟使用者互動的程式:</p><p><img src="https://i.imgur.com/QHcrp0S.png"></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li>判斷式</li><li>迴圈</li></ul><h3 id="第一個-if"><a href="#第一個-if" class="headerlink" title="第一個: if"></a>第一個: if</h3><p><code>if()&#123;&#125;</code></p><p>當小括號的布林值為true的時候會跑後面大括號的程式，如果為false則跳過</p><p><img src="https://i.imgur.com/mUp72db.png"></p><p>像這邊就會讓使用者輸入值並去判斷大小，再根據判斷內容去決定是否跑後面的程式</p><p><img src="https://i.imgur.com/oIxiI6C.png"></p><h3 id="第二個-else"><a href="#第二個-else" class="headerlink" title="第二個:  else"></a>第二個:  else</h3><p>當if後面的比較式出錯之後就會跑else</p><p><img src="https://i.imgur.com/d4BF56Z.png"></p><h3 id="第三個-else-if"><a href="#第三個-else-if" class="headerlink" title="第三個: else if"></a>第三個: else if</h3><p>會一直做判斷如果都不是true的話則執行else</p><p><img src="https://i.imgur.com/ya7BbMw.png"></p><p>一個簡單的四則運算使用上面所學:</p><p>一個重點在於prompt會要求輸入字串所以必須做資料型態轉換</p><p><img src="https://i.imgur.com/SuiUIC0.png"></p><h2 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h2><h3 id="while迴圈-跟if不一樣的地方在while會一直跑"><a href="#while迴圈-跟if不一樣的地方在while會一直跑" class="headerlink" title="while迴圈(跟if不一樣的地方在while會一直跑)"></a>while迴圈(跟if不一樣的地方在while會一直跑)</h3><p>下圖就是個很好的while的範例，他會跑50遍在n變成51的時候跳脫迴圈被印出51</p><p><img src="https://i.imgur.com/iOoAJMj.png"></p><p>另一個很常見的1+~100:</p><p><img src="https://i.imgur.com/PQUcHTq.png"></p><h3 id="do-迴圈"><a href="#do-迴圈" class="headerlink" title="do 迴圈"></a>do 迴圈</h3><p>還有個do 迴圈跟while不一樣的是do 一定會跑至少一次，while如果條件不成立就一次都不會跑。</p><p>下圖可以觀察出do 的執行式在上面所以他一定至少會跑一次程式<br><img src="https://i.imgur.com/LY35pGc.png"></p><h3 id="for迴圈"><a href="#for迴圈" class="headerlink" title="for迴圈"></a>for迴圈</h3><ul><li>第一個分號之前initializes整個loop，同時定義binding</li><li>第二個部分check整個loop要不要繼續跑</li><li>最後一個部分更新整個loop狀態在每一次迴圈結束之後</li></ul><p><img src="https://i.imgur.com/MfL6MgZ.png"></p><h3 id="break-強制跳出迴圈"><a href="#break-強制跳出迴圈" class="headerlink" title="break 強制跳出迴圈"></a>break 強制跳出迴圈</h3><p>直接跳出迴圈印出50:</p><p><img src="https://i.imgur.com/Mcs874U.png"></p><h3 id="continue-強制進行下一次的迴圈"><a href="#continue-強制進行下一次的迴圈" class="headerlink" title="continue 強制進行下一次的迴圈"></a>continue 強制進行下一次的迴圈</h3><p>因為continue會強制進行迴圈所以下方的x被省略了25次也就是100裡面整除4的數字的數量所以印出75</p><p><img src="https://i.imgur.com/KN8UGdW.png"></p><h2 id="迴圈仔細新手教學"><a href="#迴圈仔細新手教學" class="headerlink" title="迴圈仔細新手教學"></a>迴圈仔細新手教學</h2><p>計算1+~+50:<br><img src="https://i.imgur.com/V5Q7i0G.png"></p><p>建議直接把數字帶進去可以幫助理解:<br><img src="https://i.imgur.com/DXicri4.png"></p><p>這邊來理解continue:</p><p>觀察下方追蹤的數字可以發現x必須執行兩次才會+1一次，所以印出x是50</p><p><img src="https://i.imgur.com/ZBFFWKK.png"></p><p><img src="https://i.imgur.com/m4gShlK.png"></p><h2 id="函式教學"><a href="#函式教學" class="headerlink" title="函式教學"></a>函式教學</h2><h3 id="函式基礎"><a href="#函式基礎" class="headerlink" title="函式基礎"></a>函式基礎</h3><h4 id="內建函式"><a href="#內建函式" class="headerlink" title="內建函式"></a>內建函式</h4><p>人家內建好的程式碼，例如:<br><code>alert();</code></p><h4 id="設計階段"><a href="#設計階段" class="headerlink" title="設計階段"></a>設計階段</h4><p>當多個參數的時候可以使用(,)隔開</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">message<span class="comment">//參數名稱)&#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">//函式的本體</span></span></span></span><br><span class="line"><span class="function"><span class="params">    alert(message)</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure><h4 id="呼叫-使用階段"><a href="#呼叫-使用階段" class="headerlink" title="呼叫/使用階段"></a>呼叫/使用階段</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&quot;Helloe World&quot;</span><span class="comment">//傳入函式的參數資料);</span></span><br></pre></td></tr></table></figure><p>這邊的result因為上方function沒有輸入return回傳值，所以下面的alert(result)會回傳undefined</p><p><img src="https://i.imgur.com/uWbVPIC.png"></p><p>因此這邊要介紹到reture，他會把函式本體跑的結果回傳到呼叫的位置，這樣下方的alert(result)就會回傳7瞜!</p><p><img src="https://i.imgur.com/qFu3lbH.png"></p><p>return回傳明確可以做些甚麼呢?可以再利用return回傳到呼叫位置，再去做運算結果會得掉210!</p><p><img src="https://i.imgur.com/0aWqZD2.png"></p><h4 id="整合範例"><a href="#整合範例" class="headerlink" title="整合範例"></a>整合範例</h4><p>因為函式就是設定一個方法來做重複使用，所以數字上面不能寫死，用max來代替之後輸入max值之後就可以用在其他地方了</p><p><img src="https://i.imgur.com/hFagRlX.png"></p><h3 id="函式變形與名稱空間"><a href="#函式變形與名稱空間" class="headerlink" title="函式變形與名稱空間"></a>函式變形與名稱空間</h3><h4 id="函式變形"><a href="#函式變形" class="headerlink" title="函式變形"></a>函式變形</h4><p>創造函式有兩種方法:</p><p>第一種就是上面介紹的創造函式<br><img src="https://i.imgur.com/z9xYOMS.png"></p><p>第二種比較像是使用變數指派函數給變數<br><img src="https://i.imgur.com/Q8OdUrz.png"></p><p>所以她是可以這樣使用的像是變數一樣改變指派的內容一樣可以跑這個函式<br>test後面的add就代表函式的本體(因為她沒有做呼叫)<br><img src="https://i.imgur.com/6YuDkPG.png"></p><p>判別x後面的資料是什麼他就可以做甚麼事情<br><img src="https://i.imgur.com/WBxkE6L.png"></p><h4 id="函是創造新的名稱空間"><a href="#函是創造新的名稱空間" class="headerlink" title="函是創造新的名稱空間"></a>函是創造新的名稱空間</h4><p>變數找不到往外找</p><p>!!外部的程式碼不能使用內部的變數!!</p><p><img src="https://i.imgur.com/iv0M4uM.png"></p><h2 id="物件object"><a href="#物件object" class="headerlink" title="物件object"></a>物件object</h2><h3 id="建立物件"><a href="#建立物件" class="headerlink" title="建立物件:"></a>建立物件:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">point.x=<span class="number">3</span>; <span class="comment">//物件裡面裝的東西不是函式就是屬性</span></span><br><span class="line">point.y=<span class="number">4</span>;</span><br><span class="line">point.getPosition=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//如果是函式就是方法</span></span><br><span class="line">alert(<span class="built_in">this</span>.x+<span class="built_in">this</span>.y);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用物件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//這邊跟函式的呼叫很像</span></span><br><span class="line">point.getPosition();</span><br></pre></td></tr></table></figure><p>綜合範例</p><p><img src="https://i.imgur.com/6Y008E5.png"></p><h3 id="使用建構式"><a href="#使用建構式" class="headerlink" title="使用建構式:"></a>使用建構式:</h3><p>建構式就是要取代設計的部分讓未來要產生類似的物件的時候會更輕鬆</p><p>建構式的函式呼叫必須加上new</p><p>　<img src="https://i.imgur.com/BwJ96JP.png"></p><p>紅框框的部分是讓這個函式可以讓複數的變數呼叫</p><p><img src="https://i.imgur.com/52TGuOM.png"></p><h2 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h2><h3 id="基本教學"><a href="#基本教學" class="headerlink" title="基本教學"></a>基本教學</h3><p>然後有個小地方windows這個部分可以不寫程式一樣可以正常執行</p><p>這張圖特別重要這張圖就代表DOM<br><img src="https://i.imgur.com/MfGGsvP.png"></p><p>下圖可以看出那個樹狀圖出現在程式碼中並且加上一個innerHTML去修改裡面的內容:</p><p><img src="https://i.imgur.com/fDEaHMp.png"></p><p>但是他修改整個body會導致泛用性不高因此可以這樣改:</p><p>使用getElementId的工具來取的id來做修改這樣子就到處都可以用摟!</p><p><img src="https://i.imgur.com/p2nuB1D.png"></p><p>剛剛上面都是修改內容其實還可以修改CSS:</p><p>這邊有個重點因為CSS裡面有很多功能有包含(-)JS不能使用，因此都改成字首大寫例如:font-weight會改成fontWeight</p><p><img src="https://i.imgur.com/RW70Ynv.png"></p><h3 id="選單操作開合範例"><a href="#選單操作開合範例" class="headerlink" title="選單操作開合範例"></a>選單操作開合範例</h3><p>使用onclick在HTML裡面，並且設定id去操作:</p><p><img src="https://i.imgur.com/ZmJX3be.png"></p><p>不過在搭配class 選擇器使用之後可以讓他更精簡:</p><p><img src="https://i.imgur.com/apqRb7S.png"></p><p><img src="https://i.imgur.com/l5oNcaM.png"></p><p>接下來當選單不只一個需要開闔的時候就可以放入編號:</p><p>並且在選單處的id放入編號就可以針對點擊的選單收放摟!</p><p><img src="https://i.imgur.com/u22EjXv.png"></p><h2 id="事件處理"><a href="#事件處理" class="headerlink" title="事件處理"></a>事件處理</h2><h3 id="基本教學-1"><a href="#基本教學-1" class="headerlink" title="基本教學"></a>基本教學</h3><p>基本上任何標籤都可以加上事件處理:on+事件的名稱</p><p>當使用者對畫面做出動作的時候，程式必須偵測到這個動作並且做出反應</p><p>最簡單的就是點擊<code>onclick</code>:</p><p><img src="https://i.imgur.com/zNACDqg.png"></p><p>類似CSS裡面的hover功能:</p><p><code>onmouseover</code></p><p><code>onmouseout</code></p><p><img src="https://i.imgur.com/NbmZWGh.png"></p><p><img src="https://i.imgur.com/V1lhneK.png"></p><p>靜態的事件處理器:</p><p>直接寫入HTML裡面，不推薦這樣寫<br><img src="https://i.imgur.com/VOqJuIx.png"></p><p>動態的事件處理器:</p><p>必須先在要處理的tag裡面設置id，這邊是設置”btn”</p><p>下方的addEvenListener是比較好的寫法</p><p><img src="https://i.imgur.com/NbK1u2M.png"></p><p>有很多的功能參數使用在事件裡面，例如: click, mouseover, focus, blur….<br><img src="https://i.imgur.com/H0oIswo.png"></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/Events">MDN網站:事件參考</a></p><h3 id="事件物件的取得和使用"><a href="#事件物件的取得和使用" class="headerlink" title="事件物件的取得和使用"></a>事件物件的取得和使用</h3><p>這是個簡單的跳出式窗hello的程式在你點擊瀏覽器之後</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 這邊這個init會對應到HTML中tag裡面</span></span><br><span class="line">    <span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> handler=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 註冊函式</span></span><br><span class="line">        alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    btn.addEventListener(<span class="string">&quot;click&quot;</span>, handler); <span class="comment">// 註冊事件處理器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有三件事情會發生在當你點擊瀏覽器上的物件後:</p><ul><li>使用者點擊了按鈕，觸發了click事件</li><li>瀏覽器主動收集和事件有關的資訊，並製造出Even object 事件物件<br>var eventobj=事件物件</li><li>呼叫已經註冊的事件處理器(事件處理函式)</li></ul><p>這要先做取得事件物件:</p><p>這邊的事件物件就是滑鼠的座標</p><p><img src="https://i.imgur.com/9E4QuzQ.png"></p><p>這邊的事件物件就是鍵盤的代表的值</p><p>比較特別的點是他直接把註冊的函式直接寫入處理器裡面，這種作法叫做匿名函式直接當作事件處理使用<br><img src="https://i.imgur.com/bSWS2AZ.png"></p><h2 id="自動排程"><a href="#自動排程" class="headerlink" title="自動排程"></a>自動排程</h2><p>一個簡單的基本例子:</p><p>讓瀏覽器在1秒之後跳出alert視窗說HELLO</p><p><img src="https://i.imgur.com/j8e2oJo.png"></p><p>一般自動排程的應用</p><p>這邊介紹<code>window.setTimeout</code>這個倒數工具:</p><p><img src="https://i.imgur.com/OJXsARi.png"></p><p><code>window.setIterval</code></p><p>使用這個工具的話就不需要再if那邊再重新倒數一次因為它會在設定的時間後每次都執行一次:</p><p><img src="https://i.imgur.com/73wUXNE.png"></p><h2 id="跨平台的網頁伺服器架設教學"><a href="#跨平台的網頁伺服器架設教學" class="headerlink" title="跨平台的網頁伺服器架設教學"></a>跨平台的網頁伺服器架設教學</h2><p><a href="https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb/related">chrome插件網址</a></p><ul><li>程式中選擇資料夾</li><li>開啟伺服器或式關閉伺服器按鈕</li><li>測試網站的網址</li></ul><p><img src="https://i.imgur.com/GmiEH3q.png"></p><p>下方有個可以輸入port值，當要正式上線的時候可以使用80這個值</p><p><img src="https://i.imgur.com/p57vPB1.png"></p><p>在資料夾裡面放入HTML檔就可以測試檔案瞜!</p><h2 id="Ajax教學-JS-與伺服器的互動"><a href="#Ajax教學-JS-與伺服器的互動" class="headerlink" title="Ajax教學 - JS 與伺服器的互動"></a>Ajax教學 - JS 與伺服器的互動</h2><blockquote><p>用程式來做網路的連線就是Ajax</p></blockquote><p>這邊有使用到 <code>get</code> 來送出資料在使用onload來把資料載入頁面藉由搜尋HTML裡面的id處理</p><p><img src="https://i.imgur.com/hIYACq3.png"></p><h2 id="JSON基本教學"><a href="#JSON基本教學" class="headerlink" title="JSON基本教學"></a>JSON基本教學</h2><p>Javascript object Notation(Javascript 物件表示法)</p><p>JSON可以讓一般object做到比較簡潔寫法</p><p>上下兩個表達一樣的東西:<br><img src="https://i.imgur.com/IZFF1lD.png"></p><p><code>JSON.stringify</code><br>回應使用JSON編碼過後的內容回來並且轉換成字串，但是它會忽略函式(get不見了)<br>把上面的point轉換成字串輸出<br><img src="https://i.imgur.com/OkrD8Bh.png"><br><img src="https://i.imgur.com/XZt8be4.png"></p><p><code>JSON.parse</code><br>擷取出被編譯前的內容出來將字串轉換成物件結構又轉換回來的概念<br><img src="https://i.imgur.com/AyDf3mL.png"><br><img src="https://i.imgur.com/JUwM7IJ.png"></p><h2 id="Hoisting-宣告提升"><a href="#Hoisting-宣告提升" class="headerlink" title="Hoisting 宣告提升"></a>Hoisting 宣告提升</h2><p>前端工程師面式的常見議題:</p><h3 id="變數與函式的宣告提升-Hoisting"><a href="#變數與函式的宣告提升-Hoisting" class="headerlink" title="變數與函式的宣告提升 Hoisting"></a>變數與函式的宣告提升 Hoisting</h3><p>JS程式在執行的時候會內建把變數往上提升，所以就算這樣寫，跑出來的結果也是正常的10</p><p><img src="https://i.imgur.com/sqSdBm0.png"></p><p>這邊要特別注意只有宣告變數提升而已，給定初始值並不會提升所以這邊的結果會印出undefined</p><p><img src="https://i.imgur.com/yUgavdK.png"></p><p>在JS裡面可以先呼叫函式在寫宣告也一樣可以執行，因為函式的宣告跟變數的宣告一樣會被提升到程式的最上方<br><img src="https://i.imgur.com/oYRQ5pt.png"></p><p>這邊一樣要特別注意的點是變數一樣只有宣告的部分提升函式的部分留在原地所以一樣沒有執行</p><p><img src="https://i.imgur.com/H91XNnV.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;網頁前端工程入門&quot;&gt;&lt;a href=&quot;#網頁前端工程入門&quot; class=&quot;headerlink&quot; title=&quot;網頁前端工程入門&quot;&gt;&lt;/a&gt;網頁前端工程入門&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;tags-Javascript-relate&quot;&gt;&lt;a href=&quot;#ta</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-The Weird Part Of Javascript - part 2(一萬字)</title>
    <link href="http://example.com/2021/03/21/JS-The%20Weird%20Part%20Of%20Javascript%20-%20part%202/"/>
    <id>http://example.com/2021/03/21/JS-The%20Weird%20Part%20Of%20Javascript%20-%20part%202/</id>
    <published>2021-03-20T17:35:53.016Z</published>
    <updated>2021-03-21T18:30:55.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-Weird-Part-Of-Javascript-part-2"><a href="#The-Weird-Part-Of-Javascript-part-2" class="headerlink" title="The Weird Part Of Javascript - part 2"></a>The Weird Part Of Javascript - part 2</h1><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="物件與函式-Objects-And-Functions"><a href="#物件與函式-Objects-And-Functions" class="headerlink" title="物件與函式 (Objects And Functions)"></a>物件與函式 (Objects And Functions)</h1><blockquote><p>在其他程式語言中物件、函式是兩種完全不同的存在，但是在JS裡面它們非常相似</p></blockquote><h2 id="Objects-And-The-Dot"><a href="#Objects-And-The-Dot" class="headerlink" title="Objects And The Dot"></a>Objects And The Dot</h2><ul><li>物件(objects)是鍵值配對 (name:value pair) 的集合(不一定只有一對)</li><li>物件內可以包含有純值(Primitives)、另一個物件(Objects)、函式Function(或稱方法method)</li><li>上面標示的0x001是記憶體內部位置的範例，就像是它們的地址</li></ul><p><img src="https://i.imgur.com/zt3XHMD.png"></p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>這邊是為了作範例而這樣製作物件，不過會有更好的方式會在後面的章節介紹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">person[<span class="string">&quot;firstname&quot;</span>] = <span class="string">&quot;Tony&quot;</span>;</span><br><span class="line">person[<span class="string">&quot;lastname&quot;</span>] = <span class="string">&quot;Alicea&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstNameProperty = <span class="string">&quot;firstname&quot;</span>;</span><br><span class="line"></span><br><span class="line">person.address = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.address.street = <span class="string">&quot;111 Main St.&quot;</span>;</span><br><span class="line">person.address.city = <span class="string">&quot;London&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">//得到object</span></span><br><span class="line"><span class="built_in">console</span>.log(person[<span class="string">&quot;firstname&quot;</span>]); <span class="comment">//得到Tony</span></span><br><span class="line"><span class="built_in">console</span>.log(person[firstNameProperty])<span class="comment">//得到Tony</span></span><br><span class="line"><span class="built_in">console</span>.log(person.firstname);<span class="comment">//得到Tony</span></span><br><span class="line"><span class="built_in">console</span>.log(person.address.street); <span class="comment">//得到111 Main St.</span></span><br><span class="line"><span class="built_in">console</span>.log(person.address.city);<span class="comment">//得到London</span></span><br></pre></td></tr></table></figure><ol><li>我們設置一個物件person，並且新增兩個屬性firstname,lastname</li><li>把firstname指派給變數，一樣可以使用變數取得新增的內容</li><li>使用(.)可以更方便的新增屬性以及取得物件內容</li><li>使用 [ ] , (.) 這兩個運算子都能取得物件內容以及新增屬性</li></ol><p><img src="https://i.imgur.com/tLJUO9h.png"></p><p>[ ]  運算子</p><ul><li>需要使用字串型態</li><li>可使用變數指派的方式使用</li></ul><p>(.) 運算子</p><ul><li>編譯器可以直接閱讀不需要使用字串型態</li><li>不可使用變數指派方式使用</li><li>更簡潔易讀</li></ul><p><img src="https://i.imgur.com/QFtKBuI.png"></p><h1 id="物件、物件實字-Objects-And-Object-Literals"><a href="#物件、物件實字-Objects-And-Object-Literals" class="headerlink" title="物件、物件實字(Objects And Object Literals)"></a>物件、物件實字(Objects And Object Literals)</h1><ul><li>為了創造物件我們可以使用{ } 是 <code>new Object();</code>的縮寫</li><li>{} 不是運算子</li><li>JS引擎會判斷使用{ } 就是正在創造物件</li><li>只要用{ } 來建立物件的語法，就稱為物件實字 (Object Literals)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Tony = &#123;<span class="attr">firstname</span>:<span class="string">&#x27;Tony&#x27;</span>,<span class="attr">lastname</span>:<span class="string">&#x27;Alicea&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Tony);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Tony = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.firstname = <span class="string">&quot;Tony&quot;</span>;</span><br><span class="line">person.lastname = <span class="string">&quot;Alicea&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Tony);</span><br></pre></td></tr></table></figure><p>會印出一樣的結果<br><img src="https://i.imgur.com/aUcJqIY.png"></p><p><strong>物件創建在物件之內</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Tony = &#123;</span><br><span class="line">    firstname:<span class="string">&quot;Tony&quot;</span></span><br><span class="line">    address:&#123;</span><br><span class="line">        street:<span class="string">&#x27;111 Main St.&#x27;</span>,</span><br><span class="line">        city:<span class="string">&#x27;New York&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>創建在函式內部</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">person</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;HI&#x27;</span> + person)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">greet(&#123;</span><br><span class="line">firstname:<span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">lastname:<span class="string">&#x27;Doe&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>使用在增添屬性上面</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tony.company = &#123;</span><br><span class="line">    street: <span class="string">&#x27;333 Second St.&#x27;</span>,</span><br><span class="line">    companyName: <span class="string">&#x27;Sucess&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="框架小叮嚀-Framework-Aside"><a href="#框架小叮嚀-Framework-Aside" class="headerlink" title="框架小叮嚀(Framework Aside)"></a>框架小叮嚀(Framework Aside)</h1><ul><li>JS是沒有namespace，因為{ }的關係不需要</li><li>可以使用{ } 創造出物件來假扮命名空間</li><li>在框架或是函式庫的原始碼中很常看到這樣的使用方式</li></ul><h2 id="Faking-Namespaces"><a href="#Faking-Namespaces" class="headerlink" title="Faking Namespaces"></a>Faking Namespaces</h2><h3 id="命名空間-Namespace"><a href="#命名空間-Namespace" class="headerlink" title="命名空間(Namespace)"></a>命名空間(Namespace)</h3><p>專門給變數以及函式使用的空間，讓同樣名字的變數或是函式可以做區隔</p><h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h3><p>兩個變數名稱一樣時上方的變數會被複寫，因此印出Hola!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hola!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greet); <span class="comment">// Renders Hola!</span></span><br></pre></td></tr></table></figure><p>為了避免上面的複寫情況發生，我們可以使用Faking Namespaces，創造一個物件來包裹住這些變數，這樣就能避免變數或是函式之間名字相同的衝突或是複寫的狀況發生摟!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hola!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> english = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> spanish = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">english.greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line">spanish.greet = <span class="string">&#x27;Hola!&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h3><p>命名空稱使用的{ }物件可以做很多層:</p><p>把greet包裹在greeting裡面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> english = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">english.greeting = &#123;&#125;;</span><br><span class="line">english.greeting.greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(english);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/xHDptD5.png"></p><p>也可以使用物件實字:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> english = &#123;</span><br><span class="line">    greeting:&#123;</span><br><span class="line">        greet:<span class="string">&quot;Hello!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(english);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/MNGbIRI.png"></p><h1 id="JSON以及物件實字-JSON-And-Object-Literals"><a href="#JSON以及物件實字-JSON-And-Object-Literals" class="headerlink" title="JSON以及物件實字(JSON And Object Literals)"></a>JSON以及物件實字(JSON And Object Literals)</h1><ul><li>JSON (JavaScript Object Notation)</li><li>跟物件的型態非常相似</li><li>有數個方法可以使用來轉換JSON</li></ul><p>一般物件型態:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objectLiteral = &#123;</span><br><span class="line">    firstname: <span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">    isAProgrammer: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>JSON型態:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;firstname&quot;</span>: <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;isAProgrammer&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>轉換物件成JSON格式可以使用<code>JSON.stringify()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(objectLiteral);</span><br></pre></td></tr></table></figure><p>轉換JSON為物件給JS使用<code>JSON.parse()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonValue = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123; &quot;firstname&quot;: &quot;Mary&quot;, &quot;isAProgrammer&quot;: true &#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="函式就是物件-Function-Are-Objects"><a href="#函式就是物件-Function-Are-Objects" class="headerlink" title="函式就是物件(Function Are Objects)"></a>函式就是物件(Function Are Objects)</h1><h2 id="First-Class-Functions"><a href="#First-Class-Functions" class="headerlink" title="First Class Functions"></a>First Class Functions</h2><ul><li>你可以對函式做對於其他類型(字串、數字、物件、布林值等)都可以做的事情</li><li>可以指派函式為變數</li><li>可以把函式當成參數給其他函式使用</li><li>可以在literal syntax中使用函式</li></ul><p><img src="https://i.imgur.com/Uc94cSq.png"></p><p>函式是一種特殊的物件，但正因為它是物件所以他可以使用純值、物件、函式</p><p>以及兩種特殊的屬性 </p><ol><li>name(非必須，有匿名函式)</li><li>code也就是使用者撰寫的程式碼並且它是可以被呼叫的”Invocable”()</li></ol><h2 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h2><p>能成功地給函式加上屬性代表函式真的是一種物件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet.language = <span class="string">&#x27;English&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greet.language);</span><br></pre></td></tr></table></figure><ol><li>設置一個函式greet，內容為印出hi</li><li>給函式加上屬性</li><li>印出greet.language</li></ol><p>得出結果 正是加上去的屬性<br><img src="https://i.imgur.com/31dfkx9.png"></p><h2 id="“Invocable”"><a href="#“Invocable”" class="headerlink" title="“Invocable”()"></a>“Invocable”()</h2><p><img src="https://i.imgur.com/eyOntey.png"></p><ul><li>當創造這個greet 函式時，它會被放到記憶體裡(以目前的例子會放到全域物件裡)</li><li>函式會有個名字屬性 greet</li><li>函式會有code屬性也就是 <code>console.log(&quot;h1&quot;);</code></li><li>然而當呼叫greet()這邊使用括弧來呼叫函式</li></ul><h2 id="作者非常強調"><a href="#作者非常強調" class="headerlink" title="作者非常強調"></a>作者非常強調</h2><blockquote><p>JS的函式就是物件</p></blockquote><h1 id="函式陳述式、函式表達式-Function-Statements-And-Function-Expressions"><a href="#函式陳述式、函式表達式-Function-Statements-And-Function-Expressions" class="headerlink" title="函式陳述式、函式表達式(Function Statements And Function Expressions)"></a>函式陳述式、函式表達式(Function Statements And Function Expressions)</h1><h2 id="表達式-Expression"><a href="#表達式-Expression" class="headerlink" title="表達式(Expression)"></a>表達式(Expression)</h2><ul><li>它不必須存在變數之中</li><li>一段會創造值(value)的程式碼</li></ul><h3 id="表達式範例"><a href="#表達式範例" class="headerlink" title="表達式範例"></a>表達式範例</h3><ul><li>(=),(+)運算子都會回傳結果，因此他們兩個都是表達式</li></ul><p><code>var a;</code></p><p><img src="https://i.imgur.com/QWDWw1J.png"></p><ul><li>只要有回傳值就是表達式(下方回傳物件)</li></ul><p><img src="https://i.imgur.com/Nwn6KsN.png"></p><h2 id="陳述式-statement"><a href="#陳述式-statement" class="headerlink" title="陳述式(statement)"></a>陳述式(statement)</h2><p>判斷式if 就是個很好的例子</p><ul><li>不會返回值</li><li>無法把if判斷式指派給變數</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a ===<span class="number">3</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函式陳述式範例"><a href="#函式陳述式範例" class="headerlink" title="函式陳述式範例"></a>函式陳述式範例</h2><ul><li>一開始就會被寫進記憶體中</li><li>具有Hoisting特性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這段函式它不會回傳值因為它沒有被呼叫，所以它就是個函式陳述式，只代表它被放置於記憶體中，也就代表著<strong>Hositing</strong></p><p>因此我們可以這樣使用:</p><ol><li>先呼叫函式</li><li>撰寫函式本體</li><li>依舊可以印出結果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">greet();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函式表達式範例"><a href="#函式表達式範例" class="headerlink" title="函式表達式範例"></a>函式表達式範例</h2><ul><li><p>一開始不會被寫進記憶體</p></li><li><p>執行時建立這個函數物件使用指向該函數記憶體的變數進行呼叫(也就是指派給變數做呼叫)</p></li><li><p>匿名函式的部分就是函式表達式</p><p><img src="https://i.imgur.com/T0hnU0W.png"></p></li></ul><p>注意: 這邊可以發現匿名函式的部分就是函式表達式，因為它會產生值</p><ol><li>創造匿名函式</li><li>把函式指派給變數 anonymousGreet</li><li>使用”()”  anonymousGreet()</li><li>就可以呼叫此匿名函式瞜</li></ol><p>#關於匿名函式的部分，其實可以命名，但是基於程式碼簡潔的關係以及其實函式位置已經綁訂於變數所以命名這部分是比較多餘的</p><h2 id="函式表達式無法做Hoisting"><a href="#函式表達式無法做Hoisting" class="headerlink" title="函式表達式無法做Hoisting"></a>函式表達式無法做Hoisting</h2><ul><li>因為變數的預設值為undefined</li><li>要到變數被執行了才會知道它的值，所以只會先顯示undefined那當然不是個函式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">anonymousGreet();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anonymousGreet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1 &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/OtTr7EZ.png"></p><h2 id="把函式作為參數丟進另一個函式"><a href="#把函式作為參數丟進另一個函式" class="headerlink" title="把函式作為參數丟進另一個函式"></a>把函式作為參數丟進另一個函式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>把函式做完參數傳送</li><li>這樣的寫法其實就是下方範例，也就是<a href="#First-Class-Functions">First Class Functions</a>的概念</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br></pre></td></tr></table></figure><h1 id="Conceptual-Aside"><a href="#Conceptual-Aside" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="By-Value-vs-By-reference"><a href="#By-Value-vs-By-reference" class="headerlink" title="By Value vs By reference"></a>By Value vs By reference</h2><ul><li>這邊主要談論的都是指變數</li><li>reference 像是記憶體中的地址</li><li>value 代表變數的值</li></ul><h3 id="By-Value"><a href="#By-Value" class="headerlink" title="By Value"></a>By Value</h3><blockquote><p>讓兩個變數有相同的value藉由複製value的方式但是有兩個不同的reference</p></blockquote><ul><li>所有純值都是傳值(By value)</li></ul><ol><li>設置 a = 純值(數字、字串)</li><li>這時候純值會有個reference就像是它的地址讓變數a可以找到它</li><li>讓 新的變數b b = a </li><li>這時候b就會複製純值的value到不一樣的地址b</li></ol><p><img src="https://i.imgur.com/pPMboQa.png"></p><h3 id="By-Value-範例"><a href="#By-Value-範例" class="headerlink" title="By Value 範例"></a>By Value 範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by value(primitives)</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"></span><br><span class="line">b = a;</span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/piUJv9Y.png"></p><p>因為by value只會複製值不會複製reference所以，b還是保持在新的地址，a的變化跟b無關</p><h3 id="Mutate"><a href="#Mutate" class="headerlink" title="Mutate"></a>Mutate</h3><p>改變某樣東西</p><ul><li>Immutable 代表無法被改變</li></ul><h3 id="By-reference"><a href="#By-reference" class="headerlink" title="By reference"></a>By reference</h3><blockquote><p>讓兩個物件有相同的物件藉由給予同樣的reference並不是複製同樣的內容</p></blockquote><ul><li>所有的物件都是傳址(by reference)</li><li>不管是處理把他們(物件)設置相等或是傳入函式</li></ul><ol><li>設置 a = 純值(數字、字串)</li><li>這時候純值會有個reference就像是它的地址讓變數a可以找到它</li><li>讓 新的變數b b = a </li><li>這時候b會藉由原本 a 的reference找到其value</li></ol><p><img src="https://i.imgur.com/JMYnTYu.png"></p><h3 id="By-reference-範例"><a href="#By-reference-範例" class="headerlink" title="By reference 範例"></a>By reference 範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// by reference(all objects(including function))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    greeting: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> d;</span><br><span class="line"></span><br><span class="line">d = c;</span><br><span class="line">c.greeting = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/1ixoIdP.png"></p><p>因為By reference 傳遞的是地址，所以兩個物件c d 基本上是在一樣的地址一樣的內容，修改其一另一個一樣也被修改</p><h3 id="By-reference-even-as-parameters-範例"><a href="#By-reference-even-as-parameters-範例" class="headerlink" title="By reference(even as parameters) 範例"></a>By reference(even as parameters) 範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeGreeting</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    obj.greeting = <span class="string">&#x27;Hola&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeGreeting(d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/VjO4C4H.png"></p><p>把物件使用參數做傳遞，一樣是傳址，因此兩個傳遞對象是一樣的地址，修改一個其他都會修改</p><h3 id="By-reference-使用-指派-範例-特例"><a href="#By-reference-使用-指派-範例-特例" class="headerlink" title="By reference 使用(=)指派 範例(特例)"></a>By reference 使用(=)指派 範例(特例)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = &#123;</span><br><span class="line">    greeting: <span class="string">&#x27;Howdy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/2Mbfcfb.png"></p><ul><li>這邊可以看到不是說reference是傳址，所以兩方物件應該會一樣?</li><li>但是(=)運算子可以設定新的記憶體地址給c因此c,d印出來的結果不同了</li></ul><h1 id="物件、函式以及’this’-Objects-Functions-And-‘this’"><a href="#物件、函式以及’this’-Objects-Functions-And-‘this’" class="headerlink" title="物件、函式以及’this’(Objects, Functions, And ‘this’)"></a>物件、函式以及’this’(Objects, Functions, And ‘this’)</h1><p><img src="https://i.imgur.com/RIdUSQV.png"></p><ul><li>函式就是物件: 其中有兩個特殊屬性 code, name</li><li>當函式被呼叫時(也就是code的部分)，會創造出執行背景(Execution Context)，接著會被擺入執行堆(Execution stack)，這會決定這個函式會如何被執行</li><li>當執行背景被創造出來時，內部都會有variable Environment也就是變數被創造在函式內部</li><li>也會有Outer Environment也就是當在函式內部找不到變數使用時，會往外部尋找參考一直找到全域變數為止(再來也沒了)</li><li>但我們也知道每天JS引擎創造執行背景時都會創造’this’這個變數，甚至我們不需要輸入任何內容</li><li>而這個this會指向(代表)不同的物件取決於這個函式是如何被呼叫</li></ul><h2 id="‘this’的指向"><a href="#‘this’的指向" class="headerlink" title="‘this’的指向"></a>‘this’的指向</h2><h3 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.newvariable = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(newvariable);</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>這邊設置了三種情況</p><ol><li>一定有的golbal object</li><li>函式陳述式</li><li>函式表達式</li></ol><p>結果印出來:</p><p>全部都指向window這個global object<br>並且可以直接給global object加上屬性都沒問題</p><p><img src="https://i.imgur.com/DlKoeZ0.png"></p><ul><li>當值是純值的時候被稱為property</li><li>當值是函式的時候被稱為method</li></ul><h3 id="範例二-例外"><a href="#範例二-例外" class="headerlink" title="範例二(例外)"></a>範例二(例外)</h3><p>這邊把this使用在物件內部的函式也就是methods</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/q1ClvKP.png"></p><p>竟然是指向了object</p><p>並且可以這樣使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;I can change name&quot;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/rBANwZ9.png"></p><p>竟然可以通過this的指向來操作物件的內容key的部分</p><h3 id="範例三-類似bug"><a href="#範例三-類似bug" class="headerlink" title="範例三(類似bug)"></a>範例三(類似bug)</h3><p>於是我們找到一個類似於JS引擎比較類似缺點的地方:</p><p>透過函式表達式的方式使用變數傳遞函式在物件內部的methods內，並且使用this再次改寫一次name屬性，這邊理論上應該會使”I can change name”修改成’change name again’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;I can change name&quot;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> setname = <span class="function"><span class="keyword">function</span> (<span class="params">newname</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = newname;</span><br><span class="line">        &#125;</span><br><span class="line">        setname(<span class="string">&#x27;change name again&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>沒有任何變化<br>剛剛以為透過物件內部的methods內部的this會指向物件本身，但是這邊的this卻指向別的地方</p><p><img src="https://i.imgur.com/p3yMbyc.png"></p><p>打開window全域物件查看發現，這邊的this竟然指向的位置是全域物件window<br><img src="https://i.imgur.com/S0rUjDo.png"></p><h3 id="範例四-範例三的解答"><a href="#範例四-範例三的解答" class="headerlink" title="範例四(範例三的解答)"></a>範例四(範例三的解答)</h3><p>如何避免這樣的情況發生呢?</p><p>把this的位置好好綁訂好並且把每個地方的this都使用變數確認是使用同一個this指向同一個地方就可以解決這個問題摟!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">        self.name = <span class="string">&quot;I can change name&quot;</span></span><br><span class="line">        <span class="built_in">console</span>.log(self);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> setname = <span class="function"><span class="keyword">function</span> (<span class="params">newname</span>) </span>&#123;</span><br><span class="line">            self.name = newname;</span><br><span class="line">        &#125;</span><br><span class="line">        setname(<span class="string">&#x27;change name again&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(self);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>這次的this就正常的指向物件本身因此可以修改name屬性搂!</p><p><img src="https://i.imgur.com/Xq4GGwA.png"></p><h1 id="Conceptual-Aside-1"><a href="#Conceptual-Aside-1" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="Arrays-Collection-of-Anything"><a href="#Arrays-Collection-of-Anything" class="headerlink" title="Arrays Collection of Anything"></a>Arrays Collection of Anything</h2><p>創造一個array<br><code>var arr = new Array();</code></p><p>使用array literal syntax<br><code>var arr = [];</code></p><p>JS的array是以0為基底的:</p><p><code>console.log(arr[0])</code></p><p>可以印出array第一個元素</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;The-Weird-Part-Of-Javascript-part-2&quot;&gt;&lt;a href=&quot;#The-Weird-Part-Of-Javascript-part-2&quot; class=&quot;headerlink&quot; title=&quot;The Weird Part Of Java</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-語言基礎 06 陣列介紹</title>
    <link href="http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2006%20%E9%99%A3%E5%88%97%E4%BB%8B%E7%B4%B9/"/>
    <id>http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2006%20%E9%99%A3%E5%88%97%E4%BB%8B%E7%B4%B9/</id>
    <published>2021-03-20T16:39:04.079Z</published>
    <updated>2021-03-21T18:22:42.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-語言基礎-06-陣列介紹"><a href="#JS-語言基礎-06-陣列介紹" class="headerlink" title="JS 語言基礎 06 陣列介紹"></a>JS 語言基礎 06 陣列介紹</h2><p>陣列是一種資料結構(Array)</p><ul><li>物件是鍵值對(key-value pairs)</li><li>陣列是依照索引排序(index)的資料結構</li><li>不推薦陣列的內容字串跟數字混用不然會比較不好操作</li></ul><p>通常長這樣:<br><img src="https://i.imgur.com/s76qbA0.png"></p><p>索引的部分(index):</p><p>0,1,2的部分</p><p><img src="https://i.imgur.com/RCsgGVv.png"></p><p>擷取其值[]:</p><p><img src="https://i.imgur.com/2AJBh4f.png"></p><p>取陣列的長度大小 length:</p><p><img src="https://i.imgur.com/OTqScAn.png"></p><h3 id="陣列基本操作-pop-與-push"><a href="#陣列基本操作-pop-與-push" class="headerlink" title="陣列基本操作 pop 與 push"></a>陣列基本操作 pop 與 push</h3><p>pop 把最後一個元素去掉</p><p><img src="https://i.imgur.com/mK8tWm5.png"></p><p>push 把一個值加到最後</p><p><img src="https://i.imgur.com/ik9vRMy.png"></p><h3 id="陣列基本操作-替換元素-與-取得最後一個元素"><a href="#陣列基本操作-替換元素-與-取得最後一個元素" class="headerlink" title="陣列基本操作 替換元素 與 取得最後一個元素"></a>陣列基本操作 替換元素 與 取得最後一個元素</h3><p>替換元素:</p><p>帶入index後直接輸入要替換的值</p><p><img src="https://i.imgur.com/M6EV9jy.png"></p><p>取得最後一個元素的值:</p><p>使用length取得陣列長度後減一就是最後一個值的index搂</p><p><img src="https://i.imgur.com/8SDCdzk.png"></p><h3 id="陣列操作-indexOf-取得元素的索引"><a href="#陣列操作-indexOf-取得元素的索引" class="headerlink" title="陣列操作 indexOf 取得元素的索引"></a>陣列操作 indexOf 取得元素的索引</h3><p>很直接使用(.indexOf)</p><p><img src="https://i.imgur.com/axNFBsm.png"></p><h3 id="陣列的基本操作-切片slice-與-方法這麼多到底要怎麼記"><a href="#陣列的基本操作-切片slice-與-方法這麼多到底要怎麼記" class="headerlink" title="陣列的基本操作 切片slice 與 方法這麼多到底要怎麼記"></a>陣列的基本操作 切片slice 與 方法這麼多到底要怎麼記</h3><p>切片slice</p><p><code>陣列.slice(起始點,終點)</code></p><p>切出來的值會包含起始點不包含終點</p><p><img src="https://i.imgur.com/4AlzU5O.png"></p><p><img src="https://i.imgur.com/2xclorT.png"></p><p>方法不死背 多巡查詢使用</p><h2 id="JS-語言基礎-06-陣列的進階方法"><a href="#JS-語言基礎-06-陣列的進階方法" class="headerlink" title="JS 語言基礎 06 陣列的進階方法"></a>JS 語言基礎 06 陣列的進階方法</h2><h3 id="6-1-用-map-方法來把陣列中的資料，改成你想要的樣子"><a href="#6-1-用-map-方法來把陣列中的資料，改成你想要的樣子" class="headerlink" title="6.1 用 map() 方法來把陣列中的資料，改成你想要的樣子"></a>6.1 用 map() 方法來把陣列中的資料，改成你想要的樣子</h3><p><code>Array.prototype.map()</code></p><p>這邊的意思是每個陣列都會有這方map()方法<br>他可以針對陣列中的內容做操作並且產生一個新的陣列</p><ul><li>做數字運算</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</span><br><span class="line"><span class="keyword">const</span> result2 = a1.map(<span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * a</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result2); <span class="comment">//</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/7K17cLP.png"></p><ul><li>做字串串接</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dogs = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> result = dogs.map(<span class="function">(<span class="params">dog</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> dog + <span class="string">&quot;dog is fury&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/rGJrID4.png"></p><h3 id="6-2-如何使用-for-迴圈實作-map"><a href="#6-2-如何使用-for-迴圈實作-map" class="headerlink" title="6.2 如何使用 for 迴圈實作 map()"></a>6.2 如何使用 for 迴圈實作 map()</h3><p>比較複雜一些需要用到比較多邏輯的部分不像map簡潔，但可以得到一樣的結果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dogs = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDemo</span>(<span class="params">dogs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dogs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = dogs[i] + <span class="string">&quot;dog is fury&quot;</span>;</span><br><span class="line">        result.push(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>並且作呼叫印出的結果會跟使用map一樣<br><img src="https://i.imgur.com/4Rhsfzg.png"></p><h3 id="6-3-用-forEach-讓陣列中的元素一個一個出來面對"><a href="#6-3-用-forEach-讓陣列中的元素一個一個出來面對" class="headerlink" title="6.3 用 forEach() 讓陣列中的元素一個一個出來面對"></a>6.3 用 forEach() 讓陣列中的元素一個一個出來面對</h3><p>逐個印出值並且無法做出return</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> forEachResult = a1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(el);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/G9oDqoS.png"></p><h4 id="跟map做比較"><a href="#跟map做比較" class="headerlink" title="跟map做比較"></a>跟map做比較</h4><p>map會返回值可以做return<br>forEach不會返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> forEachResult = a1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> el + <span class="string">&quot;is good&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mapResult = a1.map(<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> el + <span class="string">&quot;is good&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/nTE6jns.png"></p><h4 id="用for來寫forEach"><a href="#用for來寫forEach" class="headerlink" title="用for來寫forEach"></a>用for來寫forEach</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a1.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a1[i] + <span class="string">&quot;is good&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一樣可以印出結果<br><img src="https://i.imgur.com/ufvZ70H.png"></p><h3 id="6-4-使用-filter-找出陣列中符合條件的元素-element"><a href="#6-4-使用-filter-找出陣列中符合條件的元素-element" class="headerlink" title="6.4 使用 filter() 找出陣列中符合條件的元素(element)"></a>6.4 使用 filter() 找出陣列中符合條件的元素(element)</h3><p>使用條件做篩選並把選中的內容放進新的陣列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">as</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">newa = <span class="keyword">as</span>.filter(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/wVu73h2.png"></p><h4 id="用物件做操作"><a href="#用物件做操作" class="headerlink" title="用物件做操作"></a>用物件做操作</h4><p>篩選出大於25歲小於123歲的物件排進新的陣列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bs = [&#123;</span><br><span class="line">        name: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">        age: <span class="number">36</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;hoe&#x27;</span>,</span><br><span class="line">        age: <span class="number">123</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;dif&#x27;</span>,</span><br><span class="line">        age: <span class="number">43</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;aer&#x27;</span>,</span><br><span class="line">        age: <span class="number">25</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">newa = bs.filter(<span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b.age &gt; <span class="number">25</span> &amp;&amp; b.age &lt; <span class="number">123</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/3UNrsks.png"></p><h3 id="6-5-Array-陣列的-find-方法，找到第一筆符合條件的資料"><a href="#6-5-Array-陣列的-find-方法，找到第一筆符合條件的資料" class="headerlink" title="6.5 Array 陣列的 find() 方法，找到第一筆符合條件的資料"></a>6.5 Array 陣列的 find() 方法，找到第一筆符合條件的資料</h3><ul><li>Array 陣列的find()方法，找到第一筆符合條件的資料只印出一個找到的值</li><li>filter()方法則是過濾符合的條件(每一筆)並組成新陣列</li></ul><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">55</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">2345</span>, <span class="number">55</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> find = a1.find(<span class="function">(<span class="params">found</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> found === <span class="number">12</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(find);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/y9gnABv.png"></p><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">55</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">2345</span>, <span class="number">55</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> find = a1.filter(<span class="function">(<span class="params">found</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> found === <span class="number">12</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(find);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/uxgc2CL.png"></p><h3 id="6-6-為什麼查詢-Array-的方法時，需要找的是-Array-prototype-的方法"><a href="#6-6-為什麼查詢-Array-的方法時，需要找的是-Array-prototype-的方法" class="headerlink" title="6.6 為什麼查詢 Array 的方法時，需要找的是 Array.prototype 的方法"></a>6.6 為什麼查詢 Array 的方法時，需要找的是 Array.prototype 的方法</h3><p>由下圖可以理解，在prototype後面加入的屬性是可以真的使用的</p><p><img src="https://i.imgur.com/ukGal9q.png"></p><h3 id="6-7-用-reduce-加總陣列結果"><a href="#6-7-用-reduce-加總陣列結果" class="headerlink" title="6.7 用 reduce() 加總陣列結果"></a>6.7 用 reduce() 加總陣列結果</h3><p>可以使用forEach達到一樣的效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">num.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result += n</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = num.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">result, current</span>) </span>&#123;</span><br><span class="line">    result += current;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/NVlaXr3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-語言基礎-06-陣列介紹&quot;&gt;&lt;a href=&quot;#JS-語言基礎-06-陣列介紹&quot; class=&quot;headerlink&quot; title=&quot;JS 語言基礎 06 陣列介紹&quot;&gt;&lt;/a&gt;JS 語言基礎 06 陣列介紹&lt;/h2&gt;&lt;p&gt;陣列是一種資料結構(Array)&lt;/</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-語言基礎 07 瀏覽器中的JS</title>
    <link href="http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2007%20%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B8%AD%E7%9A%84JS/"/>
    <id>http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2007%20%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B8%AD%E7%9A%84JS/</id>
    <published>2021-03-20T16:39:04.079Z</published>
    <updated>2021-03-21T18:22:46.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-語言基礎-07-瀏覽器中的JS"><a href="#JS-語言基礎-07-瀏覽器中的JS" class="headerlink" title="JS 語言基礎 07 瀏覽器中的JS"></a>JS 語言基礎 07 瀏覽器中的JS</h2><h3 id="DOM-與樹狀結構"><a href="#DOM-與樹狀結構" class="headerlink" title="DOM 與樹狀結構"></a>DOM 與樹狀結構</h3><p>甚麼是DOM</p><ul><li>Document Object Model 文件物件模型</li><li>HTML的格式須遵守W3C的規範</li><li>而遵守W3C的HTML檔案可以被解成城DOM樹(Tree)</li></ul><p>解釋DOM樹(Tree)<br><img src="https://i.imgur.com/UTb1iPm.png"></p><p>文件物件模型的意義:<br><img src="https://i.imgur.com/9QAkMzK.png"></p><h3 id="在瀏覽器觀察-DOM-Tree-與-document-物件"><a href="#在瀏覽器觀察-DOM-Tree-與-document-物件" class="headerlink" title="在瀏覽器觀察 DOM Tree 與 document 物件"></a>在瀏覽器觀察 DOM Tree 與 document 物件</h3><p>在開發者瀏覽器打上document後:</p><p>會顯現出上方文件物件模型的意義</p><p><img src="https://i.imgur.com/9QAkMzK.png"></p><p><img src="https://i.imgur.com/99I45nJ.png"></p><h3 id="什麼是-API"><a href="#什麼是-API" class="headerlink" title="什麼是 API"></a>什麼是 API</h3><ul><li>Application Programming Interface</li><li>應用程式 編程 介面</li><li>透過寫程式來跟網頁上的功能(像是email google MAP搜尋等等)溝通</li></ul><h3 id="瀏覽-document-物件-API-文件"><a href="#瀏覽-document-物件-API-文件" class="headerlink" title="瀏覽 document 物件 API 文件"></a>瀏覽 document 物件 API 文件</h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/document">document Web API</a></p><p><a href="https://www.w3schools.com/js/js_api_intro.asp">W3Cschool Web API</a></p><h3 id="BOM-與-window-物件"><a href="#BOM-與-window-物件" class="headerlink" title="BOM 與 window 物件"></a>BOM 與 window 物件</h3><ul><li>Browser Object Model 瀏覽器物件模型</li><li>就是 window 物件 就是整個瀏覽器所以其實不用打出來也可以有效果</li></ul><p><img src="https://i.imgur.com/6dViT6V.png"></p><p><img src="https://i.imgur.com/i6LTlLd.png"></p><h4 id="Location"><a href="#Location" class="headerlink" title="Location:"></a>Location:</h4><p><img src="https://i.imgur.com/3rsiA8V.png"></p><h4 id="History-back-go"><a href="#History-back-go" class="headerlink" title="History back() , go()"></a>History back() , go()</h4><p>back()</p><p>可以直接回到上一頁</p><p>go()必須加數字在參數的地方</p><p>可以去下一頁</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-語言基礎-07-瀏覽器中的JS&quot;&gt;&lt;a href=&quot;#JS-語言基礎-07-瀏覽器中的JS&quot; class=&quot;headerlink&quot; title=&quot;JS 語言基礎 07 瀏覽器中的JS&quot;&gt;&lt;/a&gt;JS 語言基礎 07 瀏覽器中的JS&lt;/h2&gt;&lt;h3 id=&quot;D</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-語言基礎 08 ES6</title>
    <link href="http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2008%20ES6/"/>
    <id>http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2008%20ES6/</id>
    <published>2021-03-20T16:39:04.079Z</published>
    <updated>2021-03-21T18:22:50.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-語言基礎-08-ES6"><a href="#JS-語言基礎-08-ES6" class="headerlink" title="JS 語言基礎 08 ES6"></a>JS 語言基礎 08 ES6</h2><h3 id="01-let-與-const-作用域改變成大括號會怎麼樣"><a href="#01-let-與-const-作用域改變成大括號會怎麼樣" class="headerlink" title="01 let 與 const 作用域改變成大括號會怎麼樣"></a>01 let 與 const 作用域改變成大括號會怎麼樣</h3><p>let與const 對比舊時代的var</p><p>1.作用域的改變</p><ul><li>var=&gt; function</li><li>let,const =&gt;{}</li></ul><h4 id="Example1"><a href="#Example1" class="headerlink" title="Example1:"></a>Example1:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`迴圈跑第<span class="subst">$&#123;i&#125;</span>次`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><p>很明顯的地方是外面的var i = 0被裡面的迴圈汙染到所以傳回來的結果是10<br><img src="https://i.imgur.com/wexESY7.png"></p><p>所以改成let做操作時因為其作用域是{}因此沒有汙染到外面來</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`迴圈跑第<span class="subst">$&#123;i&#125;</span>次`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/za2DaSb.png"></p><h4 id="Example2"><a href="#Example2" class="headerlink" title="Example2:"></a>Example2:</h4><p>用在判斷式上面更明顯使用var來操作的話這邊的結果是會直接跑進判斷式中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><p>印出結果為5<br><img src="https://i.imgur.com/ocAUxF2.png"></p><p>全面改成使用let</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><p>印出結果就沒有被汙染瞜</p><p><img src="https://i.imgur.com/BCKG9mX.png"></p><h4 id="Example3"><a href="#Example3" class="headerlink" title="Example3:"></a>Example3:</h4><p>使用大括號的效果跟IFEE一樣</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IIFE立即函式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="keyword">let</span> x =<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="支援度"><a href="#支援度" class="headerlink" title="支援度"></a>支援度</h4><ul><li>chrome已經全面支援使用</li><li>但是IE部分還沒，所以舊的寫法還是需要了解</li><li>使用babel 做編譯 ES6 =&gt;ES5</li></ul><h3 id="02-const-常數與注意事項"><a href="#02-const-常數與注意事項" class="headerlink" title="02 const 常數與注意事項"></a>02 const 常數與注意事項</h3><p>const 定義了之後不可以改變的變數</p><p><img src="https://i.imgur.com/V3Z9eDz.png"></p><h4 id="重要例外"><a href="#重要例外" class="headerlink" title="重要例外"></a>重要例外</h4><p>當常數定義物件的時候裡面的值是可以改變的並不會報錯</p><p><img src="https://i.imgur.com/PkrU1Ti.png"></p><p>但是如果你在複寫一次物件就會出問題摟!<br><img src="https://i.imgur.com/B4TwpLl.png"></p><h3 id="03-解構賦值陣列與物件為什麼可以這樣寫"><a href="#03-解構賦值陣列與物件為什麼可以這樣寫" class="headerlink" title="03 解構賦值陣列與物件為什麼可以這樣寫"></a>03 解構賦值陣列與物件為什麼可以這樣寫</h3><h4 id="陣列的解構賦值"><a href="#陣列的解構賦值" class="headerlink" title="陣列的解構賦值"></a>陣列的解構賦值</h4><p><img src="https://i.imgur.com/gKme5TF.png"></p><p>解構賦值的其中一種用法:讓賦值變簡潔<br><img src="https://i.imgur.com/FdPG2N1.png"></p><h4 id="物件的的解構賦值"><a href="#物件的的解構賦值" class="headerlink" title="物件的的解構賦值"></a>物件的的解構賦值</h4><p>前面let的部分其實是縮寫</p><p><code>let&#123;a:a,b:a&#125;</code>是原本的樣子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a,b&#125; = &#123;<span class="attr">a</span>: <span class="number">111</span>,<span class="attr">b</span>: <span class="number">222</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a:&quot;</span> + a, <span class="string">&quot;b:&quot;</span> + b);</span><br></pre></td></tr></table></figure><h3 id="04-for-in-for-of-的區別"><a href="#04-for-in-for-of-的區別" class="headerlink" title="04 for in, for of 的區別"></a>04 for in, for of 的區別</h3><h4 id="for-of-用來迭代可以迭代的物件"><a href="#for-of-用來迭代可以迭代的物件" class="headerlink" title="for of 用來迭代可以迭代的物件"></a>for of 用來迭代可以迭代的物件</h4><blockquote><p>可以迭代的對象包含:<br>Array，Map，Set，String，TypedArray，arguments</p></blockquote><p><img src="https://i.imgur.com/A1qG3Jv.png"></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of">for of -MDN</a></p><h4 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h4><blockquote><p>迭代可以列舉的屬性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_props</span>(<span class="params">obj, objName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        result += objName + <span class="string">&quot;.&quot;</span> + prop + <span class="string">&quot; = &quot;</span> + obj[prop] + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前方的參數是要引入的object 後方是物件的名字</span></span><br><span class="line">alert(show_props(object, <span class="string">&quot;物件&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/2jQmrqW.png"></p><h3 id="05-Iterator-迭代器是什麼-如何使用"><a href="#05-Iterator-迭代器是什麼-如何使用" class="headerlink" title="05 Iterator 迭代器是什麼? 如何使用"></a>05 Iterator 迭代器是什麼? 如何使用</h3><h4 id="可迭代協議（iterable-protocol）"><a href="#可迭代協議（iterable-protocol）" class="headerlink" title="可迭代協議（iterable protocol）"></a>可迭代協議（iterable protocol）</h4><p>一個物件如果要被迭代他必須有這個屬性<code>[Symbol.iterator]</code></p><p>而當這個物件需要被迭代的時候這個屬性的不需要引入參數的函式(下方圖片)就會被呼叫來獲得被迭代的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myStings = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line">myStings[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myStings[<span class="built_in">Symbol</span>.iterator]());</span><br></pre></td></tr></table></figure><p>String Iterator<br><img src="https://i.imgur.com/Ofzt0LW.png"></p><h4 id="迭代器協議（iterator-protocol）"><a href="#迭代器協議（iterator-protocol）" class="headerlink" title="迭代器協議（iterator protocol）"></a>迭代器協議（iterator protocol）</h4><p>迭代器協議定義了一個標準的方式來產生迭代的有限或是無限的值並且都會回傳一個值，而next()就是一個迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myStings = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = myStings[<span class="built_in">Symbol</span>.iterator]();</span><br></pre></td></tr></table></figure><p>之後在chrome呼叫方法next()就可以迭代出字串摟</p><p><img src="https://i.imgur.com/7gelfsm.png"></p><h4 id="迭代array"><a href="#迭代array" class="headerlink" title="迭代array"></a>迭代array</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrayIterator = myArray[<span class="built_in">Symbol</span>.iterator]();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/x24qipJ.png"></p><h3 id="06-for-of-的使用方法"><a href="#06-for-of-的使用方法" class="headerlink" title="06 for of 的使用方法"></a>06 for of 的使用方法</h3><p>從上面解釋過迭代的原理後下方這邊的用法就清楚多了</p><h4 id="for-of-字串的迭代"><a href="#for-of-字串的迭代" class="headerlink" title="for of:字串的迭代"></a>for of:字串的迭代</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myStings = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> myStings) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/JhVcBmq.png"></p><h4 id="for-of-陣列的迭代"><a href="#for-of-陣列的迭代" class="headerlink" title="for of 陣列的迭代"></a>for of 陣列的迭代</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/zm9dNdj.png"></p><h3 id="07-樣板字面值Template-Iterator與字串字面值String-Iterator"><a href="#07-樣板字面值Template-Iterator與字串字面值String-Iterator" class="headerlink" title="07 樣板字面值Template Iterator與字串字面值String Iterator"></a>07 樣板字面值Template Iterator與字串字面值String Iterator</h3><ul><li>使用的符號不一樣使用(``)來包裹住文字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`123`</span>;</span><br></pre></td></tr></table></figure><ul><li>斷行</li></ul><p>Template Iterator可以直接空格下去不需要使用跳脫字元\n</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123 \n 123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`123</span></span><br><span class="line"><span class="string">123`</span>;</span><br></pre></td></tr></table></figure><ul><li>嵌入變數</li></ul><p>可以直接在字串串接中放入變數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;john&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p>ES5的寫法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;john&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&quot;my name is &quot;</span> + name;</span><br></pre></td></tr></table></figure><h3 id="08-展開運算子-Spread-Operator"><a href="#08-展開運算子-Spread-Operator" class="headerlink" title="08 展開運算子 Spread Operator"></a>08 展開運算子 Spread Operator</h3><h4 id="印出其值"><a href="#印出其值" class="headerlink" title="印出其值"></a>印出其值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(...arr1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/zaP2dyN.png"></p><p>例子</p><p>數學方法Math.min()取最小值參數不能放入陣列這個時候就可以使用展開運算子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(arr1));</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/QRqoJvl.png"></p><p>這樣就可以正常使用搂!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(...arr1)); <span class="comment">// 印出最小值為 1 </span></span><br></pre></td></tr></table></figure><h4 id="陣列串接"><a href="#陣列串接" class="headerlink" title="陣列串接"></a>陣列串接</h4><p>把內容物有重疊的兩個陣列構成新的陣列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2];</span><br></pre></td></tr></table></figure><p>這樣的寫法會等於<code>arr1.concat(arr2)</code></p><p><img src="https://i.imgur.com/TPTXpLY.png"></p><h4 id="物件的串接"><a href="#物件的串接" class="headerlink" title="物件的串接"></a>物件的串接</h4><p>把內容物有重疊的屬性直接用o2取代掉，後方的新屬性會取代掉舊的屬性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123; <span class="attr">c</span>: <span class="number">100</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o3 = &#123; ...o1, ...o2 &#125;;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/4UgB52N.png"></p><h3 id="09-箭頭函式-1"><a href="#09-箭頭函式-1" class="headerlink" title="09 箭頭函式(1)"></a>09 箭頭函式(1)</h3><p>怎麼樣寫會有回傳值, 怎麼樣寫不會有回傳值</p><p>有回傳值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> function1 = <span class="function"><span class="params">x</span> =&gt;</span> x+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>無回傳值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> function1 = <span class="function"><span class="params">x</span> =&gt;</span> &#123;x+<span class="number">1</span>&#125; </span><br></pre></td></tr></table></figure><h3 id="箭頭函式-2"><a href="#箭頭函式-2" class="headerlink" title="箭頭函式(2)"></a>箭頭函式(2)</h3><p>call 與 this</p><p>這邊this的指向是window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reply = <span class="string">`Hi, <span class="subst">$&#123;<span class="built_in">this</span>.person&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">greet();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/PeZfz24.png"></p><p>如果我們想要改變this的指向可以使用<code>call()</code>這個方法讓this去呼叫到obj裡面的屬性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reply = <span class="string">`Hi, <span class="subst">$&#123;<span class="built_in">this</span>.person&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(reply);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">person</span>: <span class="string">&quot;BIll&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">greet.call(obj);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/UWNoqdP.png"></p><h3 id="箭頭函式-3"><a href="#箭頭函式-3" class="headerlink" title="箭頭函式(3)"></a>箭頭函式(3)</h3><p>this 綁定的對象不再是function本身</p><h4 id="使用ES5的函式寫法"><a href="#使用ES5的函式寫法" class="headerlink" title="使用ES5的函式寫法"></a>使用ES5的函式寫法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">person</span>: <span class="string">&quot;BIll&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reply = <span class="string">`Hi, <span class="subst">$&#123;<span class="built_in">this</span>.person&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(reply);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hi,&quot;</span>, <span class="built_in">this</span>.perosn);</span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet.call(obj);</span><br></pre></td></tr></table></figure><p>因為function 內部的作用域會是隔開地所以是未定義(undefined)<br><img src="https://i.imgur.com/Dl7tOZ1.png"></p><h4 id="使用ES6箭頭函式"><a href="#使用ES6箭頭函式" class="headerlink" title="使用ES6箭頭函式"></a>使用ES6箭頭函式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">person</span>: <span class="string">&quot;BIll&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reply = <span class="string">`Hi, <span class="subst">$&#123;<span class="built_in">this</span>.person&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(reply);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hi,&quot;</span>, <span class="built_in">this</span>.person);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet.call(obj);</span><br></pre></td></tr></table></figure><p>箭頭函式不會有作用域的隔閡所以不會影響到this，所以它是一樣吃到外面的obj<br><img src="https://i.imgur.com/4iyrpM9.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-語言基礎-08-ES6&quot;&gt;&lt;a href=&quot;#JS-語言基礎-08-ES6&quot; class=&quot;headerlink&quot; title=&quot;JS 語言基礎 08 ES6&quot;&gt;&lt;/a&gt;JS 語言基礎 08 ES6&lt;/h2&gt;&lt;h3 id=&quot;01-let-與-const-作用</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-語言基礎 05 物件介紹</title>
    <link href="http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2005%20%E7%89%A9%E4%BB%B6%E4%BB%8B%E7%B4%B9/"/>
    <id>http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2005%20%E7%89%A9%E4%BB%B6%E4%BB%8B%E7%B4%B9/</id>
    <published>2021-03-20T16:37:50.826Z</published>
    <updated>2021-03-21T18:22:38.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-語言基礎-05-物件介紹"><a href="#JS-語言基礎-05-物件介紹" class="headerlink" title="JS 語言基礎 05 物件介紹"></a>JS 語言基礎 05 物件介紹</h2><h3 id="JS中的物件"><a href="#JS中的物件" class="headerlink" title="JS中的物件"></a>JS中的物件</h3><p><img src="https://i.imgur.com/LUWH97H.png"></p><ul><li>用大括號宣告({})</li><li>鍵值對應(key value pairs)</li><li>值又稱屬性(attribute)</li></ul><p><img src="https://i.imgur.com/iAa2ft0.png"></p><h3 id="物件的創建"><a href="#物件的創建" class="headerlink" title="物件的創建:"></a>物件的創建:</h3><p>實際的例子:<br><img src="https://i.imgur.com/BTEz50W.png"></p><p>使用attribute的方法:</p><ul><li>使用(.)</li><li>使用[‘’]</li></ul><p><img src="https://i.imgur.com/wgz7dl0.png"></p><p>記得呼叫物件的function要使用括號喔!()</p><p><img src="https://i.imgur.com/CPDOeUz.png"></p><h3 id="添加屬性至物件上"><a href="#添加屬性至物件上" class="headerlink" title="添加屬性至物件上"></a>添加屬性至物件上</h3><p>添加的方式如下:</p><ul><li>使用(.)</li><li>使用[‘’]</li><li>function添加的方式</li></ul><p><img src="https://i.imgur.com/67DDc7b.png"><br><img src="https://i.imgur.com/Si6hoZe.png"></p><p>添加後的屬性<br><img src="https://i.imgur.com/LKsFFo0.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-語言基礎-05-物件介紹&quot;&gt;&lt;a href=&quot;#JS-語言基礎-05-物件介紹&quot; class=&quot;headerlink&quot; title=&quot;JS 語言基礎 05 物件介紹&quot;&gt;&lt;/a&gt;JS 語言基礎 05 物件介紹&lt;/h2&gt;&lt;h3 id=&quot;JS中的物件&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-語言基礎 03 控制流程 Control Flow</title>
    <link href="http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2003%20%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B%20Control%20Flow/"/>
    <id>http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2003%20%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B%20Control%20Flow/</id>
    <published>2021-03-20T16:33:02.081Z</published>
    <updated>2021-03-21T18:22:28.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-語言基礎-03-控制流程-Control-Flow"><a href="#JS-語言基礎-03-控制流程-Control-Flow" class="headerlink" title="JS 語言基礎 03 控制流程 Control Flow"></a>JS 語言基礎 03 控制流程 Control Flow</h2><h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else if else:"></a>if else if else:</h3><p>如果判斷內容顯示true則跑所屬下方程式碼不然就是繼續往下判斷</p><p><img src="https://i.imgur.com/cNEfylI.png"></p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>跟if的判斷式很像，但要注意break不然程式會一直跑下去部跳出迴圈</p><p><img src="https://i.imgur.com/77yyb2Z.png"></p><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><h4 id="基本的for迴圈"><a href="#基本的for迴圈" class="headerlink" title="基本的for迴圈:"></a>基本的for迴圈:</h4><p>包含了 (初始值 終止條件 每次執行的語句)</p><p>迭代: 逐一的印出來</p><p><img src="https://i.imgur.com/Pfz23lY.png"></p><h4 id="倒著數回來的綿羊"><a href="#倒著數回來的綿羊" class="headerlink" title="倒著數回來的綿羊~"></a>倒著數回來的綿羊~</h4><p><img src="https://i.imgur.com/v6mpbCu.png"></p><h4 id="組合技-數到31隻的時候睡著了-第10隻的時候有點想睡"><a href="#組合技-數到31隻的時候睡著了-第10隻的時候有點想睡" class="headerlink" title="組合技 數到31隻的時候睡著了 第10隻的時候有點想睡"></a>組合技 數到31隻的時候睡著了 第10隻的時候有點想睡</h4><p><img src="https://i.imgur.com/Ihh2aEC.png"></p><h4 id="跳著數綿羊"><a href="#跳著數綿羊" class="headerlink" title="跳著數綿羊"></a>跳著數綿羊</h4><p><img src="https://i.imgur.com/K13mpV6.png"></p><h4 id="跳過特定數字的綿羊"><a href="#跳過特定數字的綿羊" class="headerlink" title="跳過特定數字的綿羊"></a>跳過特定數字的綿羊</h4><p>使用<code>continue</code></p><p><img src="https://i.imgur.com/NMQffWx.png"></p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>比較攏長的寫法不過還是要懂~</p><p><img src="https://i.imgur.com/e1s86SP.png"></p><h3 id="do-while"><a href="#do-while" class="headerlink" title="do..while"></a>do..while</h3><p>先跑一次，再判斷要不要繼續跑</p><p>直接跑出第十一隻綿羊 因為它會先進一次迴圈</p><p><img src="https://i.imgur.com/EpL1orX.png"></p><h3 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h3><p>使用雙重迴圈加上字串串接</p><p>當i = 1<br>  j會開始印出1~10</p><p>當i = 2<br>  j會開始印出1~10</p><p>  把兩者放入字串串接之後就完成瞜~</p><p><img src="https://i.imgur.com/29lA79T.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-語言基礎-03-控制流程-Control-Flow&quot;&gt;&lt;a href=&quot;#JS-語言基礎-03-控制流程-Control-Flow&quot; class=&quot;headerlink&quot; title=&quot;JS 語言基礎 03 控制流程 Control Flow&quot;&gt;&lt;/a&gt;JS</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-語言基礎 04 function</title>
    <link href="http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2004%20function/"/>
    <id>http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2004%20function/</id>
    <published>2021-03-20T16:33:02.081Z</published>
    <updated>2021-03-21T18:22:33.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-語言基礎-04-function"><a href="#JS-語言基礎-04-function" class="headerlink" title="JS 語言基礎 04 function"></a>JS 語言基礎 04 function</h2><p>DRY = don’t repeat yourself</p><p>盡量避免重複讓他工具化就是function的目的瞜!</p><p><img src="https://i.imgur.com/nHJ7rDY.png"></p><h3 id="了解表達式-Expression-與陳述句-Statement-的差異"><a href="#了解表達式-Expression-與陳述句-Statement-的差異" class="headerlink" title="了解表達式(Expression)與陳述句(Statement)的差異"></a>了解表達式(Expression)與陳述句(Statement)的差異</h3><ul><li>陳述句(Statement)</li></ul><p>不會有值</p><p>如　if else,switch</p><ul><li>表達式(Expression)</li></ul><p>一定會有值</p><p>如 1 + 1</p><h3 id="使用函式陳述式-Function-Statement-與函式表達式-Function-Expression"><a href="#使用函式陳述式-Function-Statement-與函式表達式-Function-Expression" class="headerlink" title="使用函式陳述式(Function Statement)與函式表達式(Function Expression)"></a>使用函式陳述式(Function Statement)與函式表達式(Function Expression)</h3><ul><li>函式陳述式(Function Statement)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloFunctionStatement</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello function statement !!!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">helloFunctionStatement()</span><br></pre></td></tr></table></figure><ul><li>函式表達式(Function Expression)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> helloFunctionExpression = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello function Expression !!!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">helloFunctionExpression()</span><br></pre></td></tr></table></figure><ul><li>Hoisting 變數提升</li></ul><p>它讓函式陳述式可以先呼叫函式在執行他的身體</p><p><img src="https://i.imgur.com/qMf63CS.png"></p><p>函式表達式則不行呼叫函式一定要寫在身體下方</p><p><img src="https://i.imgur.com/CJzxbrr.png"></p><h3 id="變數能夠影響的範圍作用域-Scope"><a href="#變數能夠影響的範圍作用域-Scope" class="headerlink" title="變數能夠影響的範圍作用域( Scope )"></a>變數能夠影響的範圍作用域( Scope )</h3><p><img src="https://i.imgur.com/9HZOB1r.png"></p><p>印出的結果是 </p><p>150<br>100</p><p>代表funciton裏面的變數不會影響到外面的</p><p>但是如果function裡面的關鍵字var 或是 let const 忘記寫了就會影響到外面的變數瞜!</p><p><img src="https://i.imgur.com/ElbwThz.png"></p><p>印出的結果是 </p><p>150<br>150</p><h3 id="全域變數與區域變數"><a href="#全域變數與區域變數" class="headerlink" title="全域變數與區域變數"></a>全域變數與區域變數</h3><p>在function內宣告的變數就是區域變數<br><img src="https://i.imgur.com/r55q1PP.png"></p><p>不再function內的話就是全域變數可以被當作property被window使用<br><img src="https://i.imgur.com/kXFHVro.png"></p><p>不是變數 (會被存取成屬性(property))</p><p><img src="https://i.imgur.com/KJ3S0XN.png"></p><p>當包含不是變數的function被呼叫執行後這個不是變數的部分也可以被當作property被window使用瞜!</p><p><img src="https://i.imgur.com/GosNh9F.png"></p><h3 id="回呼函數-Callback-Function-把函數做為參數傳遞"><a href="#回呼函數-Callback-Function-把函數做為參數傳遞" class="headerlink" title="回呼函數 Callback Function - 把函數做為參數傳遞"></a>回呼函數 Callback Function - 把函數做為參數傳遞</h3><p>這樣寫就可以把把函數做為參數傳遞:</p><p>當中的alert就可以改成各種方法去執行這個函式瞜<br><img src="https://i.imgur.com/GBM4gEb.png"></p><h3 id="匿名函式"><a href="#匿名函式" class="headerlink" title="匿名函式"></a>匿名函式</h3><p>下方的函式沒有名稱的部分就是匿名函式並且它只能放在回乎函式之中等待被呼叫的時候才使用</p><p>匿名的因為是因為它是預計要被傳進去的函式</p><p><img src="https://i.imgur.com/ztMucl2.png"></p><h3 id="IIFE-立即函式"><a href="#IIFE-立即函式" class="headerlink" title="IIFE 立即函式"></a>IIFE 立即函式</h3><p>使用的理由是避免一些不必要的汙染(變數的部分)</p><p><img src="https://i.imgur.com/8AbEP3T.png"></p><ul><li>全名: Immediately Invoked Functions Expression</li><li>可以立即呼叫的函式表達式</li><li>表達式: expression 它會回傳值</li><li>使用立即函式 會立刻執行函式</li></ul><p><img src="https://i.imgur.com/x18fhcO.png"></p><h3 id="hoisting-變數提升"><a href="#hoisting-變數提升" class="headerlink" title="hoisting 變數提升"></a>hoisting 變數提升</h3><p>不管在哪一行做的變數都視為在第一行做宣告</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//一開始的樣子</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);<span class="comment">// 結果是undefined因為它實際上長這樣</span></span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//實際上內建提升上去變數</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看四個console.log()的印出結果:</p><p>第一個紅色框是undefined</p><p>第二個是10</p><p>第三個是undefined</p><p>第四個是20</p><p>原樣:<br><img src="https://i.imgur.com/kP0yVPP.png"></p><p>提升後的樣子:<br><img src="https://i.imgur.com/zRGav1B.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-語言基礎-04-function&quot;&gt;&lt;a href=&quot;#JS-語言基礎-04-function&quot; class=&quot;headerlink&quot; title=&quot;JS 語言基礎 04 function&quot;&gt;&lt;/a&gt;JS 語言基礎 04 function&lt;/h2&gt;&lt;p&gt;DR</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-語言基礎 02 運算元與運算子</title>
    <link href="http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2002%20%E9%81%8B%E7%AE%97%E5%85%83%E8%88%87%E9%81%8B%E7%AE%97%E5%AD%90/"/>
    <id>http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2002%20%E9%81%8B%E7%AE%97%E5%85%83%E8%88%87%E9%81%8B%E7%AE%97%E5%AD%90/</id>
    <published>2021-03-20T16:25:09.230Z</published>
    <updated>2021-03-21T18:22:24.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-語言基礎-02-運算元與運算子"><a href="#JS-語言基礎-02-運算元與運算子" class="headerlink" title="JS 語言基礎 02 運算元與運算子"></a>JS 語言基礎 02 運算元與運算子</h2><p>下圖中 1, 2 的部分是運算元，(+)就是運算子，整段式子為運算式</p><p><img src="https://i.imgur.com/F9oedTH.png"></p><h3 id="比較運算子介紹-大於小於-與等於screenflow"><a href="#比較運算子介紹-大於小於-與等於screenflow" class="headerlink" title="比較運算子介紹 大於小於.與等於screenflow"></a>比較運算子介紹 大於小於.與等於screenflow</h3><p>這邊的觀念比較直覺只要內容是正確的就顯示true反之則顯示false</p><p><img src="https://i.imgur.com/EwkmXyu.png"></p><h3 id="比較運算子第二部分-三個等於與兩個等於-有什麼不一樣"><a href="#比較運算子第二部分-三個等於與兩個等於-有什麼不一樣" class="headerlink" title="比較運算子第二部分 三個等於與兩個等於 有什麼不一樣"></a>比較運算子第二部分 三個等於與兩個等於 有什麼不一樣</h3><ul><li>一個等於是指派賦值運算子</li></ul><p><img src="https://i.imgur.com/4rFvd13.png"></p><ul><li>兩個等於不是嚴格的比較</li></ul><p>所以下圖就算是型別不同還是會判斷成這樣</p><p><img src="https://i.imgur.com/qx46t5f.png"></p><ul><li>三個等於是嚴格的比較</li></ul><p>實務中也比較常使用</p><p><img src="https://i.imgur.com/wkiL9kW.png"></p><h3 id="算數運算子-加減乘除"><a href="#算數運算子-加減乘除" class="headerlink" title="算數運算子 加減乘除"></a>算數運算子 加減乘除</h3><p>這邊觀念比較簡單<br><img src="https://i.imgur.com/8tsDdJx.png"></p><h3 id="算數運算子-餘數與被除數"><a href="#算數運算子-餘數與被除數" class="headerlink" title="算數運算子 餘數與被除數"></a>算數運算子 餘數與被除數</h3><p>這邊觀念比較簡單</p><p>(%)這個運算子可以計算出餘數<br><img src="https://i.imgur.com/uZ2rxFD.png"></p><h3 id="邏輯運算子-AND-amp-amp-與-OR"><a href="#邏輯運算子-AND-amp-amp-與-OR" class="headerlink" title="邏輯運算子 AND (&amp;&amp;) 與 OR(||)"></a>邏輯運算子 AND (&amp;&amp;) 與 OR(||)</h3><p>(||)</p><p>只要有一個是true就是true</p><p><img src="https://i.imgur.com/0x5Fr9b.png"></p><p>(&amp;&amp;)</p><p>兩邊必須一樣才是true</p><p><img src="https://i.imgur.com/q92vvGV.png"><br><img src="https://i.imgur.com/IaaX9lR.png"></p><p>進階的例子:</p><p>就算前面是false但是因為是(||)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">3</span>==<span class="number">2</span>) || <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">=&gt;<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>因為&amp;&amp;這個運算符必須兩個都跑過所以會跑到第二個</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line">y =<span class="number">2</span></span><br><span class="line"></span><br><span class="line">(x-y) &amp;&amp; (y-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">=&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><p>左邊如果是false會直接返回false<br><img src="https://i.imgur.com/SN7fByu.png"></p><p>如果是(||)就會左邊的跑完就出結果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line">y =<span class="number">2</span></span><br><span class="line"></span><br><span class="line">(x-y) || (y-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">=&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><p>這邊卻會繼續執行是比較不一樣的地方</p><p><img src="https://i.imgur.com/nRZaUGG.png"></p><p>或等於 (||=)</p><p><img src="https://i.imgur.com/X6EedzQ.png"></p><p>如果有預設值則跑預設值的結果</p><p><img src="https://i.imgur.com/AqAlpQS.png"></p><h3 id="邏輯運算子-NOT"><a href="#邏輯運算子-NOT" class="headerlink" title="邏輯運算子 NOT (!)"></a>邏輯運算子 NOT (!)</h3><p>不等於!!</p><p><img src="https://i.imgur.com/gWqzZXN.png"></p><h3 id="三元運算子"><a href="#三元運算子" class="headerlink" title="三元運算子"></a>三元運算子</h3><p>這句話很好的解釋了三元運算子的運算式<br><img src="https://i.imgur.com/I1Tg8LV.png"></p><p>如果1&gt;=3 我就印出a 不然我就印出b</p><p>明顯問句是1不大於等於3錯得所以印出b</p><p><img src="https://i.imgur.com/YEOuI5J.png"></p><p>其實三元運算子實際上長這樣:<br><img src="https://i.imgur.com/3irInfK.png"></p><p>賦值運算子與次方(+= 系列)</p><h3 id="賦值運算子與次方-系列"><a href="#賦值運算子與次方-系列" class="headerlink" title="賦值運算子與次方(+= 系列)"></a>賦值運算子與次方(+= 系列)</h3><p>這邊解釋各種加減乘除=的用法</p><p><img src="https://i.imgur.com/YXFU62o.png"><br><img src="https://i.imgur.com/tYtlRg0.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-語言基礎-02-運算元與運算子&quot;&gt;&lt;a href=&quot;#JS-語言基礎-02-運算元與運算子&quot; class=&quot;headerlink&quot; title=&quot;JS 語言基礎 02 運算元與運算子&quot;&gt;&lt;/a&gt;JS 語言基礎 02 運算元與運算子&lt;/h2&gt;&lt;p&gt;下圖中 1,</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-語言基礎 01 變數&amp;數據型態</title>
    <link href="http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2001%20%E8%AE%8A%E6%95%B8&amp;%E6%95%B8%E6%93%9A%E5%9E%8B%E6%85%8B/"/>
    <id>http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2001%20%E8%AE%8A%E6%95%B8&amp;%E6%95%B8%E6%93%9A%E5%9E%8B%E6%85%8B/</id>
    <published>2021-03-20T16:19:44.709Z</published>
    <updated>2021-03-21T18:22:19.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-語言基礎-01-變數-amp-數據型態"><a href="#JS-語言基礎-01-變數-amp-數據型態" class="headerlink" title="JS 語言基礎 01 變數&amp;數據型態"></a>JS 語言基礎 01 變數&amp;數據型態</h2><h3 id="變數variable"><a href="#變數variable" class="headerlink" title="變數variable"></a>變數variable</h3><p>變數在使用前會被宣告</p><p><img src="https://i.imgur.com/Jogff3g.png"></p><p>如果像一開始的那個只有宣告的變數的話</p><p>他會跑出來的結果會是undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><p>當給他value的時候就能正常印出數字摟!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br></pre></td></tr></table></figure><h4 id="變數是值的符號名稱，可以透過名稱來獲得值的引用"><a href="#變數是值的符號名稱，可以透過名稱來獲得值的引用" class="headerlink" title="變數是值的符號名稱，可以透過名稱來獲得值的引用"></a>變數是值的符號名稱，可以透過名稱來獲得值的引用</h4><p>var x =10 並不是把10丟給X的意思</p><p>而是透過變數 var x = 10 名稱來獲得值的引用(reference)</p><p><img src="https://i.imgur.com/ZRTKQ9S.png"></p><h3 id="第一種型別-Number"><a href="#第一種型別-Number" class="headerlink" title="第一種型別 Number"></a>第一種型別 Number</h3><ul><li>整數integer</li><li>浮點數float</li></ul><p>JS中不會區分這兩者都只會顯示”Number”</p><p><img src="https://i.imgur.com/pwV5N3E.png"></p><p>Python中這兩者就有區別瞜!</p><p><img src="https://i.imgur.com/5NBqH3i.png"></p><h4 id="浮點數的陷阱"><a href="#浮點數的陷阱" class="headerlink" title="浮點數的陷阱"></a>浮點數的陷阱</h4><p>浮點數可能會造成誤差</p><p><img src="https://i.imgur.com/R3cvdo1.png"></p><p><img src="https://i.imgur.com/pnwCyTs.png"></p><h3 id="第二種資料型別-字串-String"><a href="#第二種資料型別-字串-String" class="headerlink" title="第二種資料型別 字串 String"></a>第二種資料型別 字串 String</h3><p>宣告方法:</p><ul><li>單引號</li><li>雙引號</li><li>單雙引號不可以混用</li><li>ES6可以使用<code>(``)</code>來宣告</li></ul><p><img src="https://i.imgur.com/PwREY9M.png"></p><p>字串的串接<br><img src="https://i.imgur.com/m6dinYH.png"></p><h3 id="第三種資料型態-Boolean-布林值"><a href="#第三種資料型態-Boolean-布林值" class="headerlink" title="第三種資料型態 Boolean 布林值"></a>第三種資料型態 Boolean 布林值</h3><p><img src="https://i.imgur.com/wXpRpPV.png"></p><p>使用Boolean來做判斷流程是他很重要的作用</p><p><img src="https://i.imgur.com/NVksCqE.png"></p><h3 id="第四、第五種資料型別-null-空值-與-undefined-未定義"><a href="#第四、第五種資料型別-null-空值-與-undefined-未定義" class="headerlink" title="第四、第五種資料型別 null 空值 與 undefined 未定義"></a>第四、第五種資料型別 null 空值 與 undefined 未定義</h3><ul><li>undefined 未定義</li></ul><p>宣告變數卻沒有指派時候印出x會得到</p><p>undefined因為值還沒有指派</p><p>型別也是undefined</p><p><img src="https://i.imgur.com/9IWUrwW.png"></p><ul><li>null 空值</li></ul><p>指派一個空值給變數</p><p><img src="https://i.imgur.com/oyPNi5x.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-語言基礎-01-變數-amp-數據型態&quot;&gt;&lt;a href=&quot;#JS-語言基礎-01-變數-amp-數據型態&quot; class=&quot;headerlink&quot; title=&quot;JS 語言基礎 01 變數&amp;amp;數據型態&quot;&gt;&lt;/a&gt;JS 語言基礎 01 變數&amp;amp;數據</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>實作練習-Javascript 30 01 - JavaScript Drum Kit</title>
    <link href="http://example.com/2021/02/27/Javascript%2030%2001%20-%20JavaScript%20Drum%20Kit/"/>
    <id>http://example.com/2021/02/27/Javascript%2030%2001%20-%20JavaScript%20Drum%20Kit/</id>
    <published>2021-02-26T17:45:55.109Z</published>
    <updated>2021-03-20T14:55:25.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript-30-01-JavaScript-Drum-Kit"><a href="#Javascript-30-01-JavaScript-Drum-Kit" class="headerlink" title="Javascript 30 01 - JavaScript Drum Kit"></a>Javascript 30 01 - JavaScript Drum Kit</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><p>跟著做 JS 30 第一個作品 Drum kit</p><p>主要是用這個頁面呈現，搭配鍵盤上面的按鈕做出可以有聲音互動的頁面</p><p><a href="https://chiehliu.github.io/git-projects/01%20-%20JavaScript%20Drum%20Kit/index-START.html">跟著做出來的範例</a></p><p><img src="https://i.imgur.com/vu8a03l.png"></p><h2 id="想法示意圖"><a href="#想法示意圖" class="headerlink" title="想法示意圖"></a>想法示意圖</h2><p>一開始從 KB 取得 keycode，接下來就可以連結到兩個部分:</p><ul><li>音效 music: 按下去時候的鼓聲</li><li>DOM style: 按下去時候的變大特效</li></ul><p>然後從特效這邊會延伸出去一些東西:</p><ul><li>add class: 放大的黃圈特效</li><li>transform: add class 之後他會做這個動畫變形</li><li>transition: 這個跟 transform 是連動的</li><li>remove class: 移除後恢復按下去之前的樣子</li></ul><p><img src="https://i.imgur.com/AeYB2i6.png"></p><h2 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  ;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">playHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">`audio[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>);</span><br><span class="line">      <span class="keyword">if</span> (audio) &#123;</span><br><span class="line">        audio.currentTime = <span class="number">0</span>; <span class="comment">//連續觸發的關鍵</span></span><br><span class="line">        audio.play();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">`div[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>); <span class="comment">// 這邊字串必須使用``這個裡面的符號才有意義</span></span><br><span class="line">      <span class="keyword">if</span> (dom) dom.classList.add(<span class="string">&#x27;playing&#x27;</span>); <span class="comment">//這邊的add是method</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transitionendHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (e.propertyName === <span class="string">&#x27;transform&#x27;</span>) &#123;</span><br><span class="line">        e.currentTarget.classList.remove(<span class="string">&#x27;playing&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, playHandler)</span><br><span class="line">    <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.key&#x27;</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">      key.addEventListener(<span class="string">&#x27;transitionend&#x27;</span>, transitionendHandler)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="keyboardEvent-裡面的值"><a href="#keyboardEvent-裡面的值" class="headerlink" title="keyboardEvent 裡面的值"></a>keyboardEvent 裡面的值</h2><p>印出來之後裡面會有很多 property，然後裡面有兩個比較重要的會是 key 跟 keycode</p><p><img src="https://i.imgur.com/UyTv5Y4.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, playHandler);</span><br><span class="line"><span class="comment">//這邊使用keydown是因為想讓他按著可以一直撥放</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">playHandler</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下圖可以看到那些 keycode 可以放在 HTML 裡面待會讓 JS 去做對應</p><p><img src="https://i.imgur.com/nh5PLZi.png"></p><p><img src="https://i.imgur.com/jrXPz2T.png"></p><h2 id="Play-music"><a href="#Play-music" class="headerlink" title="Play music"></a>Play music</h2><p>這邊使用了 ES6 的 template string <code>(``)</code>所以她後面才會加${}並且裡面放的就是 keycode 讓他抓取到鍵盤按下去的物件，接下來設定 if 條件來讓他發出聲音</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">playHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">`audio[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>);</span><br><span class="line">    <span class="comment">//上方這段程式碼就已經找到鍵盤對應的audio區塊了</span></span><br><span class="line">    <span class="keyword">if</span> (audio) &#123;</span><br><span class="line">        <span class="comment">// 這邊使用if可以讓不是keycode範圍內的鍵盤不會跳出錯誤因為會直接跳出這個條件式避免太多出錯</span></span><br><span class="line">         audio.currentTime = <span class="number">0</span>; <span class="comment">//連續觸發的關鍵</span></span><br><span class="line">         audio.play();<span class="comment">// 這邊play也是方法還有個兄弟pause()</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DOM-style"><a href="#DOM-style" class="headerlink" title="DOM style"></a>DOM style</h2><p>這樣一樣去抓取要跳出特效的 div 然後使用 if 條件去他去跑’playing’這個 class 而不是原來那個</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">`div[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>);</span><br><span class="line"><span class="comment">// 這邊因為要出現的是那個物件的特效所以選取的是div</span></span><br><span class="line">        <span class="keyword">if</span> (dom) dom.classList.add(<span class="string">&#x27;playing&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//這邊的add是method 通常會一起用的還有remove跟toggle</span></span><br></pre></td></tr></table></figure><p>上面那行程式碼只做了讓他放大且變黃的特效，接下來要來處理放開之後變回原狀(class 要收掉)</p><p><img src="https://i.imgur.com/u1uBXEA.png"></p><p><img src="https://i.imgur.com/QAWHIzq.png"></p><p>一開始先選取所有的.key 的部分加入監聽之後使用<code>transitionend</code>並加入函式<code>transitionendHandler</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.key&#x27;</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">key.addEventListener(<span class="string">&#x27;transitionend&#x27;</span>, transitionendHandler)</span><br><span class="line">        <span class="comment">// transitionend是事件event</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transitionendHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.propertyName === <span class="string">&#x27;transform&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//propertyName 這個是property</span></span><br><span class="line">          e.currentTarget.classList.remove(<span class="string">&#x27;playing&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>下方這些東西是當 transition 效果結束之後會回傳的內容，在這裡我們就拿 propertyName = transform 這個來當指標，當 transform 出來（也就是 transition 結束，transitionend 被觸發時），把 .playing 這個 class 移除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以用這串驗證一下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transitionendHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/pMkgNqy.png"></p><h2 id="小補充"><a href="#小補充" class="headerlink" title="小補充"></a>小補充</h2><ul><li>data-* attribute 屬性:可自定義名稱</li><li>keycode:每個鍵盤按鍵都有對應的 keycode</li><li>es6 語法:箭頭函式、模板字串符(變數${})</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Javascript-30-01-JavaScript-Drum-Kit&quot;&gt;&lt;a href=&quot;#Javascript-30-01-JavaScript-Drum-Kit&quot; class=&quot;headerlink&quot; title=&quot;Javascript 30 01 - J</summary>
      
    
    
    
    <category term="Javascript作品" scheme="http://example.com/categories/Javascript%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>實作練習-Javascript 30 03 - Playing with CSS Variables and JS</title>
    <link href="http://example.com/2021/02/27/Javascript%2030%2003%20-%20Playing%20with%20CSS%20Variables%20and%20JS/"/>
    <id>http://example.com/2021/02/27/Javascript%2030%2003%20-%20Playing%20with%20CSS%20Variables%20and%20JS/</id>
    <published>2021-02-26T17:41:47.399Z</published>
    <updated>2021-03-20T14:55:32.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript-30-03-Playing-with-CSS-Variables-and-JS"><a href="#Javascript-30-03-Playing-with-CSS-Variables-and-JS" class="headerlink" title="Javascript 30 03 - Playing with CSS Variables and JS"></a>Javascript 30 03 - Playing with CSS Variables and JS</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><p>跟著做 JS 30 第三個作品 調整照片:邊框大小 模糊度 邊框顏色</p><p><a href="https://chiehliu.github.io/git-projects/03%20-%20CSS%20Variables/index-START.html">跟著做出來的範例</a></p><p><img src="https://i.imgur.com/0Ph2Ywa.png"></p><h2 id="想法示意"><a href="#想法示意" class="headerlink" title="想法示意"></a>想法示意</h2><p>這個練習的重點在於</p><ul><li>spacing 改變 padding</li><li>blur 使用 filter 改變 blur</li><li>base color 改變 background</li></ul><p>這三個部分它們怎麼使用 JS 去串聯到 style 裡面做修改，甚至他們有”單位”(ex.px,rem)的情況下</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML:"></a>HTML:</h2><p>首先可以先觀察一開始的原始檔案我就學習到一些基本的 HTML 使用:</p><p>認識 HTML <input> type Attribute</p><ul><li>range：滑動桿</li><li>color：顯示顏色選擇器</li><li>min/max: 代表最大最小值</li><li>data-sizing:<br>HTML5 中的 data-_ attribute 屬性的 _ 的部分是可以自訂的，其中的內容如果要被 JS 讀取得使用<code>dataset</code>這個物件就可以抓取瞜!</li></ul><p><img src="https://i.imgur.com/uxKEUl7.png"></p><p>本篇作品 HTML:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;controls&quot;</span>&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;spacing&quot;</span>&gt;Spacing:&lt;/label&gt;</span><br><span class="line">    &lt;input id=<span class="string">&quot;spacing&quot;</span> type=<span class="string">&quot;range&quot;</span> name=<span class="string">&quot;spacing&quot;</span> min=<span class="string">&quot;10&quot;</span> max=<span class="string">&quot;200&quot;</span> value=<span class="string">&quot;10&quot;</span> data-sizing=<span class="string">&quot;px&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;blur&quot;</span>&gt;Blur:&lt;/label&gt;</span><br><span class="line">    &lt;input id=<span class="string">&quot;blur&quot;</span> type=<span class="string">&quot;range&quot;</span> name=<span class="string">&quot;blur&quot;</span> min=<span class="string">&quot;0&quot;</span> max=<span class="string">&quot;25&quot;</span> value=<span class="string">&quot;10&quot;</span> data-sizing=<span class="string">&quot;px&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;base&quot;</span>&gt;Base Color&lt;/label&gt;</span><br><span class="line">    &lt;input id=<span class="string">&quot;base&quot;</span> type=<span class="string">&quot;color&quot;</span> name=<span class="string">&quot;base&quot;</span> value=<span class="string">&quot;#ffc600&quot;</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h2><h3 id="CSS-Variables"><a href="#CSS-Variables" class="headerlink" title="CSS Variables"></a>CSS Variables</h3><p>使用 CSS 變數有什麼好處呢？</p><ul><li>統一整個樣式表的樣式 讓大家在原始碼中的數值統一</li><li>基於預定的數值做計算 因為都有了基準數值後，變數就可以整體做計算，不用一一調整</li></ul><p>第一個步驟是宣告變數:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">      --base: <span class="number">#ffc600</span>;</span><br><span class="line">      --spacing: <span class="number">10px</span>;</span><br><span class="line">      --blur: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第二個步驟是取值階段:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="built_in">var</span>(--spacing);</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">var</span>(--base);</span><br><span class="line">      <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="built_in">var</span>(--blur));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>本篇作品 CSS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">:root &#123;</span><br><span class="line">  --base: #ffc600;</span><br><span class="line">  --spacing: 10px;</span><br><span class="line">  --blur: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">  padding: <span class="keyword">var</span>(--spacing);</span><br><span class="line">  background: <span class="keyword">var</span>(--base);</span><br><span class="line">  filter: blur(<span class="keyword">var</span>(--blur));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.hl &#123;</span><br><span class="line">  color: <span class="keyword">var</span>(--base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  background: #193549;</span><br><span class="line">  color: white;</span><br><span class="line">  font-family: <span class="string">&#x27;helvetica neue&#x27;</span>, sans-serif;</span><br><span class="line">  font-weight: <span class="number">100</span>;</span><br><span class="line">  font-size: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.controls &#123;</span><br><span class="line">  margin-bottom: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="JS"><a href="#JS" class="headerlink" title="JS:"></a>JS:</h2><p>一開始必須先使用 querySelectorAll 抓取要改變的地方也就是<br>.controls 底下的 <code>&lt;input&gt;</code>HTMLtag 底下的 value</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.controls input&#x27;</span>);</span><br></pre></td></tr></table></figure><p>抓去後使用 forEach 在剛剛設定的變數 inputs 上面因為做一個一個操作的時候會使用 forEach，並加入 addEventListener 做事件監聽處理”change”,”mousemove”讓滑鼠在點擊 slidebar 的時候會改變 CSS 的數值進而改變畫面。</p><p>兩個使用到的事件:</p><p><img src="https://i.imgur.com/ukFLHgs.png"></p><p><img src="https://i.imgur.com/AaIsRcf.png"></p><h2 id="Event-reference"><a href="#Event-reference" class="headerlink" title="Event reference"></a><a href="https://developer.mozilla.org/en-US/docs/Web/Events">Event reference</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inputs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">        input.addEventListener(<span class="string">&#x27;change&#x27;</span>, changeHandler)</span><br><span class="line">        input.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, changeHandler)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下來處理最後一件事情把抓取到的數值以及單位放入 style 裡面使用 setProperty</p><p><code>style.setProperty(propertyName, value, priority);</code></p><p><code>dataset</code>這邊來選取 HTMLtag 裡面的屬性上面有提到來選取他設定的屬性或者是<code>&#39;&#39;</code>為空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.setProperty(<span class="string">&#x27;--&#x27;</span> + <span class="built_in">this</span>.name, <span class="built_in">this</span>.value + (<span class="built_in">this</span>.dataset.sizing || <span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure><p>完整程式碼編排:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    ;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> inputs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.controls input&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">changeHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.documentElement.style.setProperty(<span class="string">&#x27;--&#x27;</span> + <span class="built_in">this</span>.name, <span class="built_in">this</span>.value + (<span class="built_in">this</span>.dataset.sizing || <span class="string">&#x27;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">        inputs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line">        input.addEventListener(<span class="string">&#x27;change&#x27;</span>, changeHandler)</span><br><span class="line">        input.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, changeHandler)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)()</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="小補充"><a href="#小補充" class="headerlink" title="小補充"></a>小補充</h2><p>所有的事件都可以看這個參照~<br><a href="https://developer.mozilla.org/en-US/docs/Web/Events">Event reference</a></p><p>HTML range color</p><p>CSS 變數</p><p>dataset</p><p>setProperty 融合變數的寫法很特別</p><p>可以再多留意~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Javascript-30-03-Playing-with-CSS-Variables-and-JS&quot;&gt;&lt;a href=&quot;#Javascript-30-03-Playing-with-CSS-Variables-and-JS&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="Javascript作品" scheme="http://example.com/categories/Javascript%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>實作練習-Javascript 30 04 - Array Cardio Day 1</title>
    <link href="http://example.com/2021/02/27/Javascript%2030%2004%20-%20Array%20Cardio%20Day%201/"/>
    <id>http://example.com/2021/02/27/Javascript%2030%2004%20-%20Array%20Cardio%20Day%201/</id>
    <published>2021-02-26T17:41:47.399Z</published>
    <updated>2021-03-20T14:55:35.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript-30-04-Array-Cardio-Day-1"><a href="#Javascript-30-04-Array-Cardio-Day-1" class="headerlink" title="Javascript 30 04 - Array Cardio Day 1"></a>Javascript 30 04 - Array Cardio Day 1</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><p>跟著做 JS 30 第四個作品，不過這集比較多在介紹 array 裡面的內容，像是一些功能介紹等等</p><p><img src="https://i.imgur.com/V70zMHQ.png"></p><p>上圖是 12 筆資料待會要開跑 array 的 methods</p><h2 id="1-Filter-the-list-of-inventors-for-those-who-were-born-in-the-1500’s"><a href="#1-Filter-the-list-of-inventors-for-those-who-were-born-in-the-1500’s" class="headerlink" title="1. Filter -the list of inventors for those who were born in the 1500’s"></a>1. <code>Filter</code> -the list of inventors for those who were born in the 1500’s</h2><p>使用 filter 印出出生約在 1500~1600 左右的人</p><p><code>Array.prototype.filter() </code></p><p><code>filter</code> 對內容作過濾後抽出幾個符合條件的然後做為一個”新陣列”產生，且不會影響原始的資料</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ans = inventors.filter(<span class="function"><span class="params">inventor</span> =&gt;</span> inventor.year &gt;= <span class="number">1500</span> &amp;&amp; inventor.year &lt; <span class="number">1600</span>)</span><br><span class="line"><span class="comment">//箭頭函式在箭頭後面的就是return的內容</span></span><br><span class="line"><span class="built_in">console</span>.table(ans) <span class="comment">//這邊使用table可以印出表格</span></span><br></pre></td></tr></table></figure><p>結果:<br><img src="https://i.imgur.com/ZGYzXUv.png"></p><h2 id="2-map-Give-us-an-array-of-the-inventors-first-and-last-names"><a href="#2-map-Give-us-an-array-of-the-inventors-first-and-last-names" class="headerlink" title="2. map-Give us an array of the inventors first and last names"></a>2. <code>map</code>-Give us an array of the inventors first and last names</h2><p>給出一個 inventors 的新陣列包含了它們的 first 跟 last names</p><p><code>Array.prototype.map()</code></p><p><code>map</code>產生”新陣列”列出符合條件的內容並且其內容可以針對 return 的東西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ans = inventors.map(<span class="function"><span class="params">inventor</span> =&gt;</span> inventor.first + <span class="string">&#x27; &#x27;</span> + inventor.last);</span><br><span class="line"><span class="built_in">console</span>.table(ans);</span><br></pre></td></tr></table></figure><h3 id="補充-forEach-的部分做一樣的題目"><a href="#補充-forEach-的部分做一樣的題目" class="headerlink" title="補充 forEach 的部分做一樣的題目"></a>補充 forEach 的部分做一樣的題目</h3><p><code>Array.prototype.forEach()</code></p><p><code>forEach</code> 是對某些數量的東西各做一件甚麼事，如果沒有要產生新陣列時可以使用，有點像是加東西上去的概念</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ans = [];</span><br><span class="line">inventors.forEach(<span class="function"><span class="params">inventor</span> =&gt;</span> ans.push(inventor.first + <span class="string">&#x27; &#x27;</span> + inventor.last));</span><br><span class="line"><span class="built_in">console</span>.table(ans);</span><br></pre></td></tr></table></figure><p>map 跟 forEach 產出的結果:</p><p><img src="https://i.imgur.com/GuBBKDS.png"></p><h2 id="3-Sort-the-inventors-by-birthdate-oldest-to-youngest"><a href="#3-Sort-the-inventors-by-birthdate-oldest-to-youngest" class="headerlink" title="3. Sort - the inventors by birthdate, oldest to youngest"></a>3. <code>Sort</code> - the inventors by birthdate, oldest to youngest</h2><p><code>Array.prototype.sort()</code></p><ul><li>若 sort(a, b) 的回傳值小於 0，則會把 a 排在小於 b 之索引的位置，即 a 排在 b 前面。</li><li>若 sort(a, b) 的回傳值大於 0，則會把 b 排在小於 a 之索引的位置，即 b 排在 a 前面。<br>如果我們是為了比較簡單的數字，可以利用 a 減 b。（由小到大）</li></ul><p>let ary =[3,2,8,6,4,9] 這個使用 sort 之後會產生 由小排到大的預設[2,3,4,6,8,9]]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ans = inventors.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.year - b.year)</span><br><span class="line"><span class="comment">//&lt; 0 會往後排 == 0 保持原位 &gt; 0 會往前排</span></span><br><span class="line"><span class="built_in">console</span>.table(ans)</span><br></pre></td></tr></table></figure><p>根據生日前後排出來的結果:<br><img src="https://i.imgur.com/eWG6x69.png"></p><h2 id="4-reduce-How-many-years-did-all-the-inventors-live-all-together"><a href="#4-reduce-How-many-years-did-all-the-inventors-live-all-together" class="headerlink" title="4. reduce - How many years did all the inventors live all together?"></a>4. <code>reduce</code> - How many years did all the inventors live all together?</h2><p><code>Array.prototype.reduce()</code></p><blockquote><p>我們會有一個暫存值，進入陣列去跟每個值做運算，最後回傳這個暫存值。</p></blockquote><p>簡單來說就是使用加法做加總</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    inventors.forEach(<span class="function">(<span class="params">inventor</span>) =&gt;</span> &#123;</span><br><span class="line">    total += inventor.passed - inventor.year</span><br><span class="line">&#125;) <span class="comment">//傳統作法會使用forEach</span></span><br></pre></td></tr></table></figure><p><code>reduce</code>作法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> total = inventors.reduce(<span class="function">(<span class="params">total, inventor</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> total + inventor.passed - inventor.year</span><br><span class="line"> &#125;, <span class="number">0</span>)</span><br><span class="line"> <span class="comment">//參數 前面是function 後面0是初始起始值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>以下是練習題</p><h2 id="5-Sort-the-inventors-by-years-lived"><a href="#5-Sort-the-inventors-by-years-lived" class="headerlink" title="5. Sort - the inventors by years lived"></a>5. <code>Sort</code> - the inventors by years lived</h2><p>照活的歲數排序</p><p>跟上面的操作差不多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ans = inventors.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a.passed - a.year) - (b.passed - b.year)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(ans);</span><br></pre></td></tr></table></figure><p>印出結果:</p><p><img src="https://i.imgur.com/8K35h14.png"></p><h2 id="6-create-a-list-of-Boulevards-in-Paris-that-contain-‘de’-anywhere-in-the-name"><a href="#6-create-a-list-of-Boulevards-in-Paris-that-contain-‘de’-anywhere-in-the-name" class="headerlink" title="6. create a list of Boulevards in Paris that contain ‘de’ anywhere in the name"></a>6. create a list of Boulevards in Paris that contain ‘de’ anywhere in the name</h2><p>從下面這個頁面找出有多少個字包含了’de’這兩個字母在裡面</p><p><a href="https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris">https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris</a></p><p>首先創造一個先陣列 ary</p><p>選取所有的 Boulevards 會發現我們要的文字內容 text 會在<code>.mw-category-group li a</code>這邊找到</p><p>接下來<code>forEach</code>每一個[]並且 push 進去選取到的文字組合這邊會得到 38 個項目</p><p>下一步來做<code>filte</code>r 篩選出要得’de’在 text 裡面尋找完全不一樣是-1 完全一樣是 1 不相關是 0</p><p><img src="https://i.imgur.com/rJk7kkx.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [];</span><br><span class="line">      <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.mw-category-group li a&#x27;</span>).forEach(<span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">      ary.push(a.text);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> ans = ary.filter(<span class="function"><span class="params">text</span> =&gt;</span> text.indexOf(<span class="string">&#x27;de&#x27;</span>) !== -<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>得出結果:</p><p><img src="https://i.imgur.com/BUUUqEf.png"></p><h2 id="7-sort-Exercise-Sort-the-people-alphabetically-by-last-name"><a href="#7-sort-Exercise-Sort-the-people-alphabetically-by-last-name" class="headerlink" title="7. sort - Exercise-Sort the people alphabetically by last name"></a>7. <code>sort</code> - Exercise-Sort the people alphabetically by last name</h2><p>照 abcd 順序排列所有人的 last name</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ans = people.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> [aFirst, aLast] = a.split(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">      <span class="keyword">let</span> [bFirst, bLast] = b.split(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> aLast &gt; bLast ? <span class="number">1</span> : bLast &gt; aLast ? -<span class="number">1</span> : <span class="number">0</span><span class="comment">//判斷整個單字</span></span><br><span class="line">      <span class="keyword">return</span> aLast[<span class="number">0</span>] &gt; bLast[<span class="number">0</span>] ? <span class="number">1</span> : bLast &gt; aLast[<span class="number">0</span>] ? -<span class="number">1</span> : <span class="number">0</span><span class="comment">//只判斷第一個字</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//如果a&gt;b則 1 如果不是則繼續 b&gt;a 如果&quot;是&quot;則反應 -1 否則為 0</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>印出結果(片段…後面太長卡掉)</p><p><img src="https://i.imgur.com/7Lu3UhN.png"></p><h2 id="8-Reduce-Exercise-Sum-up-the-instances-of-each-of-these"><a href="#8-Reduce-Exercise-Sum-up-the-instances-of-each-of-these" class="headerlink" title="8. Reduce - Exercise -Sum up the instances of each of these"></a>8. <code>Reduce</code> - Exercise -Sum up the instances of each of these</h2><p>加總 data 內部的字串數量有多少</p><p>得到的結果應該會長這樣:<br>{<br>car: …<br>truck:…<br>bike:…</p><p>}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [<span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>, <span class="string">&#x27;bike&#x27;</span>, <span class="string">&#x27;walk&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;van&#x27;</span>, <span class="string">&#x27;bike&#x27;</span>, <span class="string">&#x27;walk&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;van&#x27;</span>, <span class="string">&#x27;car&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;truck&#x27;</span></span><br><span class="line">    ];</span><br><span class="line"><span class="keyword">let</span> ans = data.reduce(<span class="function">(<span class="params">obj, content</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj[content]) obj[content] = <span class="number">1</span> <span class="comment">//當obj內容不等於物件內容的時候回覆1 ， 除此之外回覆 obj[content]++ ，之後再跑回迴圈return obj</span></span><br><span class="line">        <span class="keyword">else</span> obj[content] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(ans)</span><br></pre></td></tr></table></figure><p>結果如下</p><p><img src="https://i.imgur.com/RzMkuvZ.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Javascript-30-04-Array-Cardio-Day-1&quot;&gt;&lt;a href=&quot;#Javascript-30-04-Array-Cardio-Day-1&quot; class=&quot;headerlink&quot; title=&quot;Javascript 30 04 - Arr</summary>
      
    
    
    
    <category term="Javascript作品" scheme="http://example.com/categories/Javascript%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>實作練習-Mars Weather - SASS project</title>
    <link href="http://example.com/2021/02/27/Mars-Weather-SASS-project/"/>
    <id>http://example.com/2021/02/27/Mars-Weather-SASS-project/</id>
    <published>2021-02-26T17:25:13.199Z</published>
    <updated>2021-03-20T14:56:02.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mars-Weather-SASS-project"><a href="#Mars-Weather-SASS-project" class="headerlink" title="Mars Weather - SASS project"></a>Mars Weather - SASS project</h1><hr><h2 id="tags-HTML-CSS-SASS-relate"><a href="#tags-HTML-CSS-SASS-relate" class="headerlink" title="tags: HTML, CSS, SASS relate"></a>tags: HTML, CSS, SASS relate</h2><h6 id="tags-HTML-CSS-SASS"><a href="#tags-HTML-CSS-SASS" class="headerlink" title="tags: HTML, CSS, SASS"></a>tags: <code>HTML, CSS, SASS</code></h6><h1 id="製作一個火星天氣觀測網頁"><a href="#製作一個火星天氣觀測網頁" class="headerlink" title="製作一個火星天氣觀測網頁"></a>製作一個火星天氣觀測網頁</h1><h2 id="成品"><a href="#成品" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/XEPEoF7.jpg"></p><p><a href="https://chiehliu.github.io/git-projects/MarsWeatherApp/index.html">成品網址</a></p><h2 id="成品功能"><a href="#成品功能" class="headerlink" title="成品功能:"></a>成品功能:</h2><ol><li>cel/fah 的按鈕可以做切換</li><li>下方的七天天氣可以點擊按鈕開關</li></ol><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="html-程式碼"><a href="#html-程式碼" class="headerlink" title="html 程式碼:"></a>html 程式碼:</h2><h1 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h1><h2 id="全域設定"><a href="#全域設定" class="headerlink" title="全域設定"></a>全域設定</h2><ul><li>全域設定 border-box 這樣做 margin, padding, border 比較方便</li><li>設定所有的顏色、文字大小以及粗細</li><li>.sr-only 主要給聽障人士使用(這邊用來隱藏元素)</li><li>body, h1, a 都是比較常見的設定</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">*,</span><br><span class="line">*::before,</span><br><span class="line">*::after &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:root &#123;</span><br><span class="line">    --fw-light: 300;</span><br><span class="line">    --fw-normal: 400;</span><br><span class="line">    --fw-semi: 500;</span><br><span class="line">    --fw-bold: 700;</span><br><span class="line">    --fs-h1: 1.5rem;</span><br><span class="line">    --fs-h2: 2.25rem;</span><br><span class="line">    --fs-body: 1rem;</span><br><span class="line">    --fs-xl: 4.5rem;</span><br><span class="line">    --clr-light: #fff;</span><br><span class="line">    --clr-gray: #989898;</span><br><span class="line">    --clr-dark: #444;</span><br><span class="line">    --clr-accent: #D06D6D;</span><br><span class="line">    --clr-accent-dark: #613131;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sr-only:not(:focus):not(:active) &#123;</span><br><span class="line">    clip: rect(0 0 0 0);</span><br><span class="line">    clip-path: inset(50%);</span><br><span class="line">    height: 1px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    position: absolute;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    width: 1px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    font-family: &#39;Montserrat&#39;, sans-serif;</span><br><span class="line">    line-height: 1.6;</span><br><span class="line">    background-image: url(https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kevin-powell&#x2F;Mars-Weather-App&#x2F;master&#x2F;img&#x2F;mars.jpg);</span><br><span class="line">    background-size: cover;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    color: var(--clr-light);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1,</span><br><span class="line">h2,</span><br><span class="line">h3 &#123;</span><br><span class="line">    line-height: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a &#123;</span><br><span class="line">    color: var(--clr-accent);</span><br><span class="line"></span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        color: var(--clr-accent-dark);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mars-current-weather"><a href="#mars-current-weather" class="headerlink" title=".mars-current-weather"></a>.mars-current-weather</h2><p><img src="https://i.imgur.com/gYmJTHU.png"></p><ul><li>做 grid 以及分三個欄位(等長)等下做使用</li><li>設定 max-width 避免拉太長跑版</li><li>背景做透明</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.mars-current-weather &#123;</span><br><span class="line">    background: rgba(0, 0, 0, .7);</span><br><span class="line">    padding: 2em;</span><br><span class="line">    max-width: 1000px;</span><br><span class="line">    margin: 4em 0 0 4em;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(3, 1fr);</span><br><span class="line">    grid-gap: 2em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-title"><a href="#main-title" class="headerlink" title=".main-title"></a>.main-title</h3><p><img src="https://i.imgur.com/nX7kr8L.png"></p><ul><li>抓取 grid 的欄位 1~-1 讓 main-title 可以延續整個面板長度</li><li>全轉成大寫</li><li>字母間距 2px(作者喜好)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.main-title &#123;</span><br><span class="line">    font-size: var(--fs-h1);</span><br><span class="line">    font-weight: var(--fw-light);</span><br><span class="line">    text-transform: uppercase;</span><br><span class="line">    color: var(--clr-accent);</span><br><span class="line">    letter-spacing: 2px;</span><br><span class="line">    grid-column: 1&#x2F;-1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="section-title"><a href="#section-title" class="headerlink" title=".section-title"></a>.section-title</h3><p>綠色框框處<br><img src="https://i.imgur.com/lRzFp5Z.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.section-title &#123;</span><br><span class="line">    font-size: var(--fs-h2);</span><br><span class="line">    font-weight: var(--fw-bold);</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>讓日期部分最大最顯眼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.section-title--date &#123;</span><br><span class="line">    font-size: var(--fs-xl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reading"><a href="#reading" class="headerlink" title=".reading"></a>.reading</h3><p>綠色框框處<br><img src="https://i.imgur.com/bwK3ooy.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.reading &#123;</span><br><span class="line">    font-size: var(--fs-h1);</span><br><span class="line">    margin: 0;</span><br><span class="line">    color: var(--clr-gray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="date"><a href="#date" class="headerlink" title=".date"></a>.date</h3><p>內容包含天次以及日期<br><img src="https://i.imgur.com/6swOmfN.png"></p><p>整個視窗的抓取位置在第一到第二欄位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.date &#123;</span><br><span class="line">    grid-column: 1&#x2F;2;</span><br><span class="line"></span><br><span class="line">    &amp;__day &#123;</span><br><span class="line">        font-size: var(--fs-h2);</span><br><span class="line">        margin: 0;</span><br><span class="line">        color: var(--clr-gray);</span><br><span class="line">        font-weight: var(--fw-light);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="temp"><a href="#temp" class="headerlink" title=".temp"></a>.temp</h3><p><img src="https://i.imgur.com/1aNYy25.png"></p><ul><li>抓取位置在第二到第三格</li><li>處理左右兩邊的格線</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.temp &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 像這邊的var設置在temp裡面所以並不能給外面使用</span><br><span class="line">    --border: solid .25em var(--clr-accent-dark);</span><br><span class="line">    grid-column: 2&#x2F;3;</span><br><span class="line">    border-left: var(--border);</span><br><span class="line">    border-right: var(--border);</span><br><span class="line">    padding: 0 2em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="wind"><a href="#wind" class="headerlink" title=".wind"></a>.wind</h3><p><img src="https://i.imgur.com/KgNXJMV.png"></p><p>第二次 grid 為了排列圓盤以及標題風速<br><img src="https://i.imgur.com/TSATGVa.png"></p><p>第三次 grid 為了排列指針<br><img src="https://i.imgur.com/OEpfQMh.png"></p><h4 id="整個-wind-區塊"><a href="#整個-wind-區塊" class="headerlink" title="整個.wind 區塊"></a>整個.wind 區塊</h4><ul><li>抓取位置在第三到第四格</li><li>在進行第二次 gird 為了讓內容物作排列</li></ul><h4 id="圓盤區域"><a href="#圓盤區域" class="headerlink" title="圓盤區域"></a>圓盤區域</h4><ul><li>進行第三次 grid 為了排列裡面的指針並且使用<code>place-items: center;</code>全置中</li><li>圓盤的部份跨越了兩個 row 所以使用<code>grid-row: 1/span 2;</code></li></ul><h4 id="指針區域"><a href="#指針區域" class="headerlink" title="指針區域"></a>指針區域</h4><ul><li>指針的部份使用 clip-path: polygon 裁剪出三角形</li><li>使用 transform 做好定位並且指向 0 度的方向</li><li>transform-origin 讓三角形的旋轉是以底部的中心點轉才不會偏調</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.wind &#123;</span><br><span class="line">    grid-column: 3&#x2F;4;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: repeat(2, 1fr);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 這一步是為了讓Wind標題與風速之間的間距縮小讓行距大小跟內容一樣</span><br><span class="line">    grid-template-rows: min-content 1fr;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;往上對齊</span><br><span class="line">    align-self: start;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;幫它們做好排列位置</span><br><span class="line">    .section-title,</span><br><span class="line">    .reading &#123;</span><br><span class="line">        grid-column: 2&#x2F;3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;圓圈的部分修飾</span><br><span class="line">    &amp;__direction &#123;</span><br><span class="line">        --size: 6rem;</span><br><span class="line">        width: var(--size);</span><br><span class="line">        height: var(--size);</span><br><span class="line">        background-color: rgba(255, 255, 255, .5);</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        display: grid;</span><br><span class="line">        place-items: center;</span><br><span class="line">        grid-row: 1&#x2F;span 2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;__arrow &#123;</span><br><span class="line">        --direction: 0deg;</span><br><span class="line">        --size: 1rem;</span><br><span class="line">        height: calc(var(--size)*3);</span><br><span class="line">        width: var(--size);</span><br><span class="line">        background: var(--clr-accent-dark);</span><br><span class="line">        clip-path: polygon(50% 0, 0% 100%, 100% 100%);</span><br><span class="line">        transform: translateY(-50%) rotate(var(--direction));</span><br><span class="line">        transform-origin: bottom center;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="info"><a href="#info" class="headerlink" title=".info"></a>.info</h3><p><img src="https://i.imgur.com/2BG9XHx.png"></p><ul><li>抓取位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.info &#123;</span><br><span class="line">    grid-column: 1&#x2F;3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="unit"><a href="#unit" class="headerlink" title=".unit"></a>.unit</h3><p>可調整式按鈕藉由 SCSS 全部製作出來!<br><img src="https://i.imgur.com/s3HT8kN.png"></p><h4 id="整個外框"><a href="#整個外框" class="headerlink" title="整個外框"></a>整個外框</h4><p><img src="https://i.imgur.com/TEn4KgA.png"></p><ul><li>先放置到位置<code>grid-column: 3/4;</code></li><li>使用 place-self:end 會把物件放到最右邊最下方</li><li>要把 unit 內部元素弄成一橫排直接 flex</li><li>做一點透明度以及 hover 時會有特效</li></ul><h4 id="input-區域的-checkbox"><a href="#input-區域的-checkbox" class="headerlink" title="input 區域的 checkbox"></a>input 區域的 checkbox</h4><p>隱藏前的樣子<br><img src="https://i.imgur.com/DMfjeRx.png"></p><ul><li>引入的 sr-only 的內容隱藏 checkbox</li></ul><h4 id="unit-toggle"><a href="#unit-toggle" class="headerlink" title="unit__toggle"></a>unit__toggle</h4><ul><li>中間的橢圓形外框修飾</li></ul><h4 id="unit-toggle-after"><a href="#unit-toggle-after" class="headerlink" title="unit__toggle::after"></a>unit__toggle::after</h4><ul><li>中間的圓球的部分點擊兩側的溫度則會移動，左側自動填滿 margin 所以球會移動到最右邊</li><li><img src="https://i.imgur.com/8FZWj2V.png"> 因為這個 checked 關係球會預設在 °C</li><li>使用<code>margin-left:auto;</code>會讓球往右邊跑因為左邊 auto 直接填滿</li><li>使用<code>margin-left: 3px;</code>會讓球回到左側因為 3px 就是原本預設的 margin</li></ul><p>偽類選擇器<code>:checked</code>只會使用在任何選中狀態下的<code>radio(&lt;input type=&quot;radio&quot;&gt;)，checkbox (&lt;input type=&quot;checkbox&quot;&gt;) 或(&quot;select&quot;) </code>元素中的 option HTML 元素(“option”)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:checked~.unit__toggle::after &#123;</span><br><span class="line">        margin-left: 3px;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">.unit &#123;</span><br><span class="line">    grid-column: 3&#x2F;4;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; place-self是align-self and justify-self的縮寫</span><br><span class="line">    &#x2F;&#x2F; 使用end會把物件放到最右邊最下方</span><br><span class="line">    place-self: end;</span><br><span class="line">    color: var(--clr-light);</span><br><span class="line">    display: flex;</span><br><span class="line">    opacity: .7;</span><br><span class="line">    transition: opacity 275ms linear;</span><br><span class="line"></span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    label &#123;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 要隱藏input區域那個圓形checkbox</span><br><span class="line">    &#x2F;&#x2F; 一樣使用sr-only的屬性貼在這邊使用</span><br><span class="line">    input &#123;</span><br><span class="line">        clip: rect(0 0 0 0);</span><br><span class="line">        &#x2F;&#x2F; 這個clip-path主要會把input的checkbox裁減掉</span><br><span class="line">        clip-path: inset(50%);</span><br><span class="line">        height: 1px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        position: absolute;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">        width: 1px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 中間按鈕的部分修飾</span><br><span class="line">    &amp;__toggle &#123;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        width: 4em;</span><br><span class="line">        border: 2px solid var(--clr-light);</span><br><span class="line">        background: transparent;</span><br><span class="line">        padding: 0;</span><br><span class="line">        &#x2F;&#x2F; vmax &#x3D; vh,vw的最大值</span><br><span class="line">        border-radius: 100vmax;</span><br><span class="line">        margin: 0 1em;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 中間圓點修飾</span><br><span class="line">        &amp;::after &#123;</span><br><span class="line">            content: &#39;&#39;;</span><br><span class="line">            display: block;</span><br><span class="line">            background: var(--clr-light);</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            height: 1rem;</span><br><span class="line">            margin: 3px;</span><br><span class="line">            width: 1rem;</span><br><span class="line">            &#x2F;&#x2F; 左側自動填滿margin所以球會移動到最右邊</span><br><span class="line">            margin-left: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 偽類選擇器:checked只會使用在任何選中狀態下的radio(&lt;input type&#x3D;&quot;radio&quot;&gt;)，checkbox (&lt;input type&#x3D;&quot;checkbox&quot;&gt;) 或(&quot;select&quot;) 元素中的option HTML元素(&quot;option&quot;)。</span><br><span class="line">    &#x2F;&#x2F; 當選中checked時則底下的after修飾也就是圓點的部分會移動回左邊只有margin:3px的狀態</span><br><span class="line">    :checked~.unit__toggle::after &#123;</span><br><span class="line">        margin-left: 3px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="previous-weather"><a href="#previous-weather" class="headerlink" title=".previous-weather"></a>.previous-weather</h2><p><img src="https://i.imgur.com/7cAFRnC.png"></p><ul><li>把整個區塊往下拉</li><li>下拉做動畫<code>transition: transform 350ms ease;</code></li></ul><h3 id="previous-weather-1"><a href="#previous-weather-1" class="headerlink" title=".previous-weather"></a>.previous-weather</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.previous-weather &#123;</span><br><span class="line">    background: var(--clr-light);</span><br><span class="line">    color: var(--clr-dark);</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 把previous-weather欄位往下60%</span><br><span class="line">    transform: translateY(60%);</span><br><span class="line">    transition: transform 350ms ease;</span><br><span class="line">    padding: 3em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="show-previous-weather"><a href="#show-previous-weather" class="headerlink" title=".show-previous-weather"></a>.show-previous-weather</h3><p><img src="https://i.imgur.com/3KYFK2x.png"></p><ul><li>設定定位上面<code>transform: translate(-50%, calc(-100% - 3rem));</code>因為整個 previou-weather 視窗 padding 是 3rem 這邊必須扣掉不然會超出去</li><li>line-height 跟其他地方一樣都設定 1</li><li>clip-path: polygon 一樣使用裁減功能成三角形</li><li>特別的地方是 font-family 必須使用繼承 inherit 才吃的到</li></ul><h4 id="span"><a href="#span" class="headerlink" title=".span"></a>.span</h4><ul><li>span 的部份做箭頭旋轉特效但這邊還沒轉顯示正常的 0 度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.show-previous-weather &#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    position: absolute;</span><br><span class="line">    background: var(--clr-light);</span><br><span class="line">    left: 50%;</span><br><span class="line">    width: 10rem;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 這邊因為在previous-weather上加入padding會使箭頭區域跑掉所以加上clac而外加上3rem來確保位置不會跑掉</span><br><span class="line">    transform: translate(-50%, calc(-100% - 3rem));</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: var(--fs-h2);</span><br><span class="line">    line-height: 1;</span><br><span class="line">    clip-path: polygon(50% 0, 0 100%, 100% 100%);</span><br><span class="line">    color: var(--clr-gray);</span><br><span class="line">    border: 0;</span><br><span class="line">    font-family: inherit;</span><br><span class="line"></span><br><span class="line">    &amp;:hover,</span><br><span class="line">    &amp;:focus &#123;</span><br><span class="line">        color: var(--clr-dark);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    span &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        transform: rotate(0);</span><br><span class="line">        transition: transform 300ms ease;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="previous-days-previous-weather-title-previous-day"><a href="#previous-days-previous-weather-title-previous-day" class="headerlink" title=".previous-days, .previous-weather__title, .previous-day"></a>.previous-days, .previous-weather__title, .previous-day</h3><p>下方的整區<br><img src="https://i.imgur.com/s2nuu2M.png"></p><ul><li>flex 直接讓他們成行排列並且 space-between 讓中間空隙一樣</li><li>title 置中</li><li>針對文字，按鈕做修飾</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">.previous-days &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.previous-weather__title &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.previous-day &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line"></span><br><span class="line">    &amp;&gt;* &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;__date &#123;</span><br><span class="line">        font-size: .9rem;</span><br><span class="line">        color: var(--clr-gray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;__more-info &#123;</span><br><span class="line">        border: 0;</span><br><span class="line">        border-radius: 100vmax;</span><br><span class="line">        background: var(--clr-dark);</span><br><span class="line">        color: var(--clr-light);</span><br><span class="line">        text-transform: uppercase;</span><br><span class="line">        padding: .3em 1em;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        margin-top: 1em;</span><br><span class="line"></span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            background: var(--clr-gray)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="show-weather-previous-weather"><a href="#show-weather-previous-weather" class="headerlink" title=".show-weather.previous-weather"></a>.show-weather.previous-weather</h3><p>這邊針對加上.show-weather 的.previous-weather 做處理也就是整個視窗移上來的時候</p><h4 id="span-1"><a href="#span-1" class="headerlink" title="span"></a>span</h4><ul><li>當視窗移動上來的時候 span 裡面的箭頭會轉 180 度</li><li>Y 軸也要調整不然會跑版</li></ul><h4 id="previous-weather-title-previous-day"><a href="#previous-weather-title-previous-day" class="headerlink" title=".previous-weather__title, .previous-day"></a>.previous-weather__title, .previous-day</h4><ul><li>做透明變成不透明特效並且製作 slideUpIn 特效</li><li>使用 forwards 讓特效結束後停在原地不繼續執行</li><li>把標題移動到左邊</li></ul><h4 id="使用-each"><a href="#使用-each" class="headerlink" title="使用@each"></a>使用@each</h4><ul><li>個別印出不同的 delay 時間做出這個特效</li></ul><p><img src="https://i.imgur.com/oUpYZDj.gif"></p><ul><li>使用 sass list 建立包含(index delay 時間)</li><li>使用 each 個別印出 list 內部所有元素</li><li>使用#{}選取動態的變數丟入 nth-child()內</li><li>使用 nth()選取 list 內部的第一位以及第二位分別貼上 nth-child,animation-delay</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$slidTime: 1 100ms,</span><br><span class="line">    2 125ms,</span><br><span class="line">    3 150ms,</span><br><span class="line">    4 175ms,</span><br><span class="line">    5 200ms,</span><br><span class="line">    6 225ms,</span><br><span class="line">    7 250ms;</span><br><span class="line"></span><br><span class="line">    @each $slide in $slidTime &#123;</span><br><span class="line">        .previous-day:nth-child(#&#123;nth($slide,1)&#125;) &#123;</span><br><span class="line">            animation-delay: #&#123;nth($slide,2)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h4><ul><li>設定透明以及標題移動特效</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">.show-weather.previous-weather &#123;</span><br><span class="line">    transform: translateY(0);</span><br><span class="line"></span><br><span class="line">    .show-previous-weather span &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        transform: rotate(180deg) translateY(-6px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .previous-weather__title,</span><br><span class="line">    .previous-day &#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">        animation: slideUpIn 750ms forwards;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .previous-weather__title &#123;</span><br><span class="line">        text-align: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 讓previous-day的資料有一個一個上來的特效</span><br><span class="line">    $slidTime: 1 100ms,</span><br><span class="line">    2 125ms,</span><br><span class="line">    3 150ms,</span><br><span class="line">    4 175ms,</span><br><span class="line">    5 200ms,</span><br><span class="line">    6 225ms,</span><br><span class="line">    7 250ms;</span><br><span class="line"></span><br><span class="line">    @each $slide in $slidTime &#123;</span><br><span class="line">        .previous-day:nth-child(#&#123;nth($slide,1)&#125;) &#123;</span><br><span class="line">            animation-delay: #&#123;nth($slide,2)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes slideUpIn &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        opacity: 0;</span><br><span class="line">        transform: translateY(50%);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">        transform: translateY(0%);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mars-Weather-SASS-project&quot;&gt;&lt;a href=&quot;#Mars-Weather-SASS-project&quot; class=&quot;headerlink&quot; title=&quot;Mars Weather - SASS project&quot;&gt;&lt;/a&gt;Mars Weat</summary>
      
    
    
    
    <category term="HTML, CSS 作品" scheme="http://example.com/categories/HTML-CSS-%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="SASS" scheme="http://example.com/tags/SASS/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="Grid" scheme="http://example.com/tags/Grid/"/>
    
  </entry>
  
</feed>
