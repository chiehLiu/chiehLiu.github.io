<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chieh Liu&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-22T11:25:16.619Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Chieh Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS-OOP Crash Course (ES5 &amp; ES6)</title>
    <link href="http://example.com/2021/03/22/JS-OOP%20Crash%20Course%20(ES5%20&amp;%20ES6)/"/>
    <id>http://example.com/2021/03/22/JS-OOP%20Crash%20Course%20(ES5%20&amp;%20ES6)/</id>
    <published>2021-03-22T11:23:44.742Z</published>
    <updated>2021-03-22T11:25:16.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-OOP-Crash-Course-ES5-amp-ES6"><a href="#JavaScript-OOP-Crash-Course-ES5-amp-ES6" class="headerlink" title="JavaScript OOP Crash Course (ES5 &amp; ES6)"></a>JavaScript OOP Crash Course (ES5 &amp; ES6)</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><p>我們先來解釋一下”<strong>物件</strong>“(object)</p><p>基本上就是一個<strong>物品</strong>，車子、人、房子等等。</p><p>其實”<strong>物件</strong>“就是用程式碼在電腦裡表達出： “這是個物品”，這樣的概念。</p><h2 id="物件的構成"><a href="#物件的構成" class="headerlink" title="物件的構成:"></a>物件的構成:</h2><ul><li>屬性(property) 這就好比車子的廠牌 大小 人的姓名年齡等等各種資訊</li><li>方法(method) 就像是物件的運行方式，車子的發動、煞車，人的吃飯睡覺行走等等</li></ul><p>用一個”物件”來形容人，上方的資料是這個人的屬性，下方的function是方法<br><img src="https://i.imgur.com/WvnsOYh.png"></p><h2 id="基本結構語法-basic-literal"><a href="#基本結構語法-basic-literal" class="headerlink" title="基本結構語法(basic literal)"></a>基本結構語法(basic literal)</h2><p>下方的程式碼解釋了應用屬性(property)的用法以及產生新的object的用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="string">&#x27;helloaaa&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (s1));</span><br><span class="line"><span class="built_in">console</span>.log(s1.toUpperCase());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這邊的 s 用typeof出來會顯示字串不是物件卻可以像object一樣使用屬性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (s2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//不過同時也可以直接把string這個屬性直接賦予他變成物件</span></span><br></pre></td></tr></table></figure><p>window是所有的物件的父母層所以基本上在撰寫的時候可以省略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">alert(<span class="number">1</span>);<span class="comment">//同樣可以執行跟上方一樣的結果</span></span><br></pre></td></tr></table></figure><p>下方的內容是一個object (.)後面接一個 property</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(navigator.appVersion);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>下方我們舉些例子說明:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book1 = &#123;</span><br><span class="line">    title: <span class="string">&#x27;Bool one&#x27;</span>,</span><br><span class="line">    author: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">    year: <span class="string">&#x27;2013&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//結果如下</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;title: &quot;Bool one&quot;, author: &quot;John Doe&quot;, year: &quot;2013&quot;&#125;</span></span><br><span class="line"><span class="comment">author: &quot;John Doe&quot;</span></span><br><span class="line"><span class="comment">title: &quot;Bool one&quot;</span></span><br><span class="line"><span class="comment">year: &quot;2013&quot;</span></span><br><span class="line"><span class="comment">__proto__: Object </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我們想要取得object裡面的key可以使用<code>Object.keys</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(book2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這邊會印出這個object的property像是[&quot;title&quot;, &quot;author&quot;, &quot;year&quot;, &quot;getSUmmary&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我們想要取得object裡面的值可以使用<code>Object.values</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(book2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//會印出含有book2 values 的 array</span></span><br></pre></td></tr></table></figure><p>如果我們想要使用其中的屬性(property)假設我們想要使用title:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book1.title);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 會印出結果  Book one</span></span><br></pre></td></tr></table></figure><h2 id="物件實字-Object-Literals"><a href="#物件實字-Object-Literals" class="headerlink" title="物件實字 (Object Literals)"></a>物件實字 (Object Literals)</h2><p>物件實字的語法重點：</p><ul><li>會用大括號表示。</li><li>裡面的屬性 (Properties) 用名值對 (name-value pairs) 表示。ex.(title: ‘Book one’,)</li><li>多個屬性以逗號 (comma) 分隔。</li><li>宣告完後，還是可以再增加 Properties 進去。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book1 = &#123;</span><br><span class="line">    title: <span class="string">&#x27;Book one&#x27;</span>,</span><br><span class="line">    author: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">    year: <span class="string">&#x27;2013&#x27;</span>,</span><br><span class="line">    getSUmmary: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1.getSUmmary());</span><br></pre></td></tr></table></figure><h2 id="建構子-constructor"><a href="#建構子-constructor" class="headerlink" title="建構子(constructor)"></a>建構子(constructor)</h2><p>用來建構很大量內容的時候可以使用就不用重複寫很多地方可以建構起來重複使用</p><p>上方的function就是建構子的部分，下面是實體化(Instatiate)建構子使用物件，所以它會印出上方建構子的內容:</p><p><img src="https://i.imgur.com/o2xs5CY.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constructor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Book Initialized..&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instatiate an Object</span></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="keyword">new</span> Book();</span><br><span class="line"><span class="keyword">const</span> book2 = <span class="keyword">new</span> Book();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1.title);</span><br><span class="line"><span class="comment">//這邊一樣可以使用這個來取的它的title &quot;Book One&quot;</span></span><br></pre></td></tr></table></figure><p>如果我們直接輸入:<br>會得到<br><img src="https://i.imgur.com/hqtZbmQ.png"></p><p><img src="https://i.imgur.com/kzLJ5sL.png"></p><p>就不需要再重複寫一次Book的內容以及它的function因為已經建構在上面了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book2.getSUmmary());</span><br></pre></td></tr></table></figure><p>這個部分在上面建構子裡面寫入function這樣之後只要使用<code>console.log(book2.getSUmmary());</code>就可以呼叫了不需要重複寫入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">title, author, year</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">    <span class="built_in">this</span>.author = author;</span><br><span class="line">    <span class="built_in">this</span>.year = year;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.getSUmmary = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型-Prototypes"><a href="#原型-Prototypes" class="headerlink" title="原型(Prototypes)"></a>原型(Prototypes)</h2><p>另一種建構方法(methods)的方式是使用<code>prototype</code></p><p>把它額外拉出來做prototype這樣一樣可以用剛剛一樣的方式取得一樣的效果<code>console.log(book2.getSUmmary());</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getSummary</span></span><br><span class="line">Book.prototype.getSUmmary = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個時候我們在印出book2會發現function已經沒有在裡面了，而是會存在下方prototype裡面，會這樣做的原因是有些時候方法(method)不一定每個物件都要使用就可以這樣把他拉出來需要得再去取用它就好</p><p><img src="https://i.imgur.com/Dioa6SV.png"></p><p>下個範例使用了兩個元素來表達想要獲取得書本歲數</p><ul><li>new Date()取的現在時間</li><li>getFullYear()取得現在年分</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getAge</span></span><br><span class="line">Book.prototype.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> years = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.year;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> is <span class="subst">$&#123;years&#125;</span> years old`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下方會解釋如何操作內容的資料</p><p>我們想要修改裡面的時間，所以設定一個新的年分並且下方設定reviesed為true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Revise / Change Year</span></span><br><span class="line">Book.prototype.revise = <span class="function"><span class="keyword">function</span> (<span class="params">newYear</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.year = newYear;</span><br><span class="line">    <span class="built_in">this</span>.revised = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book2);</span><br><span class="line">book2.revise(<span class="string">&#x27;2018&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(book2);</span><br></pre></td></tr></table></figure><p>可以得出這個結果</p><p><img src="https://i.imgur.com/BOhPzJ9.png"></p><h2 id="繼承-Inheritance"><a href="#繼承-Inheritance" class="headerlink" title="繼承(Inheritance)"></a>繼承(Inheritance)</h2><p>下方提到繼承這個特性:</p><p>創造一個Magazine來繼承Book的屬性之外還可以添加屬性使用<code>call</code>這個方法來達成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Magazine Constructor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Magazine</span>(<span class="params">title, author, year, month</span>) </span>&#123;</span><br><span class="line">    Book.call(<span class="built_in">this</span>, title, author, year);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.month = month;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Magazine Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mag1 = <span class="keyword">new</span> Magazine(<span class="string">&#x27;Mag One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;Jan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mag1);</span><br></pre></td></tr></table></figure><h3 id="Prototype-methods-Inheritance"><a href="#Prototype-methods-Inheritance" class="headerlink" title="Prototype methods Inheritance"></a>Prototype methods Inheritance</h3><p>prototype的方法卻不能直接繼承所以使用<code>create</code>這個屬性讓Magazine也可以繼承prototype<strong>所有</strong>的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Magazine.prototype = <span class="built_in">Object</span>.create(Book.prototype);</span><br></pre></td></tr></table></figure><p>因為Magazine是繼承上面Book的屬性所以在constructor的部分還是會顯示Book</p><p><img src="https://i.imgur.com/nDROuBV.png"></p><p>如果想要修改的話可以使用constructor這個使用來修改:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use Magazine as Constructor instead of Book</span></span><br><span class="line"></span><br><span class="line">Magazine.prototype.constructor = Magazine;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/tmWKXpa.png"></p><h2 id="創造-Object-create"><a href="#創造-Object-create" class="headerlink" title="創造(Object_create)"></a>創造(Object_create)</h2><p>一開始使用一個const包住兩個方法，接下來使用<code>create</code>來創建新的物件來包含這兩個方法並且下方用新增的方式來把title,author,year加進去新的object book1裡面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object Of Protos</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bookProtos = &#123;</span><br><span class="line">    getSummary: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> years = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.year;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> is <span class="subst">$&#123;years&#125;</span> years old`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="built_in">Object</span>.create(bookProtos);</span><br><span class="line">book1.title = <span class="string">&#x27;Book One&#x27;</span>;</span><br><span class="line">book1.author = <span class="string">&#x27;John Doe&#x27;</span>;</span><br><span class="line">book1.year = <span class="string">&#x27;2013&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/jzu1G7R.png"></p><p>下面這個寫法跟上面出來的結果是一樣的只是換個方式寫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book1 = <span class="built_in">Object</span>.create(bookProtos, &#123;</span><br><span class="line">    title: &#123;<span class="attr">value</span>: <span class="string">&#x27;Book One&#x27;</span>&#125;,</span><br><span class="line">    author: &#123;<span class="attr">value</span>: <span class="string">&#x27;John Doe&#x27;</span>&#125;,</span><br><span class="line">    year: &#123;<span class="attr">value</span>: <span class="string">&#x27;2013&#x27;</span>&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><hr><h2 id="ES6的東西開始"><a href="#ES6的東西開始" class="headerlink" title="ES6的東西開始"></a>ES6的東西開始</h2><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>用法跟上面的建構子很像在做一樣的事情，也一樣需要建構物件以及實體化物件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Object</span></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="keyword">new</span> Book(<span class="string">&#x27;Book One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><p>接下來放入方法進去跟前面的寫法差不多，引用跟使用的方式也差不多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getSummary</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> years = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.year;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> is <span class="subst">$&#123;years&#125;</span> years old`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">revise</span>(<span class="params">newYear</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = newYear;</span><br><span class="line">        <span class="built_in">this</span>.revised = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Object</span></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="keyword">new</span> Book(<span class="string">&#x27;Book One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br><span class="line">book1.revise(<span class="string">&#x27;2018&#x27;</span>);</span><br></pre></td></tr></table></figure><p>輸出的結果如下:</p><p><img src="https://i.imgur.com/78nS8BQ.png"></p><h3 id="靜態語法-static"><a href="#靜態語法-static" class="headerlink" title="靜態語法(static)"></a>靜態語法(static)</h3><p>會寫在class裡面，它的特性是不會被已經實體化的物件呼叫比方說，而是被類別本身(class)直接呼叫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">topBookStore</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Barnes &amp; Nobles&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//這邊就是實體化的部分所以book1無法呼叫static方法</span></span><br><span class="line">    <span class="keyword">const</span> book1 = <span class="keyword">new</span> Book(<span class="string">&#x27;Book One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//可以這樣子直接使用</span></span><br><span class="line">    <span class="built_in">console</span>.log(Book.topBookStore());</span><br></pre></td></tr></table></figure><h3 id="Subclasses"><a href="#Subclasses" class="headerlink" title="Subclasses"></a>Subclasses</h3><p>這邊很類似上面繼承的概念只是更新語法更簡潔</p><p>使用到<code>extend</code>來繼承Book的物件，然後一樣使用建構子<code>constructor</code>寫入所有的物件內容，之後使用<code>super</code>繼承物件內容，最後放入要新增的內容即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getSummary</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Magazine Subclass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Magazine</span> <span class="keyword">extends</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year, month</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(title, author, year);</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Magazine</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mag1 = <span class="keyword">new</span> Magazine(<span class="string">&#x27;Mag One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;Jan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mag1.getSummary());</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-OOP-Crash-Course-ES5-amp-ES6&quot;&gt;&lt;a href=&quot;#JavaScript-OOP-Crash-Course-ES5-amp-ES6&quot; class=&quot;headerlink&quot; title=&quot;JavaScript OOP</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-DOM Crash Course</title>
    <link href="http://example.com/2021/03/22/JS-DOM%20Crash%20Course/"/>
    <id>http://example.com/2021/03/22/JS-DOM%20Crash%20Course/</id>
    <published>2021-03-22T11:23:44.742Z</published>
    <updated>2021-03-22T11:24:19.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-DOM-Crash-Course"><a href="#JavaScript-DOM-Crash-Course" class="headerlink" title="JavaScript DOM Crash Course"></a>JavaScript DOM Crash Course</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="JavaScript-DOM-Crash-Course-Part-1"><a href="#JavaScript-DOM-Crash-Course-Part-1" class="headerlink" title="JavaScript DOM Crash Course Part - 1"></a>JavaScript DOM Crash Course Part - 1</h1><h2 id="DOM簡介"><a href="#DOM簡介" class="headerlink" title="DOM簡介"></a>DOM簡介</h2><ul><li>Document Object Model</li><li>由瀏覽器建構的樹的節點(nodes)意味著每個節點都有各自的property跟方法可以運用</li><li>JS可以被用來讀寫以及操作DOM</li><li>物件導向的呈現方式</li></ul><p><img src="https://i.imgur.com/Ph2hcZr.png"></p><h2 id="作者使用下方這個Item-Lister來做為範例教學DOM的操作"><a href="#作者使用下方這個Item-Lister來做為範例教學DOM的操作" class="headerlink" title="作者使用下方這個Item Lister來做為範例教學DOM的操作"></a>作者使用下方這個Item Lister來做為範例教學DOM的操作</h2><p><img src="https://i.imgur.com/jOdC6jX.png"></p><p>這邊的HTML可直接貼上編輯器就可以直接使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;maxcdn.bootstrapcdn.com&#x2F;bootstrap&#x2F;4.0.0-beta&#x2F;css&#x2F;bootstrap.min.css&quot;</span><br><span class="line">    integrity&#x3D;&quot;sha384-&#x2F;Y6pD6FV&#x2F;Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;</span><br><span class="line">  &lt;title&gt;Item Lister&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;header id&#x3D;&quot;main-header&quot; class&#x3D;&quot;bg-success text-white p-4 mb-3&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-6&quot;&gt;</span><br><span class="line">          &lt;h1 id&#x3D;&quot;header-title&quot;&gt;Item Lister&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-6 align-self-center&quot;&gt;</span><br><span class="line">          &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;filter&quot; placeholder&#x3D;&quot;Search Items...&quot;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;header&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;main&quot; class&#x3D;&quot;card card-body&quot;&gt;</span><br><span class="line">      &lt;h2 class&#x3D;&quot;title&quot;&gt;Add Items&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;form id&#x3D;&quot;addForm&quot; class&#x3D;&quot;form-inline mb-3&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control mr-2&quot; id&#x3D;&quot;item&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-dark&quot; value&#x3D;&quot;Submit&quot;&gt;</span><br><span class="line">      &lt;&#x2F;form&gt;</span><br><span class="line">      &lt;h2 class&#x3D;&quot;title&quot;&gt;Items&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;ul id&#x3D;&quot;items&quot; class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Item 1 &lt;button class&#x3D;&quot;btn btn-danger btn-sm float-right delete&quot;&gt;X&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Item 2 &lt;button class&#x3D;&quot;btn btn-danger btn-sm float-right delete&quot;&gt;X&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Item 3 &lt;button class&#x3D;&quot;btn btn-danger btn-sm float-right delete&quot;&gt;X&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Item 4 &lt;button class&#x3D;&quot;btn btn-danger btn-sm float-right delete&quot;&gt;X&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src&#x3D;&quot;dom.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="檢視-document-的物件"><a href="#檢視-document-的物件" class="headerlink" title="檢視 document 的物件"></a>檢視 document 的物件</h2><p><code>console.dir(document);</code></p><p>這邊會在開發者工具印出非常多的properties以及methods不過作者會挑幾個比較重要的說明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要使用document 的方法(.)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.方法)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="document常用方法介紹"><a href="#document常用方法介紹" class="headerlink" title="document常用方法介紹:"></a>document常用方法介紹:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.domain);<span class="comment">//127.0.0.1 - 可以查看網域(domain)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.URL);<span class="comment">//http://127.0.0.1:5500/index.html - 查看網址</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.title);<span class="comment">//Item Lister - 查看title</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.doctype);<span class="comment">//&lt;!DOCTYPE html&gt; - 查看檔案類型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.body);<span class="comment">// 可以在console查看body的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.head);<span class="comment">// 可以在console查看head的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.forms);<span class="comment">// 可以在console查看所有form的元素以及他的方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.links);<span class="comment">//可以在console查看link的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.images);<span class="comment">//可以在console查看images的元素</span></span><br></pre></td></tr></table></figure><p>也可以直接修改title</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/JmgXdYH.png"></p><p>下方這個方法會給我們一個HTMLCollection包含了所有的HTML元素以及很多可以使用的方法(methods)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.all);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/WEQB3tG.png"></p><p>如果我們想要擷取其中的內容:</p><p>可以這樣使用使用他的檢索號碼就可以抓取內容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.all[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ya1zcgB.png"></p><h2 id="selectors-選取器-介紹-用來抓取元素"><a href="#selectors-選取器-介紹-用來抓取元素" class="headerlink" title="selectors(選取器)介紹 用來抓取元素"></a>selectors(選取器)介紹 用來抓取元素</h2><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h3><p>輸入要選取的 id 就可以抓取選取的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;header-title&#x27;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/wljNYqG.png"></p><p>也可以把抓取的內容指派給變數使用，這樣在呼叫的時候就只要呼叫變數就好不用整串都打</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> headerTitle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;header-title&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(headerTitle);</span><br></pre></td></tr></table></figure><h3 id="textContent-amp-innerText"><a href="#textContent-amp-innerText" class="headerlink" title="textContent &amp; innerText"></a>textContent &amp; innerText</h3><p>這兩個方法可以針對選取的元素修改其文字內容</p><p>它們的不同之處在於:</p><p>textContent不會看到CSS修改的部分<br>innerText會看到CSS修改的部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把內文從item Lister改成 Hello 跟 Goodbye</span></span><br><span class="line">headerTitle.textContent = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">headerTitle.innerText = <span class="string">&#x27;Goobye&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/c7LjSGb.png"></p><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><p>用來加入新的HTML tag來加入舊的tag並不是直接取代</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">headerTitle.innerHTML = <span class="string">&#x27;&lt;h3&gt;HEllo&lt;/h3&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>原本的tag還保留<br><img src="https://i.imgur.com/OxSt9Ah.png"></p><p>使用過後修改成<code>&#39;&lt;h3&gt;HEllo&lt;/h3&gt;&#39;</code><br><img src="https://i.imgur.com/TXmXDYA.png"></p><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><p>修飾被抓取元素的CSS</p><p>選擇要使用的CSS屬性的部分不能照原本CSS格式的寫法要改成JS的寫法(camel型態的字首英文大小)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header.style.borderBottom = <span class="string">&#x27;solid 3px #000&#x27;</span>;</span><br></pre></td></tr></table></figure><p>多加了底線上去<br><img src="https://i.imgur.com/TkBcCTz.png"></p><h3 id="getElementByClassName"><a href="#getElementByClassName" class="headerlink" title="getElementByClassName"></a>getElementByClassName</h3><p>一樣會用HTMLCollection包裝好內容印出給我們</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;list-group-item&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(items);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/Ah4tqy2.png"></p><p>這邊我們可以使用<code>console.log(items[1])</code>擷取內容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(items[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/xnpMmf1.png"></p><p>並且修改選取的元素文字內容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">items[<span class="number">1</span>].textContent = <span class="string">&#x27;hello2&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/XdOdEVS.png"></p><p>也可以更改他的CSS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">items[<span class="number">1</span>].style.fontWeight = <span class="string">&#x27;bold&#x27;</span>;<span class="comment">// 字體變粗體</span></span><br><span class="line">items[<span class="number">1</span>].style.backgroundColor = <span class="string">&#x27;yellow&#x27;</span>;<span class="comment">//加上背景色黃色</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/11GKWCT.png"></p><p>CSS修飾全部選取的內容</p><p>使用下面這串是會報錯的</p><p>因為它是一個HTMLCollection沒有辦法直接使用方法，所以必須使用迴圈一個一個印出去使用方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//錯誤寫法會報錯</span></span><br><span class="line">items.style.backgroundColor = <span class="string">&#x27;#f4f4f4&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/uBADpUJ.png"></p><p>正確解法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">    items[i].style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣就可以全部都上色瞜!<br><img src="https://i.imgur.com/Sn8L3DK.png"></p><h3 id="getElementByTagName"><a href="#getElementByTagName" class="headerlink" title="getElementByTagName"></a>getElementByTagName</h3><p>這邊會的到跟上面getElementByClassName一樣的結果，因為選取的是一樣的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(li);</span><br><span class="line"><span class="built_in">console</span>.log(li[<span class="number">1</span>]);</span><br><span class="line">li[<span class="number">1</span>].textContent = <span class="string">&#x27;hello2&#x27;</span>;</span><br><span class="line">li[<span class="number">1</span>].style.fontWeight = <span class="string">&#x27;bold&#x27;</span>;</span><br><span class="line"></span><br><span class="line">li[<span class="number">1</span>].style.backgroundColor = <span class="string">&#x27;yellow&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; li.length; i++) &#123;</span><br><span class="line">    li[i].style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊的例子可以看到CSS的修飾的部分一樣會吃到item 5因為DOM Seletor這邊抓取的是tag<code>&lt;li&gt;</code><br>如果這邊處理的在getElementByClassName的話就不會出現紅色的背景因為item 5 沒有class<br><img src="https://i.imgur.com/aWdYiiV.png"></p><p><img src="https://i.imgur.com/Cy5EfQV.png"></p><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><p>可以選取任何在HTML上面的元素以及class,id都可以，並做修改跟操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> header = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#main-header&#x27;</span>);</span><br><span class="line">header.style.borderBottom = <span class="string">&#x27;solid 4px red&#x27;</span><span class="comment">//增加底線</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">input.value = <span class="string">&#x27;Hello World&#x27;</span>;<span class="comment">//改變input的value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> submit = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input[type =&quot;submit&quot;]&#x27;</span>);</span><br><span class="line">submit.value = <span class="string">&quot;Send&quot;</span>;<span class="comment">// 選取type的作法要加上[] 修改按鈕的value改成Send</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/10uRKIf.png"></p><p><img src="https://i.imgur.com/cMcCPLm.png"></p><h3 id="querySelector-CSS偽類的使用"><a href="#querySelector-CSS偽類的使用" class="headerlink" title="querySelector - CSS偽類的使用"></a>querySelector - CSS偽類的使用</h3><ul><li>如果沒有作處理就影響第一個</li><li>last-child</li><li>nth-child(i)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> item = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.list-group-item&#x27;</span>);</span><br><span class="line">item.style.color = <span class="string">&#x27;red&#x27;</span><span class="comment">//如果選取對象是複數並且沒有告訴它影響哪一個的話會影響第一個</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lastItem = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.list-group-item:last-child&#x27;</span>);<span class="comment">//偽類（ Pseudo-classes ）</span></span><br><span class="line"></span><br><span class="line">lastItem.style.color = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> secondItem = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.list-group-item:nth-child(2)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">secondItem.style.color = <span class="string">&#x27;coral&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/2rVT0TF.png"></p><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><p>可以抓取所有選取的內容HTML tags, id, class並且產一個Nodelist它是可以使用array function的!!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> titles = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.title&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(titles);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/GQselnn.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">titles[<span class="number">0</span>].textContent = <span class="string">&#x27;Hello&#x27;</span>;<span class="comment">// 當然它也可以這樣選取索引號碼後做修改</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/zqPPvpV.png"></p><h3 id="選取基數元素上色-進階處理"><a href="#選取基數元素上色-進階處理" class="headerlink" title="選取基數元素上色(進階處理):"></a>選取基數元素上色(進階處理):</h3><p>一樣使用偽類 <code>nth-child(i)</code>裝飾元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> odd = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li:nth-child(odd)&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; odd.length; i++) &#123;</span><br><span class="line">    odd[i].style.backgroundColor = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/JZHvsxu.png"></p><h1 id="JavaScript-DOM-Crash-Course-Part-2"><a href="#JavaScript-DOM-Crash-Course-Part-2" class="headerlink" title="JavaScript DOM Crash Course Part - 2"></a>JavaScript DOM Crash Course Part - 2</h1><h2 id="DOM的移動-traversing-the-DOM"><a href="#DOM的移動-traversing-the-DOM" class="headerlink" title="DOM的移動(traversing the DOM)"></a>DOM的移動(traversing the DOM)</h2><h3 id="parentNode"><a href="#parentNode" class="headerlink" title="parentNode"></a>parentNode</h3><p>抓取目前物件的parent也就是外層的物件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> itemList = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#items&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//parentNode</span></span><br><span class="line"><span class="built_in">console</span>.log(itemList.parentNode);</span><br><span class="line">itemList.parentNode.style.backgroundColor = <span class="string">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure><p>這邊抓取的是item的id它的parentNode是外層的div</p><p><img src="https://i.imgur.com/SMvczhU.png"></p><p>然後我們對它修飾CSS</p><p><img src="https://i.imgur.com/EAN1S7H.png"></p><p>並且parentNode的使用是可以疊起來的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.parentNode.parentNode.parentNode);</span><br></pre></td></tr></table></figure><p>會找的外層的外層的外層找到body去了</p><p><img src="https://i.imgur.com/iaubbVR.png"></p><h4 id="parentElement"><a href="#parentElement" class="headerlink" title="parentElement"></a>parentElement</h4><p>幾乎跟parentNode的功能一樣是可以互相替換的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.parentElement);</span><br><span class="line">itemList.parentElement.style.backgroundColor = <span class="string">&#x27;red&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(itemList.parentElement.parentElement.parentElement);</span><br></pre></td></tr></table></figure><h3 id="childNodes-不推薦使用"><a href="#childNodes-不推薦使用" class="headerlink" title="childNodes(不推薦使用)"></a>childNodes(不推薦使用)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.childNodes);</span><br></pre></td></tr></table></figure><p>中間包含的text是指斷行<br><img src="https://i.imgur.com/FHpM5v5.png"></p><p>所以當你把它們全都黏在一起時text就會消失<br><img src="https://i.imgur.com/bPek77e.png"><br>因為中間的斷行消失<br><img src="https://i.imgur.com/Uu1IXD4.png"></p><h3 id="children-推薦使用"><a href="#children-推薦使用" class="headerlink" title="children(推薦使用)"></a>children(推薦使用)</h3><ul><li>功能跟childNodes一樣不過不會顯示出進去斷行</li><li>並且呈現方式變成HTMLCollection</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.children);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ir7eVwY.png"></p><p>如果想要擷取裡面的內容:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.children[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/05rhgYt.png"></p><p>要修改選取元素的CSS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itemList.children[<span class="number">1</span>].style.backgroundColor = <span class="string">&#x27;yellow&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改其CSS為背景色黃色<br><img src="https://i.imgur.com/oTxM0NZ.png"></p><h3 id="Firstchild-不推薦使用"><a href="#Firstchild-不推薦使用" class="headerlink" title="Firstchild(不推薦使用)"></a>Firstchild(不推薦使用)</h3><p>會印出第一個元素，但是這個方法一樣會印出斷行所以基本上會印出text</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.firstChild);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/PVAXlcm.png"></p><h3 id="FirstElementChild-推薦使用"><a href="#FirstElementChild-推薦使用" class="headerlink" title="FirstElementChild(推薦使用)"></a>FirstElementChild(推薦使用)</h3><p>這個就不會印出text搂</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.firstElementChild);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Rh8e3pJ.png"></p><p>當然也可以針對它選取的元素做文字修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itemList.firstElementChild.textContent = <span class="string">&#x27;hello 1&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/bzI0VjC.png"></p><h3 id="lastchild-不推薦使用"><a href="#lastchild-不推薦使用" class="headerlink" title="lastchild(不推薦使用)"></a>lastchild(不推薦使用)</h3><p>跟firstchild相反印出最後一個元素但是缺點是會印出斷行印出text</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.firstChild);</span><br></pre></td></tr></table></figure><h3 id="LastElementChild-推薦使用"><a href="#LastElementChild-推薦使用" class="headerlink" title="LastElementChild(推薦使用)"></a>LastElementChild(推薦使用)</h3><p>不會印出斷行text以及也可以進行文字修改操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.lastElementChild);</span><br><span class="line"></span><br><span class="line">itemList.lastElementChild.textContent = <span class="string">&#x27;hello 4&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/X4jRXQF.png"></p><h3 id="nextSibling-不推薦使用"><a href="#nextSibling-不推薦使用" class="headerlink" title="nextSibling(不推薦使用)"></a>nextSibling(不推薦使用)</h3><p>會抓取sibling 下一個位於同一層的元素，一樣的缺點會抓取斷行出現text</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.nextSibling);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/mAxqpVQ.png"></p><h3 id="nextElementSibling-推薦使用"><a href="#nextElementSibling-推薦使用" class="headerlink" title="nextElementSibling(推薦使用)"></a>nextElementSibling(推薦使用)</h3><p>不會出現斷行正常抓取下一個同層元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.nextElementSibling);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/9tOolhe.png"></p><h3 id="previousSibling-不推薦使用"><a href="#previousSibling-不推薦使用" class="headerlink" title="previousSibling(不推薦使用)"></a>previousSibling(不推薦使用)</h3><p>會抓取前一個位於同一層的元素 ，一樣的缺點會抓取斷行出現text</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.previousSibling);</span><br></pre></td></tr></table></figure><h3 id="previousElemntSibling-推薦使用"><a href="#previousElemntSibling-推薦使用" class="headerlink" title="previousElemntSibling(推薦使用)"></a>previousElemntSibling(推薦使用)</h3><p>不會出現斷行正常抓取上一個同層元素</p><p>並且可以進行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(itemList.previousElementSibling);</span><br><span class="line">itemList.previousElementSibling.style.color = <span class="string">&#x27;green&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/DRQYoAD.png"></p><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3><p>創造新的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加class給div</span></span><br><span class="line">newDiv.className = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//增加id給div</span></span><br><span class="line">newDiv.id = <span class="string">&#x27;hello1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加attribute給div</span></span><br><span class="line">newDiv.setAttribute(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;hello Div&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//創造文字並指派給變數</span></span><br><span class="line"><span class="keyword">var</span> newDivText = <span class="built_in">document</span>.createTextNode(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//把文字加入div</span></span><br><span class="line">newDiv.appendChild(newDivText);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newDiv);</span><br></pre></td></tr></table></figure><p>印出的結果<br><img src="https://i.imgur.com/pZS4l73.png"></p><p>把創造出來的div放進去專案中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抓取想要放的位置</span></span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;header .container&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> h1 = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;header h1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">container.insertBefore(newDiv, h1);<span class="comment">//使用方法插入newDiv</span></span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/KurzuOc.png"></p><p>修改newDiv 的CSS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newDiv.style.fontSize = <span class="string">&#x27;30px&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/2az5Uqi.png"></p><h1 id="JavaScript-DOM-Crash-Course-Part-3"><a href="#JavaScript-DOM-Crash-Course-Part-3" class="headerlink" title="JavaScript DOM Crash Course Part - 3"></a>JavaScript DOM Crash Course Part - 3</h1><p>這個部分的主題會環繞著事件(event)</p><h2 id="事件監聽-addEventListener"><a href="#事件監聽-addEventListener" class="headerlink" title="事件監聽 (addEventListener)"></a>事件監聽 (addEventListener)</h2><p>新增一個按鍵等下作範例使用</p><p><img src="https://i.imgur.com/bLfJ37T.png"></p><p>我們可以對這個案件做事件監聽，並且在事件’click’發生的時候跑buttonClick這個function會印出’Button clicked’字樣</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, buttonClick);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buttonClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Button clicked&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/RZTW93z.png"></p><p>funciton內部的功能也可以改成改寫header-title的文字:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, buttonClick);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buttonClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//console.log(&#x27;Button clicked&#x27;);</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;header-title&#x27;</span>).textContent = <span class="string">&#x27;change&#x27;</span>;</span><br><span class="line">     <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#main&#x27;</span>).style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>點擊Click Here後Title的文字會變成change並且背景色改變為紅色</p><p><img src="https://i.imgur.com/FuNkv2p.png"></p><h3 id="印出事件本身"><a href="#印出事件本身" class="headerlink" title="印出事件本身"></a>印出事件本身</h3><p>會出現很多事件本身可以使用的方法(properties)例如 滑鼠位置 className altkey等等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, buttonClick);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buttonClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只擷取一部份<br><img src="https://i.imgur.com/3bihVBZ.png"></p><h3 id="properties使用方式介紹跟結果"><a href="#properties使用方式介紹跟結果" class="headerlink" title="properties使用方式介紹跟結果:"></a>properties使用方式介紹跟結果:</h3><p>這邊列出的properties都可以在上面印出來的MouseEvent裡面找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, buttonClick);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buttonClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e.target);<span class="comment">// 印出觸發事件本身的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(e.target.id);<span class="comment">// 印出觸發事件本身的元素的id</span></span><br><span class="line"><span class="built_in">console</span>.log(e.target.className);<span class="comment">//印出觸發事件本身的元素的className</span></span><br><span class="line"><span class="built_in">console</span>.log(e.target.classList);<span class="comment">// 印出觸發事件本身的元素classList 使用DOMTokenList</span></span><br><span class="line"><span class="built_in">console</span>.log(e.type);<span class="comment">//印出觸發事件本身的type是甚麼</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以這樣操作把取得的id文字加入欄位中用文字串接的方式</span></span><br><span class="line"><span class="keyword">var</span> output = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;output123&#x27;</span>);</span><br><span class="line">output.innerHTML = <span class="string">&#x27;&lt;h3&gt;&#x27;</span>+e.target.id+<span class="string">&#x27;&lt;/h3&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>印出的結果<br><img src="https://i.imgur.com/4MgIsuz.png"></p><p>把取得的id文字加入欄位中用文字串接的方式<br><img src="https://i.imgur.com/hwflr7y.png"></p><h3 id="滑鼠位置擷取"><a href="#滑鼠位置擷取" class="headerlink" title="滑鼠位置擷取"></a>滑鼠位置擷取</h3><ul><li>clientX,Y 滑鼠在瀏覽器上的位置</li><li>offsetX,Y 滑鼠在物件元素上面的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buttonClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e.clientX);</span><br><span class="line"><span class="built_in">console</span>.log(e.clientY);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(e.offsetX);</span><br><span class="line"><span class="built_in">console</span>.log(e.offsetY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當點擊Click Here之後會印出它們的位置:<br><img src="https://i.imgur.com/w9it4nW.png"></p><h3 id="判斷是否按住該按鍵進而可以做不同的功能"><a href="#判斷是否按住該按鍵進而可以做不同的功能" class="headerlink" title="判斷是否按住該按鍵進而可以做不同的功能"></a>判斷是否按住該按鍵進而可以做不同的功能</h3><p>當按住該按鍵的時候會顯示true放開則顯示false，可以用做if判斷式來做不同的功能</p><p>如:<br>當按住alt時，顯示XXX之類的功能</p><ul><li>altKey</li><li>ctrlKey</li><li>shiftKey</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buttonClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(e.altKey);</span><br><span class="line"><span class="built_in">console</span>.log(e.ctrlKey);</span><br><span class="line"><span class="built_in">console</span>.log(e.shiftKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="滑鼠事件簡介-一個小練習"><a href="#滑鼠事件簡介-一個小練習" class="headerlink" title="滑鼠事件簡介+一個小練習"></a>滑鼠事件簡介+一個小練習</h3><ul><li>click</li><li>dblclick</li><li>mousedown</li><li>mouseup</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"></span><br><span class="line">button.addEventListener(<span class="string">&#x27;click&#x27;</span>, runEvent);<span class="comment">//單點擊啟動事件</span></span><br><span class="line">button.addEventListener(<span class="string">&#x27;dblclick&#x27;</span>, runEvent);<span class="comment">//雙點擊啟動事件</span></span><br><span class="line">button.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, runEvent);<span class="comment">//按下去瞬間就啟動事件</span></span><br><span class="line">button.addEventListener(<span class="string">&#x27;mouseup&#x27;</span>, runEvent);<span class="comment">//滑鼠放開瞬間就啟動事件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Event type:&#x27;</span>+e.type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>印出的類型:<br><img src="https://i.imgur.com/rc09izl.png"></p><h4 id="為了展示mouseenter-event創造一個新的黃色div"><a href="#為了展示mouseenter-event創造一個新的黃色div" class="headerlink" title="為了展示mouseenter event創造一個新的黃色div"></a>為了展示mouseenter event創造一個新的黃色div</h4><p><img src="https://i.imgur.com/2UWxHep.png"></p><h5 id="mouseenter-amp-mouseleave-mouseover-amp-mouseout"><a href="#mouseenter-amp-mouseleave-mouseover-amp-mouseout" class="headerlink" title="mouseenter &amp; mouseleave / mouseover &amp; mouseout"></a>mouseenter &amp; mouseleave / mouseover &amp; mouseout</h5><p>當滑鼠進出的瞬間就會印出方法runEvent</p><p>他們的功能很像不過有差異:</p><p>mouseenter &amp; mouseleave只會在進出物件的時候會觸發<br>mouseover &amp; mouseout 則是除了進出之外碰到內部的子元素(這邊的例子是HELLO)都會觸發</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">box.addEventListener(<span class="string">&#x27;mouseenter&#x27;</span>, runEvent);</span><br><span class="line">box.addEventListener(<span class="string">&#x27;mouseleave&#x27;</span>, runEvent);</span><br><span class="line">box.addEventListener(<span class="string">&#x27;mouseover&#x27;</span>, runEvent);</span><br><span class="line">box.addEventListener(<span class="string">&#x27;mouseout&#x27;</span>, runEvent);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Event type:&#x27;</span>+e.type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/AzlLPxM.png"></p><h4 id="mousemove"><a href="#mousemove" class="headerlink" title="mousemove"></a>mousemove</h4><p>當滑鼠在物件內移動時觸發事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"></span><br><span class="line">box.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, runEvent);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Event type:&#x27;</span>+e.type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常觸發次數很高<br><img src="https://i.imgur.com/rzgJcmH.png"></p><h4 id="加上滑鼠的位置呈現在頁面上"><a href="#加上滑鼠的位置呈現在頁面上" class="headerlink" title="加上滑鼠的位置呈現在頁面上"></a>加上滑鼠的位置呈現在頁面上</h4><p>先抓取id後並指派給output變數，抓取box id指派給box變數，<br>並把box加入事件監聽使用mousemove並印出它的value呈現在頁面上</p><p>這個output的位置<br><img src="https://i.imgur.com/3iuiubk.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> output = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;output123&#x27;</span>);</span><br><span class="line"></span><br><span class="line">box.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, runEvent);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    output.innerHTML = <span class="string">&#x27;&lt;h3&gt;MouseX: &#x27;</span>+e.offsetX+<span class="string">&#x27;&lt;h/3&gt;&lt;h3&gt;MouseY:&#x27;</span>+e.offsetY+<span class="string">&#x27;&lt;/h/3&gt;&#x27;</span>;<span class="comment">//這邊修改它的HTML內容加入新的&lt;h3&gt;tag以及滑鼠位置</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>印出來的結果位置:<br><img src="https://i.imgur.com/Uw02oHL.png"></p><h4 id="下一步我們要做的事情是把抓取到的滑鼠座標位置轉換成RGB的數字，進而讓我們在物件內移動滑鼠的時候改變顏色"><a href="#下一步我們要做的事情是把抓取到的滑鼠座標位置轉換成RGB的數字，進而讓我們在物件內移動滑鼠的時候改變顏色" class="headerlink" title="下一步我們要做的事情是把抓取到的滑鼠座標位置轉換成RGB的數字，進而讓我們在物件內移動滑鼠的時候改變顏色"></a>下一步我們要做的事情是把抓取到的滑鼠座標位置轉換成RGB的數字，進而讓我們在物件內移動滑鼠的時候改變顏色</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> output = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;output123&#x27;</span>);</span><br><span class="line"></span><br><span class="line">box.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, runEvent);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">box.style.backgroundColor = <span class="string">&quot;rgb(&quot;</span>+e.offsetX+<span class="string">&quot;,&quot;</span>+e.offsetY+<span class="string">&quot;,40)&quot;</span>;</span><br><span class="line">    <span class="comment">//直接操作boxCSS修改其背景色為RGB並使用字串串接的方式改變RGB的顏色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果如下:<br><img src="https://i.imgur.com/wQzj2fS.gif"></p><h3 id="處理上方的Add-items"><a href="#處理上方的Add-items" class="headerlink" title="處理上方的Add items"></a>處理上方的Add items</h3><p><img src="https://i.imgur.com/f34bXa1.png"></p><h4 id="當輸入文字在input區的時候就會觸發事件"><a href="#當輸入文字在input區的時候就會觸發事件" class="headerlink" title="當輸入文字在input區的時候就會觸發事件"></a>當輸入文字在input區的時候就會觸發事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> itemInput = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input[type=&quot;text&quot;]&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"></span><br><span class="line">itemInput.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, runEvent);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;Event type:&#x27;</span>+e.type);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/S6UME9Q.gif"></p><h3 id="簡介一些其他Event"><a href="#簡介一些其他Event" class="headerlink" title="簡介一些其他Event"></a>簡介一些其他Event</h3><ul><li>keydown  按下鍵盤時觸發</li><li>keyup    離開按紐時觸發</li><li>keypress 按住按紐時觸發</li><li>focus    按在input中的時候觸發</li><li>blur     離開focus時觸發</li><li>cut      剪下內容時觸發</li><li>paste    貼上內容時觸發</li><li>input    在input內部做的任何事情跟內文有關係的打字剪下貼上等等都會觸發</li><li>change   當抓取物件發生改變的時候觸發</li><li>submit   當按下submit按鍵後觸發</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">itemInput.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, runEvent);</span><br><span class="line">itemInput.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, runEvent);</span><br><span class="line">itemInput.addEventListener(<span class="string">&#x27;keypress&#x27;</span>, runEvent);</span><br><span class="line"></span><br><span class="line">itemInput.addEventListener(<span class="string">&#x27;focus&#x27;</span>, runEvent);</span><br><span class="line">itemInput.addEventListener(<span class="string">&#x27;blur&#x27;</span>, runEvent);</span><br><span class="line"></span><br><span class="line">itemInput.addEventListener(<span class="string">&#x27;cut&#x27;</span>, runEvent);</span><br><span class="line">itemInput.addEventListener(<span class="string">&#x27;paste&#x27;</span>, runEvent);</span><br><span class="line"></span><br><span class="line">itemInput.addEventListener(<span class="string">&#x27;input&#x27;</span>, runEvent);</span><br><span class="line">itemInput.addEventListener(<span class="string">&#x27;change&#x27;</span>, runEvent);</span><br><span class="line"></span><br><span class="line">itemInput.addEventListener(<span class="string">&#x27;submit&#x27;</span>, runEvent);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="讓輸入的文字內容完整地呈現在瀏覽器上"><a href="#讓輸入的文字內容完整地呈現在瀏覽器上" class="headerlink" title="讓輸入的文字內容完整地呈現在瀏覽器上"></a>讓輸入的文字內容完整地呈現在瀏覽器上</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> itemInput = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input[type=&quot;text&quot;]&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"></span><br><span class="line">itemInput.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, runEvent);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;Event type:&#x27;</span>+e.type);</span><br><span class="line"></span><br><span class="line">     <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">     <span class="comment">//這邊抓取要呈現的地方也就是output123，並使用innerHTML修改內部內容使用文字串接e.target.value的方式呈現</span></span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">&#x27;output123&#x27;</span>).innerHTML = <span class="string">&#x27;&lt;h3&gt;&#x27;</span>+e.target.value+<span class="string">&#x27;&lt;/h3&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果<br><img src="https://i.imgur.com/atvgRy2.png"></p><h4 id="當選取下拉式選單的時候觸發事件使用”change”事件"><a href="#當選取下拉式選單的時候觸發事件使用”change”事件" class="headerlink" title="當選取下拉式選單的時候觸發事件使用”change”事件"></a>當選取下拉式選單的時候觸發事件使用”change”事件</h4><p>一點選下拉選單就會觸發事件並印出事件類型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> select = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;select&#x27;</span>);</span><br><span class="line"></span><br><span class="line">select.addEventListener(<span class="string">&#x27;change&#x27;</span>, runEvent);</span><br><span class="line"><span class="comment">// select.addEventListener(&#x27;input&#x27;, runEvent);  使用input也行得通會產生一樣的結果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;Event type:&#x27;</span>+e.type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/vqeog9W.png"></p><h4 id="印出選取的下拉式選單的值"><a href="#印出選取的下拉式選單的值" class="headerlink" title="印出選取的下拉式選單的值"></a>印出選取的下拉式選單的值</h4><p>使用<code>console.log(e.target.value);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> select = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;select&#x27;</span>);</span><br><span class="line"></span><br><span class="line">select.addEventListener(<span class="string">&#x27;change&#x27;</span>, runEvent);</span><br><span class="line"><span class="comment">// select.addEventListener(&#x27;input&#x27;, runEvent);  使用input也行得通會產生一樣的結果</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;Event type:&#x27;</span>+e.type);</span><br><span class="line">    <span class="built_in">console</span>.log(e.target.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/kVxXxvy.png"></p><h4 id="按下submit按鍵後印出type"><a href="#按下submit按鍵後印出type" class="headerlink" title="按下submit按鍵後印出type"></a>按下submit按鍵後印出type</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"></span><br><span class="line">form.addEventListener(<span class="string">&#x27;submit&#x27;</span>, runEvent);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;Event type:&#x27;</span>+e.type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/7oZqkGu.png"></p><h1 id="JavaScript-DOM-Crash-Course-Part-4"><a href="#JavaScript-DOM-Crash-Course-Part-4" class="headerlink" title="JavaScript DOM Crash Course Part - 4"></a>JavaScript DOM Crash Course Part - 4</h1><p>使用上面三個part做出一個真正的小作品來呈現</p><p><a href="https://codepen.io/bradtraversy/pen/Bwapow">作品程式碼</a></p><p>作品Item Lister<br><img src="https://i.imgur.com/cwzFqpF.png"></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能:"></a>功能:</h2><ul><li>可以在Add items品項並且在submit後加入下方的items</li><li>點X有刪除功能</li><li>右上角可以搜尋已加入的items(filter)</li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML:"></a>HTML:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;header id&#x3D;&quot;main-header&quot; class&#x3D;&quot;bg-success text-white p-4 mb-3&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-6&quot;&gt;</span><br><span class="line">            &lt;h1 id&#x3D;&quot;header-title&quot;&gt;Item Lister&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-6 align-self-center&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;filter&quot; placeholder&#x3D;&quot;Search Items...&quot;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;header&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;main&quot; class&#x3D;&quot;card card-body&quot;&gt;</span><br><span class="line">    &lt;h2 class&#x3D;&quot;title&quot;&gt;Add Items&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;form id&#x3D;&quot;addForm&quot; class&#x3D;&quot;form-inline mb-3&quot;&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control mr-2&quot; id&#x3D;&quot;item&quot;&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-dark&quot; value&#x3D;&quot;Submit&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;h2 class&#x3D;&quot;title&quot;&gt;Items&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;ul id&#x3D;&quot;items&quot; class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Item 1 &lt;button class&#x3D;&quot;btn btn-danger btn-sm float-right delete&quot;&gt;X&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Item 2 &lt;button class&#x3D;&quot;btn btn-danger btn-sm float-right delete&quot;&gt;X&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Item 3 &lt;button class&#x3D;&quot;btn btn-danger btn-sm float-right delete&quot;&gt;X&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Item 4 &lt;button class&#x3D;&quot;btn btn-danger btn-sm float-right delete&quot;&gt;X&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;dom.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h2 id="JS"><a href="#JS" class="headerlink" title="JS:"></a>JS:</h2><h3 id="取得submit的值並且加入Items最底層"><a href="#取得submit的值並且加入Items最底層" class="headerlink" title="取得submit的值並且加入Items最底層"></a>取得submit的值並且加入Items最底層</h3><p>輸入123最底部加入123<br><img src="https://i.imgur.com/jXzzTOJ.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//設置兩個變數並且指派抓取好的 form,item 區域</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">&quot;addForm&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> itemList = <span class="built_in">document</span>.getElementById(<span class="string">&quot;items&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//form submit event  設置form區域submit事件並且設置新的funciton addItem來加入新的items</span></span><br><span class="line">form.addEventListener(<span class="string">&quot;submit&quot;</span>, addItem);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add item 處理addItem內函式功能的身體</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItem</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get input value 用抓取到的變數加上(.value)來抓輸入的值</span></span><br><span class="line">  <span class="keyword">var</span> newItem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;item&quot;</span>).value;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//create new li element 要增加新欄位到Items下面所以創造一個&quot;li&quot;</span></span><br><span class="line">  <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//add class 其他li有的class他也得加上去</span></span><br><span class="line">  li.className = <span class="string">&quot;list-group-item&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//add text node with input value這邊因為createTextNode是document的方法所以得這樣使用</span></span><br><span class="line">  li.appendChild(<span class="built_in">document</span>.createTextNode(newItem));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// add del button element 抓取button</span></span><br><span class="line">  <span class="keyword">var</span> deleteBtn = <span class="built_in">document</span>.createElement(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add classes to delete button 創造className</span></span><br><span class="line">  deleteBtn.className = <span class="string">&#x27;btn btn-danger btn-sm float-right delete&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//append text node 把&quot;X&quot;加給delete btn</span></span><br><span class="line">  deleteBtn.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&#x27;X&#x27;</span>));</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//append button to li 把delete btn 加到li</span></span><br><span class="line">  li.appendChild(deleteBtn);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// append li to list 把il加到list</span></span><br><span class="line">  itemList.appendChild(li);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="刪除加入的items"><a href="#刪除加入的items" class="headerlink" title="刪除加入的items"></a>刪除加入的items</h3><p><code>confirm()</code><br>用來跳出需要使用者確認的對話視窗，對話視窗中會有確定及取消兩個按鈕。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//delete event 做點擊事件</span></span><br><span class="line">itemList.addEventListener(<span class="string">&#x27;click&#x27;</span>, deleteItem);</span><br><span class="line"></span><br><span class="line"><span class="comment">//remove item</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteItem</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//這邊再判斷是否點擊的元素有包含delete這個class不然點整條form都會delete掉</span></span><br><span class="line">    <span class="keyword">if</span> (e.target.classList.contains(<span class="string">&#x27;delete&#x27;</span>))</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="comment">//這邊在使用confirm這個跳出視窗做判斷點擊是的話則執行</span></span><br><span class="line">        <span class="keyword">if</span> (confirm(<span class="string">&quot;Are you sure you want to delete?&quot;</span>)) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">//這邊把的e參數因為上面的判斷所以已經侷限在delete btn裡面了所以她的parentElement就是li也就是我們要刪除的對象</span></span><br><span class="line">            <span class="keyword">var</span> li = e.target.parentElement;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//使用刪除removeChild元素li</span></span><br><span class="line">            itemList.removeChild(li);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filter篩選內容"><a href="#filter篩選內容" class="headerlink" title="filter篩選內容"></a>filter篩選內容</h3><p><code>indexOf() </code></p><p>方法返回啟動它的對像String中第一次出現的指定值的索引，從fromIndex處進行搜索。<strong>如果未找到該值，則返回-1。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//抓到filter這個id</span></span><br><span class="line"><span class="keyword">var</span> filter = <span class="built_in">document</span>.getElementById(<span class="string">&quot;filter&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//filter event 創造事件keyup打字觸發事件發動filterItems</span></span><br><span class="line">filter.addEventListener(<span class="string">&quot;keyup&quot;</span>, filterItems);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// filterItems</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterItems</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// convert text to lowercase</span></span><br><span class="line">    <span class="keyword">var</span> text = e.target.value.toLowerCase();</span><br><span class="line">    <span class="comment">//get lis</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// var items = itemList.getElementsByTagName(&#x27;li&#x27;);</span></span><br><span class="line">    <span class="keyword">var</span> items = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//convert to an array</span></span><br><span class="line">    <span class="comment">//這邊因為想要使用forEach這個array方法所以直接把items轉換成array</span></span><br><span class="line">    <span class="built_in">Array</span>.from(items).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//這邊要使用firstChild來抓取item前面的名字不然就會連後面的&quot;X&quot;一起抓進來</span></span><br><span class="line">        <span class="keyword">var</span> itemName = item.firstChild.textContent;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//抓進來的itemName一樣轉小寫，並使用indexOf判斷text是否不是-1(-1代表沒找到一樣的字串)</span></span><br><span class="line">        <span class="comment">//不是-1則執行下方的display 顯示出來</span></span><br><span class="line">        <span class="comment">//是-1則執行displaynone因為不一樣</span></span><br><span class="line">        <span class="keyword">if</span> (itemName.toLowerCase().indexOf(text) != -<span class="number">1</span>) &#123;</span><br><span class="line">            item.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            item.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-DOM-Crash-Course&quot;&gt;&lt;a href=&quot;#JavaScript-DOM-Crash-Course&quot; class=&quot;headerlink&quot; title=&quot;JavaScript DOM Crash Course&quot;&gt;&lt;/a&gt;JavaS</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-JavaScript Higher Order Functions &amp; Arrays (Vanilla JavaScript)</title>
    <link href="http://example.com/2021/03/22/JS-JavaScript%20Higher%20Order%20Functions%20&amp;%20Arrays%20(Vanilla%20JavaScript)/"/>
    <id>http://example.com/2021/03/22/JS-JavaScript%20Higher%20Order%20Functions%20&amp;%20Arrays%20(Vanilla%20JavaScript)/</id>
    <published>2021-03-22T11:21:35.872Z</published>
    <updated>2021-03-22T11:22:30.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Higher-Order-Functions-amp-Arrays-Vanilla-JavaScript"><a href="#JavaScript-Higher-Order-Functions-amp-Arrays-Vanilla-JavaScript" class="headerlink" title="JavaScript Higher Order Functions &amp; Arrays (Vanilla JavaScript)"></a>JavaScript Higher Order Functions &amp; Arrays (Vanilla JavaScript)</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備:"></a>事前準備:</h1><p>待會要處理的資料</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> companies= [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company One&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Finance&quot;</span>, <span class="attr">start</span>: <span class="number">1981</span>, <span class="attr">end</span>: <span class="number">2004</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Two&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Retail&quot;</span>, <span class="attr">start</span>: <span class="number">1992</span>, <span class="attr">end</span>: <span class="number">2008</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Three&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Auto&quot;</span>, <span class="attr">start</span>: <span class="number">1999</span>, <span class="attr">end</span>: <span class="number">2007</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Four&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Retail&quot;</span>, <span class="attr">start</span>: <span class="number">1989</span>, <span class="attr">end</span>: <span class="number">2010</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Five&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Technology&quot;</span>, <span class="attr">start</span>: <span class="number">2009</span>, <span class="attr">end</span>: <span class="number">2014</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Six&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Finance&quot;</span>, <span class="attr">start</span>: <span class="number">1987</span>, <span class="attr">end</span>: <span class="number">2010</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Seven&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Auto&quot;</span>, <span class="attr">start</span>: <span class="number">1986</span>, <span class="attr">end</span>: <span class="number">1996</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Eight&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Technology&quot;</span>, <span class="attr">start</span>: <span class="number">2011</span>, <span class="attr">end</span>: <span class="number">2016</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;Company Nine&quot;</span>, <span class="attr">category</span>: <span class="string">&quot;Retail&quot;</span>, <span class="attr">start</span>: <span class="number">1981</span>, <span class="attr">end</span>: <span class="number">1989</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ages = [<span class="number">33</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">54</span>, <span class="number">21</span>, <span class="number">44</span>, <span class="number">61</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">45</span>, <span class="number">25</span>, <span class="number">64</span>, <span class="number">32</span>];</span><br></pre></td></tr></table></figure><h1 id="forEach-逐個印出"><a href="#forEach-逐個印出" class="headerlink" title="forEach 逐個印出"></a>forEach 逐個印出</h1><h2 id="使用for作範例"><a href="#使用for作範例" class="headerlink" title="使用for作範例"></a>使用for作範例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; companies.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(companies[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/ebpS8lu.png"></p><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><ul><li>是一個比較好的方法來跑array的迴圈相較於一般的for迴圈並且不會return東西回來</li><li>是個比較優雅的方式處理資料</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//這邊做的印出每一個物件</span></span><br><span class="line">companies.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">company</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(company);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//當然也可以取用裡面的資料</span></span><br><span class="line"></span><br><span class="line">companies.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">company</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(company.name);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>印出結果:<br>跟for跑出來的結果一模一樣，但比較淺顯易懂就是使用了一個forEach方法省去了很多複雜的條件<br><img src="https://i.imgur.com/ebpS8lu.png"></p><p>取用裡面的name資料印出的結果<br><img src="https://i.imgur.com/6NB9sFX.png"></p><h1 id="filter-篩選功能"><a href="#filter-篩選功能" class="headerlink" title="filter 篩選功能"></a>filter 篩選功能</h1><h2 id="練習一"><a href="#練習一" class="headerlink" title="練習一:"></a>練習一:</h2><p>篩選 ages 這個array裡面大於等於21歲的人<br><img src="https://i.imgur.com/YhViXk1.png"></p><h2 id="使用for作範例-1"><a href="#使用for作範例-1" class="headerlink" title="使用for作範例"></a>使用for作範例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canDrink = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ages.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ages[i] &gt;= <span class="number">21</span>) &#123;</span><br><span class="line">        canDrink.push(ages[i]); <span class="comment">//使用push把符合條件的人推進去</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(canDrink);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/WgyScBp.png"></p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canDrink = ages.filter(<span class="function"><span class="keyword">function</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (age &gt;= <span class="number">21</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(canDrink);</span><br></pre></td></tr></table></figure><p>甚至使用ES6語法的箭頭函式可以更簡潔:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canDrink = ages.filter(<span class="function"><span class="params">age</span> =&gt;</span> age &gt;= <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(canDrink);</span><br></pre></td></tr></table></figure><p>印出結果:<br>一樣不需要處理條件式且比較簡潔也不需要而外多使用其他的方法<br><img src="https://i.imgur.com/WgyScBp.png"></p><h2 id="練習二"><a href="#練習二" class="headerlink" title="練習二:"></a>練習二:</h2><p>抓出companies資料裡面含有’Retail內容的物件</p><h2 id="使用ES5的寫法"><a href="#使用ES5的寫法" class="headerlink" title="使用ES5的寫法"></a>使用ES5的寫法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> retailCompanies = companies.filter(<span class="function"><span class="keyword">function</span> (<span class="params">company</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (company.category === <span class="string">&#x27;Retail&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(retailCompanies);</span><br></pre></td></tr></table></figure><h2 id="ES6箭頭函式的寫法"><a href="#ES6箭頭函式的寫法" class="headerlink" title="ES6箭頭函式的寫法"></a>ES6箭頭函式的寫法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> retailCompanies = companies.filter(<span class="function"><span class="params">company</span> =&gt;</span> company.category === <span class="string">&#x27;Retail&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(retailCompanies);</span><br></pre></td></tr></table></figure><p>印出結果會一樣:<br><img src="https://i.imgur.com/4M3q9Oj.png"></p><h2 id="練習三"><a href="#練習三" class="headerlink" title="練習三:"></a>練習三:</h2><p>篩選公司成立時間在1980年代</p><p>主要篩選companies 的start區塊作時間上的判斷</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eightiesCompanies = companies.filter(<span class="function"><span class="params">company</span> =&gt;</span> (company.start &gt;= <span class="number">1980</span> &amp;&amp; company.start &lt; <span class="number">1990</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(eightiesCompanies)</span><br></pre></td></tr></table></figure><p>印出結果:</p><p><img src="https://i.imgur.com/x1PBpe5.png"></p><h2 id="練習四"><a href="#練習四" class="headerlink" title="練習四:"></a>練習四:</h2><p>篩選出所有成立超過或是等於十年的公司</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lastedTenYears = companies.filter(<span class="function"><span class="params">company</span> =&gt;</span> (company.end - company.start &gt;= <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lastedTenYears);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/zuEWelh.png"></p><h1 id="map-印出資料-新的array-並且操作他們"><a href="#map-印出資料-新的array-並且操作他們" class="headerlink" title="map 印出資料(新的array)並且操作他們"></a>map 印出資料(新的array)並且操作他們</h1><p>除了篩選資料之外我們還可以創造新的array從現存的array中<br>並且對新的array做各種操作</p><h2 id="練習一-1"><a href="#練習一-1" class="headerlink" title="練習一:"></a>練習一:</h2><p>把所有的公司名稱取出來並放入一個新的array</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> companyNames = companies.map(<span class="function"><span class="keyword">function</span> (<span class="params">company</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> company.name</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(companyNames);</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>一個全新的array包含了公司名稱<br><img src="https://i.imgur.com/gKHMYRC.png"></p><h2 id="練習二-1"><a href="#練習二-1" class="headerlink" title="練習二:"></a>練習二:</h2><p>可以操作map取得的新array:</p><p>放入公司名稱跟年份組成新的arra</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testMap = companies.map(<span class="function"><span class="params">company</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;company.name&#125;</span>[<span class="subst">$&#123;company.start&#125;</span> - <span class="subst">$&#123;company.end&#125;</span>]`</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(testMap);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/CQ5MNjw.png"></p><h2 id="練習三-1"><a href="#練習三-1" class="headerlink" title="練習三:"></a>練習三:</h2><p>對map的新array做數字上面的處理</p><p>把數字開平方</p><p>把數字乘2</p><p>把數字開平方後乘2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> agesSquare = ages.map(<span class="function"><span class="params">age</span> =&gt;</span> <span class="built_in">Math</span>.sqrt(age));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(agesSquare);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> agesTimesTwo = ages.map(<span class="function"><span class="params">age</span> =&gt;</span> age * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(agesTimesTwo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 甚至可以把它們做串接處理</span></span><br><span class="line"><span class="keyword">const</span> agesMap = ages</span><br><span class="line">    .map(<span class="function"><span class="params">age</span> =&gt;</span> <span class="built_in">Math</span>.sqrt(age))</span><br><span class="line">    .map(<span class="function"><span class="params">age</span> =&gt;</span> age * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(agesMap);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>印出結果:</p><p>開平方<br><img src="https://i.imgur.com/t0Gbuob.png"></p><p>乘2<br><img src="https://i.imgur.com/qTnAnZK.png"></p><p>開平方後乘2<br><img src="https://i.imgur.com/Siwzx2V.png"></p><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p>如果我們不對sort做任何處理的話會這樣安排:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedAges = ages.sort();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortedAges);</span><br></pre></td></tr></table></figure><p>看似是由大到小但是有個小問題在於其實只比較了第一個數字然後再比較第二位所以5竟然排在那麼下面顯然不太合理(對一般使用的情況下)<br><img src="https://i.imgur.com/qXvWpx0.png"></p><h2 id="一般我們會這樣處理sort"><a href="#一般我們會這樣處理sort" class="headerlink" title="一般我們會這樣處理sort:"></a>一般我們會這樣處理sort:</h2><p>讓順序由大排到小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedAges = ages.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortedAges);</span><br></pre></td></tr></table></figure><p>由小排到大</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedAges = ages.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> b-a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortedAges);</span><br></pre></td></tr></table></figure><h2 id="練習一-2"><a href="#練習一-2" class="headerlink" title="練習一:"></a>練習一:</h2><p>分類公司藉著他們的開始年分 最早排到最晚</p><p>一次比較兩個公司如果a&gt;b 則顯示-1排前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortedCompanies = companies.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a.start &gt; b.start ? <span class="number">1</span> : -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortedCompanies);</span><br></pre></td></tr></table></figure><p>印出的結果:<br><img src="https://i.imgur.com/5OueGVc.png"></p><h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><p>作加總，記得寫法reduce(參數1,參數2){function(){},0}後面的0要記得寫</p><h2 id="練習一-3"><a href="#練習一-3" class="headerlink" title="練習一:"></a>練習一:</h2><p>加總ages所有的數字和</p><h2 id="使用for範例"><a href="#使用for範例" class="headerlink" title="使用for範例"></a>使用for範例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ageSum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ages.length; i++) &#123;</span><br><span class="line">    ageSum += ages[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ageSum);</span><br></pre></td></tr></table></figure><p>得出加總的數字為:460</p><h2 id="使用reduce"><a href="#使用reduce" class="headerlink" title="使用reduce"></a>使用reduce</h2><h2 id="Es5語法"><a href="#Es5語法" class="headerlink" title="Es5語法:"></a>Es5語法:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ageSum = ages.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">total, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> total + age;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ageSum);</span><br></pre></td></tr></table></figure><p>得出加總的數字為:460</p><h2 id="ES6語法"><a href="#ES6語法" class="headerlink" title="ES6語法:"></a>ES6語法:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ageSum = ages.reduce(<span class="function">(<span class="params">total, age</span>) =&gt;</span> total + age, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ageSum);</span><br></pre></td></tr></table></figure><p>得出加總的數字為:460</p><h2 id="練習二-2"><a href="#練習二-2" class="headerlink" title="練習二:"></a>練習二:</h2><p>加總所有公司的存在年分</p><p>把公司的end年份減去start年份就是存在時間並且做加上total就好瞜</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> totalYears = companies.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">total, company</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> total + (company.end - company.start);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(totalYears);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ES6的簡化寫法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalYears = companies.reduce(<span class="function">(<span class="params">total, company</span>) =&gt;</span></span><br><span class="line">    total + (company.end - company.start), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalYears);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得出結果: 119</p><h1 id="串接使用全部方法"><a href="#串接使用全部方法" class="headerlink" title="串接使用全部方法"></a>串接使用全部方法</h1><p>不是很實用但是他們可以這樣串接使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> combined = ages</span><br><span class="line">    .map(<span class="function"><span class="params">age</span> =&gt;</span> age * <span class="number">2</span>)</span><br><span class="line">    .filter(<span class="function"><span class="params">age</span> =&gt;</span> age &gt;= <span class="number">40</span>)</span><br><span class="line">    .sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(combined);</span><br></pre></td></tr></table></figure><p>由大到小排列:<br><img src="https://i.imgur.com/1zQSVkn.png"></p><p>得到加總結果結果是798</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-Higher-Order-Functions-amp-Arrays-Vanilla-JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript-Higher-Order-Functions-amp-Arrays-Vanilla-Java</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-正則表達式 Regular Expression</title>
    <link href="http://example.com/2021/03/22/JS-%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%20Regular%20Expression/"/>
    <id>http://example.com/2021/03/22/JS-%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%20Regular%20Expression/</id>
    <published>2021-03-22T11:21:35.872Z</published>
    <updated>2021-03-22T11:23:11.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正則表達式-Regular-Expression"><a href="#正則表達式-Regular-Expression" class="headerlink" title="正則表達式 Regular Expression"></a>正則表達式 Regular Expression</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="JS-與-Regular-Expression"><a href="#JS-與-Regular-Expression" class="headerlink" title="JS 與 Regular Expression"></a>JS 與 Regular Expression</h1><h2 id="01-正則表達式是什麼-JS-中如何使用"><a href="#01-正則表達式是什麼-JS-中如何使用" class="headerlink" title="01 正則表達式是什麼 ? JS 中如何使用 ?"></a>01 正則表達式是什麼 ? JS 中如何使用 ?</h2><ul><li>做字串模式的判斷</li><li>做格式的過濾如電話、email、身分證</li><li>登入資料判讀、擷取</li><li>電子試算表資料擷取</li><li>單據檔案資料擷取</li></ul><h2 id="正則表達式的呈現"><a href="#正則表達式的呈現" class="headerlink" title="正則表達式的呈現:"></a>正則表達式的呈現:</h2><p><img src="https://i.imgur.com/7zh7HJL.png"></p><h1 id="Regular-Expression-學習資源"><a href="#Regular-Expression-學習資源" class="headerlink" title="Regular Expression 學習資源"></a>Regular Expression 學習資源</h1><p><a href="https://regexone.com/">學習網站</a></p><h2 id="Lesson-1-An-Introduction-and-the-ABCs"><a href="#Lesson-1-An-Introduction-and-the-ABCs" class="headerlink" title="Lesson 1: An Introduction, and the ABCs"></a>Lesson 1: An Introduction, and the ABCs</h2><p>輸入符合全部text的pattern:</p><p>三個text都包含了abc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchabcdefgTo be completed</span><br><span class="line">MatchabcdeTo be completed</span><br><span class="line">Matchabc</span><br><span class="line"></span><br><span class="line">input: abc</span><br></pre></td></tr></table></figure><h2 id="Lesson-1½-The-123s"><a href="#Lesson-1½-The-123s" class="headerlink" title="Lesson 1½: The 123s"></a>Lesson 1½: The 123s</h2><p>輸入符合全部text的pattern，因此除了字母會符合，數字也可以:</p><p>三個text都包含123</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Matchabc123xyzTo be completed</span><br><span class="line">Matchdefine &quot;123&quot;To be completed</span><br><span class="line">Matchvar g &#x3D; 123;</span><br><span class="line"></span><br><span class="line">input: 123 &#x2F; \D*123\D*</span><br></pre></td></tr></table></figure><h2 id="Lesson-2-The-Dot-萬用字元"><a href="#Lesson-2-The-Dot-萬用字元" class="headerlink" title="Lesson 2: The Dot(.)萬用字元"></a>Lesson 2: The Dot(.)萬用字元</h2><p>題目要吻合前三個text並且讓最後一個task被跳過，所以使用跳脫字元()在最後一個(.)之前</p><p>wildcard(通用字元)也就是Dot(.)<br>跳脫字元()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Matchcat.Success</span><br><span class="line">Match896.Success</span><br><span class="line">Match?&#x3D;+.Success</span><br><span class="line">Skipabc1</span><br><span class="line"></span><br><span class="line">input: ...\.</span><br></pre></td></tr></table></figure><h2 id="Lesson-3-Matching-specific-characters-符合特定字元"><a href="#Lesson-3-Matching-specific-characters-符合特定字元" class="headerlink" title="Lesson 3: Matching specific characters(符合特定字元)"></a>Lesson 3: Matching specific characters(符合特定字元)</h2><p>[]內部可以放入想要抓取的字元</p><p>前三個task符合後三個跳過:</p><p>使用中括號([])包含的字元會被特別抓取出來除此之外則跳過</p><p>例如[abc]只會抓取符合單一a,b,c沒有其他的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchcanSuccess</span><br><span class="line">MatchmanSuccess</span><br><span class="line">MatchfanSuccess</span><br><span class="line">SkipdanTo be completed</span><br><span class="line">SkipranTo be completed</span><br><span class="line">Skippan</span><br><span class="line"></span><br><span class="line">input: [cmf]</span><br></pre></td></tr></table></figure><h2 id="Lesson-4-Excluding-specific-characters-排除特定字元"><a href="#Lesson-4-Excluding-specific-characters-排除特定字元" class="headerlink" title="Lesson 4: Excluding specific characters(排除特定字元)"></a>Lesson 4: Excluding specific characters(排除特定字元)</h2><p>排除特定字元</p><p>[^abc]會符合任何字元除了a,b,c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchhogSuccess</span><br><span class="line">MatchdogSuccess</span><br><span class="line">Skipbog</span><br><span class="line"></span><br><span class="line">input: [^b]og</span><br></pre></td></tr></table></figure><h2 id="Lesson-5-Character-ranges-字元的範圍"><a href="#Lesson-5-Character-ranges-字元的範圍" class="headerlink" title="Lesson 5: Character ranges(字元的範圍)"></a>Lesson 5: Character ranges(字元的範圍)</h2><p>\w代表所有字母數字的集合<br>\W代表非字母數字的集合</p><p>使用中括號[] 以及 (-)代表range<br>使用[A-C]選出前三個符合下三個完全沒有ABC所以被篩掉了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchAnaSuccess</span><br><span class="line">MatchBobSuccess</span><br><span class="line">MatchCpcSuccess</span><br><span class="line">SkipaaxTo be completed</span><br><span class="line">SkipbbyTo be completed</span><br><span class="line">Skipccz</span><br><span class="line"></span><br><span class="line">input: [A-C][n-p][a-c]</span><br></pre></td></tr></table></figure><h2 id="Lesson-6-Catching-some-zzz’s-擷取重複的字元"><a href="#Lesson-6-Catching-some-zzz’s-擷取重複的字元" class="headerlink" title="Lesson 6: Catching some zzz’s(擷取重複的字元)"></a>Lesson 6: Catching some zzz’s(擷取重複的字元)</h2><p>擷取重複的字元</p><p>使用 要擷取的字元{數字}</p><p>例如下面的題目擷取z 3次 以及 5次  z{3,5}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchwazzzzzupSuccess</span><br><span class="line">MatchwazzzupSuccess</span><br><span class="line">Skipwazup</span><br><span class="line"></span><br><span class="line">input: waz&#123;3,5&#125;up</span><br></pre></td></tr></table></figure><h2 id="Lesson-7-Mr-Kleene-Mr-Kleene"><a href="#Lesson-7-Mr-Kleene-Mr-Kleene" class="headerlink" title="Lesson 7: Mr. Kleene, Mr. Kleene"></a>Lesson 7: Mr. Kleene, Mr. Kleene</h2><p>(*) 0個或是更多重複</p><p>(+) 1個或是更多重複</p><p>這兩者都可以使用在任何字元或是元字符 (Metacharacter)上面</p><blockquote><p>在POSIX擴展正則表達式裡[1]，定義了14個元字符，它們被作為一般的字符使用時，必須要通過「轉義」（前面加一個反斜槓「\」）來去除他們本身的特殊意義，這些元字符包括：</p><p>開和閉方括號：”[“和”]”<br>反斜線：”&quot;<br>脫字符：”^”<br>美元符號：”$”<br>句號/點：”.”<br>豎線/管道符：”|”<br>問號：”?”<br>星號：”*”<br>加號：”+”<br>開和閉 花括號：”{“和”}”<br>開和閉 小括號：”(“和”)”[2][3]</p></blockquote><p>下方範例可以看到:</p><p>a+ 代表 a是一個以上<br>b* 代表 b可以包含0以及以上<br>c+ 代表 c是一個以上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchaaaabccSuccess</span><br><span class="line">MatchaabbbbcSuccess</span><br><span class="line">MatchaaccSuccess</span><br><span class="line">Skipa</span><br><span class="line"></span><br><span class="line">input: a+b*c+</span><br></pre></td></tr></table></figure><h2 id="Lesson-8-Characters-optional-選擇性符號"><a href="#Lesson-8-Characters-optional-選擇性符號" class="headerlink" title="Lesson 8: Characters optional(?)選擇性符號"></a>Lesson 8: Characters optional(?)選擇性符號</h2><p>範例:</p><p>ab?c =&gt; abc or ac (b是選擇性的)</p><p>中括號124抓取前三個數字 跳過skip</p><p>並且使用?讓s變成選擇性的</p><p>最後跳脫字元?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Match1 file found?Success</span><br><span class="line">Match2 files found?Success</span><br><span class="line">Match24 files found?Success</span><br><span class="line">SkipNo files found.</span><br><span class="line"></span><br><span class="line">input: [124]+files? found\?</span><br></pre></td></tr></table></figure><h2 id="Lesson-9-All-this-whitespace-空白符號"><a href="#Lesson-9-All-this-whitespace-空白符號" class="headerlink" title="Lesson 9: All this whitespace(空白符號)"></a>Lesson 9: All this whitespace(空白符號)</h2><ul><li>space (␣)使用space產生的空白</li><li>tab (\t)使用tab產生的空白</li><li>new line (\n)斷行</li><li>carriage return (\r) 很少使用只有在character terminal</li><li>whitespace special character (\s) 此功能包含以上全部的空白</li><li>(\S)任何不是空格的字元</li></ul><p>這邊我的解法是</p><p>使用數字符號<br>代表第一個數字 \d</p><p>使用跳脫字元加上dot .代表順序後方的dot</p><p>接下來就是\s代表全部的空白處</p><p>最後是abc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Match1.   abcSuccess</span><br><span class="line">Match2.abcSuccess</span><br><span class="line">Match3.           abcSuccess</span><br><span class="line">Skip4.abcTo be completed</span><br><span class="line"></span><br><span class="line">input: \d\.\s+abc</span><br></pre></td></tr></table></figure><h2 id="Lesson-10-Starting-and-ending-搜尋完整的字句"><a href="#Lesson-10-Starting-and-ending-搜尋完整的字句" class="headerlink" title="Lesson 10: Starting and ending (搜尋完整的字句)"></a>Lesson 10: Starting and ending (搜尋完整的字句)</h2><p>使用 ^…$ 可以包含要搜尋的完整字句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchMission: successfulSuccess</span><br><span class="line">SkipLast Mission: unsuccessfulTo be completed</span><br><span class="line">SkipNext Mission: successful upon capture of target</span><br><span class="line"></span><br><span class="line">input: ^Mission: successful$</span><br></pre></td></tr></table></figure><h2 id="Lesson-11-Match-groups-限定要抓取的範圍"><a href="#Lesson-11-Match-groups-限定要抓取的範圍" class="headerlink" title="Lesson 11: Match groups (()) (限定要抓取的範圍)"></a>Lesson 11: Match groups (()) (限定要抓取的範圍)</h2><p>使用(以及)限定要抓取的範圍</p><p>例如:</p><p>^(IMG\d+.png)$<br>這樣使用會抓取所以有的 IMG數字.png</p><p>如果想要只抓取檔案名稱可以這樣寫:</p><p>^(IMG\d+).png$<br>用()去框在名字的地方限定抓取的範圍只能檔案名稱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Capturefile_record_transcript.pdffile_record_transcriptSuccess</span><br><span class="line">Capturefile_07241999.pdffile_07241999Success</span><br><span class="line">Skiptestfile_fake.pdf.tmp</span><br><span class="line"></span><br><span class="line">input: ^(file.+)\.pdf$</span><br></pre></td></tr></table></figure><h2 id="Lesson-12-Nested-groups-巢狀擷取"><a href="#Lesson-12-Nested-groups-巢狀擷取" class="headerlink" title="Lesson 12: Nested groups(巢狀擷取)"></a>Lesson 12: Nested groups(巢狀擷取)</h2><p>巢狀擷取</p><p>一樣使用括號(())來擷取內容，可以用多層的方式擷取內容中的內容</p><p>範例:</p><p>^(IMG(\d+)).png$<br>這邊會擷取IMG的數字.png然後再擷取只有數字的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">CaptureJan 1987Jan 1987 1987Success</span><br><span class="line">CaptureMay 1969May 1969 1969Success</span><br><span class="line">CaptureAug 2011Aug 2011 2011Success</span><br><span class="line"></span><br><span class="line">input: ^(\D+(\d+))$ or ^(\w+(\d+))$</span><br></pre></td></tr></table></figure><h2 id="Lesson-13-More-group-work"><a href="#Lesson-13-More-group-work" class="headerlink" title="Lesson 13: More group work"></a>Lesson 13: More group work</h2><p>中間多了一個字母一樣要抓取他其他的部份用括號擷取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Capture1280x7201280 720Success</span><br><span class="line">Capture1920x16001920 1600Success</span><br><span class="line">Capture1024x7681024 768Success</span><br><span class="line"></span><br><span class="line">input: ^((\d+)[x](\d+))$ or ^((\d+)x(\d+))$</span><br></pre></td></tr></table></figure><h2 id="Lesson-14-It’s-all-conditional"><a href="#Lesson-14-It’s-all-conditional" class="headerlink" title="Lesson 14: It’s all conditional(|)"></a>Lesson 14: It’s all conditional(|)</h2><p>當作or使用即可(|)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchI love catsSuccess</span><br><span class="line">MatchI love dogsSuccess</span><br><span class="line">SkipI love logsTo be completed</span><br><span class="line">SkipI love cogs</span><br><span class="line"></span><br><span class="line">input: I love cats|dogs</span><br></pre></td></tr></table></figure><h2 id="Lesson-15-Other-special-characters-其他特殊字元"><a href="#Lesson-15-Other-special-characters-其他特殊字元" class="headerlink" title="Lesson 15: Other special characters(其他特殊字元)"></a>Lesson 15: Other special characters(其他特殊字元)</h2><ul><li>\d 所有數字</li><li>\s 所有空白字元</li><li>\w 所有數字、字母</li></ul><hr><ul><li>\D 所有字母</li><li>\S 所有非空白字元</li><li>\W 所有非數字、字母</li></ul><p>\b 所有單詞</p><p>這邊的練習是個練習用的沙盒可以不用擺上來可以連上去練一下使用regex</p><p><a href="https://regexone.com/lesson/misc_meta_characters">練習網站</a></p><h2 id="YA完成了-第一部分ZZ"><a href="#YA完成了-第一部分ZZ" class="headerlink" title="YA完成了~第一部分ZZ"></a>YA完成了~第一部分ZZ</h2><p><img src="https://i.imgur.com/cLWvW2l.png"></p><h2 id="Practice-Problems"><a href="#Practice-Problems" class="headerlink" title="Practice Problems"></a>Practice Problems</h2><h2 id="Problem-1-Matching-a-decimal-numbers-擷取小數"><a href="#Problem-1-Matching-a-decimal-numbers-擷取小數" class="headerlink" title="Problem 1: Matching a decimal numbers (擷取小數)"></a>Problem 1: Matching a decimal numbers (擷取小數)</h2><p>主要是用[]解的 並且後面加上\d表示數字結尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Match3.14529Success</span><br><span class="line">Match-255.34Success</span><br><span class="line">Match128Success</span><br><span class="line">Match1.9e10Success</span><br><span class="line">Match123,340.00Success</span><br><span class="line">Skip720p</span><br><span class="line"></span><br><span class="line">input: ^[-\.,\de]+\d$</span><br></pre></td></tr></table></figure><h2 id="Problem-2-Matching-phone-numbers"><a href="#Problem-2-Matching-phone-numbers" class="headerlink" title="Problem 2: Matching phone numbers"></a>Problem 2: Matching phone numbers</h2><p>只抓前三個連號都可以辦到搂!基本上電話區碼的部分可以這樣抓</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Capture415-555-1234415Success</span><br><span class="line">Capture650-555-2345650Success</span><br><span class="line">Capture(416)555-3456416Success</span><br><span class="line">Capture202 555 4567202Success</span><br><span class="line">Capture4035555678403Success</span><br><span class="line">Capture1 416 555 9292416Success</span><br><span class="line"></span><br><span class="line">input: (\d&#123;3&#125;)</span><br></pre></td></tr></table></figure><h2 id="Problem-3-Matching-emails"><a href="#Problem-3-Matching-emails" class="headerlink" title="Problem 3: Matching emails"></a>Problem 3: Matching emails</h2><p>排除所有符號後方的字元</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Capturetom@hogwarts.comtomSuccess</span><br><span class="line">Capturetom.riddle@hogwarts.comtom.riddleSuccess</span><br><span class="line">Capturetom.riddle+regexone@hogwarts.comtom.riddleSuccess</span><br><span class="line">Capturetom@hogwarts.eu.comtomSuccess</span><br><span class="line">Capturepotter@hogwarts.compotterSuccess</span><br><span class="line">Captureharry@hogwarts.comharrySuccess</span><br><span class="line">Capturehermione+regexone@hogwarts.comhermioneSuccess</span><br><span class="line"></span><br><span class="line">input: ^([\w\.]*)</span><br></pre></td></tr></table></figure><h2 id="Problem-4-Matching-HTML"><a href="#Problem-4-Matching-HTML" class="headerlink" title="Problem 4: Matching HTML"></a>Problem 4: Matching HTML</h2><p>選取”&lt;”以及後面的字母 就是tag瞜!</p><p>ex. &lt;a or &lt;div</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Capture&lt;a&gt;This is a link&lt;&#x2F;a&gt;aSuccess</span><br><span class="line">Capture&lt;a href&#x3D;&#39;https:&#x2F;&#x2F;regexone.com&#39;&gt;Link&lt;&#x2F;a&gt;aSuccess</span><br><span class="line">Capture&lt;div class&#x3D;&#39;test_style&#39;&gt;Test&lt;&#x2F;div&gt;divSuccess</span><br><span class="line">Capture&lt;div&gt;Hello &lt;span&gt;world&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;divSuccess</span><br><span class="line"></span><br><span class="line">input: &lt;(\w+)</span><br></pre></td></tr></table></figure><h2 id="Problem-5-Matching-specific-filenames"><a href="#Problem-5-Matching-specific-filenames" class="headerlink" title="Problem 5: Matching specific filenames"></a>Problem 5: Matching specific filenames</h2><p>| and $的活用</p><p>選擇jpg or png or gif $(作為結尾)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Skip.bash_profileTo be completed</span><br><span class="line">Skipworkspace.docTo be completed</span><br><span class="line">Captureimg0912.jpgimg0912 jpgSuccess</span><br><span class="line">Captureupdated_img0912.pngupdated_img0912 pngSuccess</span><br><span class="line">Skipdocumentation.htmlTo be completed</span><br><span class="line">Capturefavicon.giffavicon gifSuccess</span><br><span class="line">Skipimg0912.jpg.tmpTo be completed</span><br><span class="line">Skipaccess.lock</span><br><span class="line"></span><br><span class="line">input:(\w+)\.(jpg|png|gif)$</span><br></pre></td></tr></table></figure><h2 id="Problem-6-Trimming-whitespace-from-start-and-end-of-line"><a href="#Problem-6-Trimming-whitespace-from-start-and-end-of-line" class="headerlink" title="Problem 6: Trimming whitespace from start and end of line"></a>Problem 6: Trimming whitespace from start and end of line</h2><p>這邊我使用一開始去掉空白之後抓取全部的文字最後抓取串接以(.)結尾的句子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CaptureThe quick brown fox...The quick brown fox...Success</span><br><span class="line">Capture   jumps over the lazy dog.jumps over the lazy dog.Success</span><br><span class="line"></span><br><span class="line">input: ([^\s+](.+)\.)$</span><br></pre></td></tr></table></figure><h2 id="Problem-7-Extracting-information-from-a-log-file"><a href="#Problem-7-Extracting-information-from-a-log-file" class="headerlink" title="Problem 7: Extracting information from a log file"></a>Problem 7: Extracting information from a log file</h2><p>(\w+)( 純文字以及跳脫字元&quot;(“\</p><p>[\w.]+): 這段是抓取所有文字以及有(.)加上一個(:)</p><p>(\d+))$ 這段是抓取括號以及數字結尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SkipW&#x2F;dalvikvm( 1553): threadid&#x3D;1: uncaught exceptionTo be completed</span><br><span class="line">SkipE&#x2F;( 1553): FATAL EXCEPTION: mainTo be completed</span><br><span class="line">SkipE&#x2F;( 1553): java.lang.StringIndexOutOfBoundsExceptionTo be completed</span><br><span class="line">CaptureE&#x2F;( 1553):   at widget.List.makeView(ListView.java:1727)makeView ListView.java 1727Success</span><br><span class="line">CaptureE&#x2F;( 1553):   at widget.List.fillDown(ListView.java:652)fillDown ListView.java 652Success</span><br><span class="line">CaptureE&#x2F;( 1553):   at widget.List.fillFrom(ListView.java:709)fillFrom ListView.java 709Success</span><br><span class="line"></span><br><span class="line">input: (\w+)\(([\w\.]+):(\d+)\)$</span><br></pre></td></tr></table></figure><h2 id="Problem-8-Parsing-and-extracting-data-from-a-URL"><a href="#Problem-8-Parsing-and-extracting-data-from-a-URL" class="headerlink" title="Problem 8: Parsing and extracting data from a URL"></a>Problem 8: Parsing and extracting data from a URL</h2><p>(\w+):// 這段吃所有的 ://之前的字母</p><p>://([\w-.]+) 使用[]內部包含字母、跳脫字元的- .</p><p>(:(\d+))?  最後幾個(:)之後的數字因為不是每個都有所以上問號讓它們變成optional</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Captureftp:&#x2F;&#x2F;file_server.com:21&#x2F;top_secret&#x2F;life_changing_plans.pdfftp file_server.com 21Success</span><br><span class="line">Capturehttps:&#x2F;&#x2F;regexone.com&#x2F;lesson&#x2F;introduction#sectionhttps regexone.comSuccess</span><br><span class="line">Capturefile:&#x2F;&#x2F;localhost:4040&#x2F;zip_filefile localhost 4040Success</span><br><span class="line">Capturehttps:&#x2F;&#x2F;s3cur3-server.com:9999&#x2F;https s3cur3-server.com 9999Success</span><br><span class="line">Capturemarket:&#x2F;&#x2F;search&#x2F;angry%20birdsmarket searchSuccess</span><br><span class="line"></span><br><span class="line">input: (\w+):&#x2F;&#x2F;([\w\-\.]+)(:(\d+))?</span><br></pre></td></tr></table></figure><h2 id="Problem-X-Infinity-and-beyond"><a href="#Problem-X-Infinity-and-beyond" class="headerlink" title="Problem X: Infinity and beyond!"></a>Problem X: Infinity and beyond!</h2><p><img src="https://i.imgur.com/wTERooE.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正則表達式-Regular-Expression&quot;&gt;&lt;a href=&quot;#正則表達式-Regular-Expression&quot; class=&quot;headerlink&quot; title=&quot;正則表達式 Regular Expression&quot;&gt;&lt;/a&gt;正則表達式 Regular </summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-Async JS Crash Course</title>
    <link href="http://example.com/2021/03/22/JS-Async%20JS%20Crash%20Course/"/>
    <id>http://example.com/2021/03/22/JS-Async%20JS%20Crash%20Course/</id>
    <published>2021-03-22T11:20:08.517Z</published>
    <updated>2021-03-22T11:21:09.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Async-JS-Crash-Course"><a href="#Async-JS-Crash-Course" class="headerlink" title="Async JS Crash Course"></a>Async JS Crash Course</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="使用範例來理解Async-JS在什麼情況下適合作用"><a href="#使用範例來理解Async-JS在什麼情況下適合作用" class="headerlink" title="使用範例來理解Async JS在什麼情況下適合作用:"></a>使用範例來理解Async JS在什麼情況下適合作用:</h1><ul><li>取得post貼上DOM延遲一秒鐘</li><li>創造新的post花了兩秒鐘</li></ul><p>這樣會發生什麼情況?</p><p><img src="https://i.imgur.com/lW6aV3a.png"></p><p>DOM會先PO post上去不等新的post創造好，所以永遠更新不到新的post</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [&#123;</span><br><span class="line">        title: <span class="string">&#x27;Post One&#x27;</span>,</span><br><span class="line">        body: <span class="string">&#x27;This is post one&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        title: <span class="string">&#x27;Post Two&#x27;</span>,</span><br><span class="line">        body: <span class="string">&#x27;This is post two&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把取得的post貼到DOM上面 延遲一秒鐘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPost</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        posts.forEach(<span class="function">(<span class="params">post, index</span>) =&gt;</span> &#123;</span><br><span class="line">            output += <span class="string">`&lt;li&gt;<span class="subst">$&#123;post.title&#125;</span>&lt;/li&gt;`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">document</span>.body.innerHTML = output;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//創造一個新的post丟上去花了兩秒鐘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        posts.push(post);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getPost();</span><br><span class="line"></span><br><span class="line">createPost(&#123;</span><br><span class="line">    title: <span class="string">&#x27;Post Three&#x27;</span>,</span><br><span class="line">    body: <span class="string">&#x27;This is post Three&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="使用callback"><a href="#使用callback" class="headerlink" title="使用callback:"></a>使用callback:</h1><p>使用callback代表getPosts，這樣一來就會在創造好新的post之後才會觸發getPosts整個過程會在兩秒內完成</p><p>需要注意callback的寫法在呼叫函式的部分撰寫的callback不需要加上()要特別留意</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//創造一個新的post丟上去花了兩秒鐘</span></span><br><span class="line"><span class="comment">//這邊的callback就代表了getPosts所以必須等創造好了新的post之後</span></span><br><span class="line"><span class="comment">// getPost才會觸發也才會把取的的物件推上去DOM所以就可以顯示新的post搂!</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post, callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        posts.push(post);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createPost(&#123;</span><br><span class="line">    title: <span class="string">&#x27;Post Three&#x27;</span>,</span><br><span class="line">    body: <span class="string">&#x27;This is post Three&#x27;</span></span><br><span class="line">&#125;, getPosts)</span><br></pre></td></tr></table></figure><h1 id="使用promise"><a href="#使用promise" class="headerlink" title="使用promise:"></a>使用promise:</h1><ul><li>promise解決會呼叫resolve</li><li>promise錯誤則呼叫reject</li></ul><p>promise成功則會使用then()內部的函式順利的印出新的post<br><img src="https://i.imgur.com/Vc1kOWO.png"></p><p>promise失敗(改寫error變數成true)則會顯示錯誤訊息在console裡面<br>也可以使用<code>catch</code>方法抓取錯誤的內容<br><img src="https://i.imgur.com/s18nYiL.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post, </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果promise解決會呼叫resolve</span></span><br><span class="line">    <span class="comment">//如果promise錯誤則呼叫reject</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            posts.push(post);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解釋promise內部的兩個參數的判斷是如何運作</span></span><br><span class="line">            <span class="keyword">const</span> error = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">&#x27;Error: something went wrong&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createPost(&#123;</span><br><span class="line">        title: <span class="string">&#x27;Post Three&#x27;</span>,</span><br><span class="line">        body: <span class="string">&#x27;This is post three&#x27;</span></span><br><span class="line">    &#125;).then(getPosts).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure><h2 id="示範promise-all"><a href="#示範promise-all" class="headerlink" title="示範promise.all"></a>示範promise.all</h2><p>常常promise會不只一個，一個一個接then太累了，所以可以使用promise.all一次抓住一同使用.then就好瞜!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>, <span class="string">&#x27;Goodbye&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2, promise3]).then(<span class="function"><span class="params">values</span> =&gt;</span> <span class="built_in">console</span>.log(values));</span><br></pre></td></tr></table></figure><p>最後.then的印出結果<br><img src="https://i.imgur.com/9yQSz0L.png"></p><h2 id="示範fetch-API-相關的promise寫法"><a href="#示範fetch-API-相關的promise寫法" class="headerlink" title="示範fetch API 相關的promise寫法"></a>示範fetch API 相關的promise寫法</h2><p>使用fetch抓取資料的話必須轉化格式所以在指派給變數的階段就要先.then轉換格式</p><p>這樣才可以在promise.all的階段被真正抓取到資料</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用兩個.then因為要轉換JSON格式</span></span><br><span class="line"><span class="keyword">const</span> promise4 = fetch(<span class="string">&#x27;https://jsonplaceholder.typicode.com/users&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json());</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2, promise3, promise4]).then(<span class="function"><span class="params">values</span> =&gt;</span> <span class="built_in">console</span>.log(values));</span><br></pre></td></tr></table></figure><p>最後.then的印出結果<br><img src="https://i.imgur.com/8fI5g5T.png"></p><h2 id="使用async"><a href="#使用async" class="headerlink" title="使用async:"></a>使用async:</h2><p><code>await</code> 等待一個同步的過程或動作去完成後才去執行其他動作</p><p>等待createPost處理完內部的函式createPost後也就是創造新的post後，才會往getPosts去執行這樣就會顯示摟!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPost</span>(<span class="params">post, </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            posts.push(post);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> error = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">&#x27;Error: something went wrong&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待createPost處理完成後，才會往getPosts去執行</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> createPost(&#123;</span><br><span class="line">        title: <span class="string">&#x27;Post Three&#x27;</span>,</span><br><span class="line">        body: <span class="string">&#x27;This is post three&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    getPosts();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init();</span><br></pre></td></tr></table></figure><h2 id="示範fetch-API-相關的async寫法"><a href="#示範fetch-API-相關的async寫法" class="headerlink" title="示範fetch API 相關的async寫法"></a>示範fetch API 相關的async寫法</h2><p>不只用.then一切都更乾淨好讀</p><p>一樣fetch都需要資料轉換，但是這邊從新指派一個變數處理比較特別</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">&#x27;https://jsonplaceholder.typicode.com/users&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchUsers();</span><br></pre></td></tr></table></figure><p>fetch的資料印出:<br><img src="https://i.imgur.com/Xc4q0xs.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Async-JS-Crash-Course&quot;&gt;&lt;a href=&quot;#Async-JS-Crash-Course&quot; class=&quot;headerlink&quot; title=&quot;Async JS Crash Course&quot;&gt;&lt;/a&gt;Async JS Crash Course&lt;/</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-AJAX Crash Course (5000字)</title>
    <link href="http://example.com/2021/03/22/JS-AJAX%20Crash%20Course%20(Vanilla%20JavaScript)/"/>
    <id>http://example.com/2021/03/22/JS-AJAX%20Crash%20Course%20(Vanilla%20JavaScript)/</id>
    <published>2021-03-22T11:17:15.184Z</published>
    <updated>2021-03-22T11:18:52.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX-Crash-Course-Vanilla-JavaScript"><a href="#AJAX-Crash-Course-Vanilla-JavaScript" class="headerlink" title="AJAX Crash Course (Vanilla JavaScript)"></a>AJAX Crash Course (Vanilla JavaScript)</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="AJAX是甚麼"><a href="#AJAX是甚麼" class="headerlink" title="AJAX是甚麼?"></a>AJAX是甚麼?</h1><ul><li>Asynchronous Javascript&amp;XML<blockquote><p>不是種語言、框架、函式庫只是一種網頁工具用來傳送、接收來自客戶端的資料給伺服器用一種非同步的處理方式那就是AJAX</p></blockquote></li><li>簡單來說就是處理這些發送的動作在看不到的狀況下同時不需要重新下載頁面</li><li>諷刺的地方是雖然命名有被使用到但是 XML相當少使用，比較多使用JSON(Javascript Object Notation)因為比較簡潔快速且受歡迎</li><li>單純的text也可以被使用</li></ul><h2 id="圖解AJAX"><a href="#圖解AJAX" class="headerlink" title="圖解AJAX"></a>圖解AJAX</h2><p><img src="https://i.imgur.com/TKMLQTR.png"></p><h3 id="Common-Request-amp-Response"><a href="#Common-Request-amp-Response" class="headerlink" title="Common Request&amp;Response"></a>Common Request&amp;Response</h3><p>例子:<br>點擊網頁連結會發出一個common request 給server會回傳common response，而這個response 包含了header或者是網頁內容，基本上使用者要求什麼就回傳甚麼 </p><h3 id="AJAX做的事情"><a href="#AJAX做的事情" class="headerlink" title="AJAX做的事情"></a>AJAX做的事情</h3><p>AJAX可做到的事情就是發送request 非同步的方式(Asynchronously)在後方，而不需要重新下載或是刷新全部頁面，而是只更新一小區域的內容，這樣的方式相對快速並且更充滿互動感</p><h3 id="AJAX去做request有幾種方式可以使用"><a href="#AJAX去做request有幾種方式可以使用" class="headerlink" title="AJAX去做request有幾種方式可以使用"></a>AJAX去做request有幾種方式可以使用</h3><p>1.使用原生JS語法<br>2.使用函式庫jQuery, Axios等等</p><h3 id="XmlHttpRequest"><a href="#XmlHttpRequest" class="headerlink" title="XmlHttpRequest"></a>XmlHttpRequest</h3><p>XmlHttpRequest Object (XHR)</p><blockquote><p>是一種物件型態的API 而他是一種物件代表會有屬性、方法可以使用，而這些其實是瀏覽器的JS環境提供的所以幾乎所有現代的瀏覽器都有這些API可以使用，其中的方法用來<strong>傳送資料往來</strong>用戶端-伺服器端或是瀏覽器-伺服器端</p></blockquote><ul><li>一種物件型態的API</li><li>瀏覽器的JS提供的環境</li><li>使用方法(methods)傳送資料往來用戶端-伺服器端</li><li>不只使用http，其他的protocols也可以使用</li><li>可以使用的資料格式有XML,JSON,plain text(純文字)</li></ul><h3 id="Server端回傳資料"><a href="#Server端回傳資料" class="headerlink" title="Server端回傳資料"></a>Server端回傳資料</h3><p>通常回傳的資料或是以JSON或是XML格式或是純文字</p><h3 id="HTML-Response"><a href="#HTML-Response" class="headerlink" title="HTML Response"></a>HTML Response</h3><p>這部分通常可以通過DOM去更新頁面或是回傳使用者要求的資料等等，回應使用者的需求</p><h3 id="Different-ways-libraries-amp-other-methods-to-make-AJAX-call"><a href="#Different-ways-libraries-amp-other-methods-to-make-AJAX-call" class="headerlink" title="Different ways(libraries&amp;other methods) to make AJAX call"></a>Different ways(libraries&amp;other methods) to make AJAX call</h3><ul><li>jQuery</li><li>Axios</li><li>Superagent</li><li>Fetch API 瀏覽器提供的功能</li><li>Prototype</li><li>Node HTTP</li></ul><h1 id="Let’s-Write-Some-Code"><a href="#Let’s-Write-Some-Code" class="headerlink" title="Let’s Write Some Code"></a>Let’s Write Some Code</h1><h2 id="Environment-setup"><a href="#Environment-setup" class="headerlink" title="Environment setup"></a>Environment setup</h2><p><a href="https://www.apachefriends.org/zh_tw/download.html">下載 XAMPP</a></p><p><img src="https://i.imgur.com/afbClYT.png"></p><p><a href="https://www.youtube.com/watch?v=6tCWiexc05U&list=PLillGF-Rfqbap2IB6ZS4BBBcYPagAjpjn&index=2&ab_channel=TraversyMedia">XAMPP設定影片</a></p><h3 id="創造資料夾擺接下來的要操作的範例"><a href="#創造資料夾擺接下來的要操作的範例" class="headerlink" title="創造資料夾擺接下來的要操作的範例"></a>創造資料夾擺接下來的要操作的範例</h3><p><img src="https://i.imgur.com/SyFwXky.png"></p><p>創造資料夾ajaxcrash<br><img src="https://i.imgur.com/MlL1rhU.png"></p><p>使用VScode開啟這個資料夾並且創建html檔案ajax1.html</p><p>打開一個網頁連接到剛剛創建好的資料夾就可以開始跟課程瞜!<br><img src="https://i.imgur.com/e4Q1w72.png"></p><p>設置一個sample.txt待會<br>待會程式會抓取使用並放入一些隨意的內文</p><p><img src="https://i.imgur.com/ioDd0QK.png"></p><h2 id="AJAX-1-Text-File-純文字檔案AJAX提取"><a href="#AJAX-1-Text-File-純文字檔案AJAX提取" class="headerlink" title="AJAX 1 -Text File 純文字檔案AJAX提取"></a>AJAX 1 -Text File 純文字檔案AJAX提取</h2><h3 id="onload"><a href="#onload" class="headerlink" title="onload()"></a>onload()</h3><p>當印出xhr會得到一些可以使用的方法<br><img src="https://i.imgur.com/Yt8JHRd.png"></p><p>創建一個按鈕來抓取sample.txt的內容<br><img src="https://i.imgur.com/SEEgr3F.png"></p><p>當成功抓取內文後，查看Netword內容<br>使用的方法:GET<br>Status Code:200 OK<br>Content Type:text/plain<br><img src="https://i.imgur.com/YfTSz3F.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button&quot;</span>&gt;Get Text File&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//create event listener</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;button&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, loadText);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//創造xhr物件 create XHR object</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="comment">//open方法填入的參數 open - type, url/file, async</span></span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&#x27;sample.txt&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//當status =200時印出sample.txt的內容</span></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用這個方法後才會顯示出內容在console裡面(send request)</span></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//HTTP Status</span></span><br><span class="line">        <span class="comment">//200 : &quot;OK&quot;</span></span><br><span class="line">        <span class="comment">//403 : &quot;Forbidden&quot;</span></span><br><span class="line">        <span class="comment">//404 : &quot;Not Found&quot;</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在onload狀態做<code>console.log(&#39;readystate:&#39;, xhr.readyState);</code>來看看目前位置的readystate在哪個位置</p><p>會發現只有<img src="https://i.imgur.com/uLMFaJP.png">中間的過程都不會跑</p><h4 id="當onload出錯的時候-產生404狀態的時候也可以呈現在DOM上面"><a href="#當onload出錯的時候-產生404狀態的時候也可以呈現在DOM上面" class="headerlink" title="當onload出錯的時候 產生404狀態的時候也可以呈現在DOM上面"></a>當onload出錯的時候 產生404狀態的時候也可以呈現在DOM上面</h4><p>這邊如果想要練習可以藉著把sample改名就可以取得這樣的狀態摟!</p><p><img src="https://i.imgur.com/LBmMEiF.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;readystate:&#x27;</span>, xhr.readyState);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">//正常狀態下顯示在DOM的處理</span></span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>).innerHTML = <span class="built_in">this</span>.responseText</span><br><span class="line">                <span class="comment">// 也就是404的狀態也可以呈現在HTML上面</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">404</span>) &#123;</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>).innerHTML = <span class="string">&quot;Not Found&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="onreadystatechange"><a href="#onreadystatechange" class="headerlink" title="onreadystatechange()"></a>onreadystatechange()</h3><p>會得出一樣的respose內容，差別在於<code>onreadystatechange()</code>在readystate必須在4的情況下也就是(4:request finished and response is ready)才會印出reponse的內容</p><p>可以使用<code>console.log(&#39;readystate:&#39;, xhr.readyState);</code>來看看目前位置的readystate在哪個位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//create XHR object</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="comment">//open - type, url/file, async</span></span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&#x27;sample.txt&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 當放在這一段的時候只會得到readystate1</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;readystate:&#x27;</span>, xhr.readyState);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// xhr.onload = function () &#123;</span></span><br><span class="line">            <span class="comment">//     if (this.status == 200) &#123;</span></span><br><span class="line">            <span class="comment">//         // console.log(this.responseText);</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;readystate:&#x27;</span>, xhr.readyState);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// console.log(this.responseText);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//send request</span></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>放在條件式function之前時會顯示1</p><p>放在條件式中時會跑1234一直到也就是完成request以及respose ready內容進條件事就會跑後方的動作也就是印出responseText</p><p><img src="https://i.imgur.com/CI6r4hC.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button&quot;</span>&gt;Get Text File&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//create event listener</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;button&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, loadText);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//create XHR object</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="comment">//open - type, url/file, async</span></span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&#x27;sample.txt&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 這邊的readyState必須是4下方的內容才會被印出</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//send request</span></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// readyState Values</span></span><br><span class="line">        <span class="comment">// 0:request not initialized</span></span><br><span class="line">        <span class="comment">// 1:server connection established</span></span><br><span class="line">        <span class="comment">// 2:request received</span></span><br><span class="line">        <span class="comment">// 3:processing request</span></span><br><span class="line">        <span class="comment">// 4:request finished and response is ready</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="兩者的區別"><a href="#兩者的區別" class="headerlink" title="兩者的區別"></a>兩者的區別</h4><p>在於兩者的readyState</p><ul><li>onload - 它不會執行除非狀態是readyState:4</li><li>onreadystatechange - 卻是readyState:2,3也會執行</li></ul><h3 id="onprogress"><a href="#onprogress" class="headerlink" title="onprogress()"></a>onprogress()</h3><p>等待網頁載入時會跑的gif動畫時背景在做的事情</p><p>使用<code>console.log(&#39;readystate:&#39;, xhr.readyState);</code>來看看目前位置的readystate在哪個位置得出 3:processing request</p><p><img src="https://i.imgur.com/EUDGFaX.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;readyState:&#x27;</span>, xhr.readyState);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="onerror"><a href="#onerror" class="headerlink" title="onerror()"></a>onerror()</h3><p>當onload事件出錯時會跑這邊的函式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;Request Error...&#x27;</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="把取得的response放到DOM上面"><a href="#把取得的response放到DOM上面" class="headerlink" title="把取得的response放到DOM上面"></a>把取得的response放到DOM上面</h3><p>在上方的HTML先設置一個區域可以抓取的div</p><p><img src="https://i.imgur.com/a6SCQQi.png"></p><p>抓好之後使用<code>innerHTML</code>修改內容變成<code>responseText</code>就可以把DOM呈現reponse的內容了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;readystate:&#x27;</span>, xhr.readyState);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// console.log(this.responseText);</span></span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>).innerHTML = <span class="built_in">this</span>.responseText</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h2 id="AJAX2-Local-JSON-本地端資料夾AJAX提取資料"><a href="#AJAX2-Local-JSON-本地端資料夾AJAX提取資料" class="headerlink" title="AJAX2 - Local JSON 本地端資料夾AJAX提取資料"></a>AJAX2 - Local JSON 本地端資料夾AJAX提取資料</h2><p>前置作業:</p><p>設置ajax2.html來操作JSON<br><img src="https://i.imgur.com/0DC8Qzo.png"></p><p>多設置兩個資料夾待會做操作使用<br><img src="https://i.imgur.com/qrt5R5j.png"></p><p><img src="https://i.imgur.com/PQBR87Z.png"></p><p>並且轉換伺服器網址到ajax2<br><img src="https://i.imgur.com/qjvxRwM.png"></p><h3 id="取得JSON格式得內容"><a href="#取得JSON格式得內容" class="headerlink" title="取得JSON格式得內容"></a>取得JSON格式得內容</h3><p>使用下方的程式碼可以取得JSON全部的內容!</p><p>當點Get User時會產生下面的資料在console中<br><img src="https://i.imgur.com/ebGT9GQ.png"></p><p><img src="https://i.imgur.com/UlScz1z.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button1&quot;</span>&gt;Get User&lt;/button&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button2&quot;</span>&gt;Get Users&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;User&lt;/h1&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;user&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;h1&gt;Users&lt;/h1&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;users&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;button1&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, loadUser);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;user.json&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a><code>JSON.parse</code></h3><p>但是如果要取得其中的id,name,email個別取得的時候必須使用<code>JSON.parse</code></p><p>下方的範例我使用取的user的名字:Rick以字串的形式印出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> user = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">                    <span class="built_in">console</span>.log(user.name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="抓取到的JSON呈現到DOM上"><a href="#抓取到的JSON呈現到DOM上" class="headerlink" title="抓取到的JSON呈現到DOM上"></a>抓取到的JSON呈現到DOM上</h3><p>這邊我使用ES6的語法做串接直接貼到innerHTML上</p><p>當點擊Get User可以做到這樣的效果<br><img src="https://i.imgur.com/xEdYHx6.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;user.json&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> user = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&quot;user&quot;</span>).innerHTML =</span><br><span class="line">                        <span class="string">`&lt;ul&gt;&lt;li&gt;ID:<span class="subst">$&#123;user.id&#125;</span>&lt;/li&gt;&lt;li&gt;name:<span class="subst">$&#123;user.name&#125;</span>&lt;/li&gt;&lt;li&gt;email:<span class="subst">$&#123;user.email&#125;</span>&lt;/li&gt;&lt;/ul&gt;`</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="如果要取的複數JSON資料呈現到DOM上"><a href="#如果要取的複數JSON資料呈現到DOM上" class="headerlink" title="如果要取的複數JSON資料呈現到DOM上"></a>如果要取的複數JSON資料呈現到DOM上</h3><p>這邊的for…in迴圈會印出物件的屬性並且使用+=把所有的內容接續印出直到把內容印完為止</p><p><img src="https://i.imgur.com/xRC8VVu.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;users.json&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> users = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText);</span><br><span class="line">                    <span class="keyword">var</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> users) &#123;</span><br><span class="line">                        output +=</span><br><span class="line">                            <span class="string">`&lt;ul&gt;&lt;li&gt;ID:<span class="subst">$&#123;users[i].id&#125;</span>&lt;/li&gt;&lt;li&gt;name:<span class="subst">$&#123;users[i].name&#125;</span>&lt;/li&gt;&lt;li&gt;email:<span class="subst">$&#123;users[i].email&#125;</span>&lt;/li&gt;&lt;/ul&gt;`</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&quot;users&quot;</span>).innerHTML = output;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="AJAX3-External-API-AJAX提取-GitHub作範例"><a href="#AJAX3-External-API-AJAX提取-GitHub作範例" class="headerlink" title="AJAX3 - External API AJAX提取(GitHub作範例)"></a>AJAX3 - External API AJAX提取(GitHub作範例)</h2><p>處理方式基本上跟取的內部資料夾檔案的方式差不多只是在xhr.open的中間的參數改成Github API的網址，其他處理基本上都一樣</p><p><img src="https://i.imgur.com/l4pEydG.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button&quot;</span>&gt;Load GitHub Users&lt;/button&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;h1&gt;Github Users&lt;/h1&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;users&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;button&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, loadUsers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Load Github Users</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.github.com/users&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> users = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.responseText);</span><br><span class="line">                    <span class="keyword">var</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> users) &#123;</span><br><span class="line">                        output +=</span><br><span class="line">                            <span class="string">`&lt;div class=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="string">                            &lt;img src=&quot;<span class="subst">$&#123;users[i].avatar_url&#125;</span>&quot; width =&quot;70&quot; height =&quot;70&quot;&gt;</span></span><br><span class="line"><span class="string">                            &lt;ul&gt;</span></span><br><span class="line"><span class="string">                            &lt;li&gt;ID:<span class="subst">$&#123;users[i].id&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                            &lt;li&gt;Login:<span class="subst">$&#123;users[i].login&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                            &lt;/div&gt;`</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;users&#x27;</span>).innerHTML = output;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="AJAX4-使用PHP取得資料並且對比AJAX取得方式-參考閱讀PHP的部分"><a href="#AJAX4-使用PHP取得資料並且對比AJAX取得方式-參考閱讀PHP的部分" class="headerlink" title="AJAX4 - 使用PHP取得資料並且對比AJAX取得方式(參考閱讀PHP的部分)"></a>AJAX4 - 使用PHP取得資料並且對比AJAX取得方式(參考閱讀PHP的部分)</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>使用正常PHP方式會整個reload網頁<br><img src="https://i.imgur.com/JsuWQEJ.gif"></p><p>使用AJAX會再背景處理資料<br><img src="https://i.imgur.com/7dtHe3H.gif"></p><p>一樣修改<code>xhr.open(process.php?name=$&#123;name&#125;)</code> 這個部分讓name的部分是input去輸入，其他AJAX部分的操作都差不多，PHP部分就不多做介紹只是舉例子示範</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;button&quot;</span>&gt;Get Name&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;PHP GET FORM&lt;/h1&gt;</span><br><span class="line">    &lt;form metod=<span class="string">&quot;GET&quot;</span> action=<span class="string">&quot;process.php&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;PHP AJAX GET FORM&lt;/h1&gt;</span><br><span class="line">    &lt;form id=<span class="string">&quot;getForm&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> id=<span class="string">&quot;name1&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;button&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, getName);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;getForm&quot;</span>).addEventListener(<span class="string">&quot;submit&quot;</span>, getName);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;name1&#x27;</span>).value;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&quot;GET&quot;</span>, <span class="string">`process.php?name=<span class="subst">$&#123;name&#125;</span>`</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>頁面呈現其實跟GET差不多但是方法內容不同，可以做參考就好</p><p>POST PHP的寫法不太好懂不過也只是要呈現出跟AJAX的差異所以這邊不多做解釋<br>不過POST的作用是把資料傳進伺服器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;PHP POST FORM&lt;/h1&gt;</span><br><span class="line">    &lt;form method=<span class="string">&quot;POST&quot;</span> action=<span class="string">&quot;process.php&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;PHP AJAX POST FORM&lt;/h1&gt;</span><br><span class="line">    &lt;form id=<span class="string">&quot;postForm&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> id=<span class="string">&quot;name2&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;postForm&quot;</span>).addEventListener(<span class="string">&quot;submit&quot;</span>, postName);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">postName</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;name2&#x27;</span>).value;</span><br><span class="line">            <span class="keyword">var</span> params = <span class="string">&quot;name=&quot;</span> + name;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;process.php&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">            xhr.setRequestHeader(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            xhr.send(params);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AJAX-Crash-Course-Vanilla-JavaScript&quot;&gt;&lt;a href=&quot;#AJAX-Crash-Course-Vanilla-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;AJAX Crash Course (V</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-Fetch API Introduction(5000字)</title>
    <link href="http://example.com/2021/03/22/JS-Fetch%20API%20Introduction/"/>
    <id>http://example.com/2021/03/22/JS-Fetch%20API%20Introduction/</id>
    <published>2021-03-22T11:16:20.849Z</published>
    <updated>2021-03-22T11:19:44.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fetch-API-Introduction-Vanilla-JavaScript"><a href="#Fetch-API-Introduction-Vanilla-JavaScript" class="headerlink" title="Fetch API Introduction(Vanilla JavaScript)"></a>Fetch API Introduction(Vanilla JavaScript)</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="使用Fetch-API取得plain-text"><a href="#使用Fetch-API取得plain-text" class="headerlink" title="使用Fetch API取得plain text"></a>使用Fetch API取得plain text</h1><h2 id="建立一個plain-text待會使用"><a href="#建立一個plain-text待會使用" class="headerlink" title="建立一個plain text待會使用"></a>建立一個plain text待會使用</h2><p><img src="https://i.imgur.com/qo8Shae.png"></p><h2 id="response印出的結果是目前response的一些狀態"><a href="#response印出的結果是目前response的一些狀態" class="headerlink" title="response印出的結果是目前response的一些狀態"></a>response印出的結果是目前response的一些狀態</h2><p><img src="https://i.imgur.com/w40HcCx.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;getText&quot;</span>&gt;Get Text&lt;/button&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;getText&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, getText);</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fetch(<span class="string">&quot;sample.txt&quot;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="確認response的text"><a href="#確認response的text" class="headerlink" title="確認response的text()"></a>確認response的text()</h2><p>想要確認response的text()，卻得到還在pending的promise，同時可以看到裡面包含著value是我們要的內容，但目前還不能使用<br><img src="https://i.imgur.com/b5iqQch.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fetch(<span class="string">&quot;sample.txt&quot;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res.text());</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="轉換response-成-text"><a href="#轉換response-成-text" class="headerlink" title="轉換response 成 text"></a>轉換response 成 text</h2><p>因為內容是plain tex所以必須轉換response 成 text<br>return其值後，再使用一次<code>.then</code>即可印出值摟!</p><p><img src="https://i.imgur.com/7sHhNNL.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fetch(<span class="string">&quot;sample.txt&quot;</span>)</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//因為內容是plain tex所以必須轉換response 成 text</span></span><br><span class="line">            <span class="keyword">return</span> res.text();</span><br><span class="line">          &#125;)</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="使用箭頭函式寫一遍"><a href="#使用箭頭函式寫一遍" class="headerlink" title="使用箭頭函式寫一遍"></a>使用箭頭函式寫一遍</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&quot;sample.txt&quot;</span>)</span><br><span class="line">          .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.text())</span><br><span class="line">          .then(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="built_in">console</span>.log(data));</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="把獲取到的plain-text-貼到DOM"><a href="#把獲取到的plain-text-貼到DOM" class="headerlink" title="把獲取到的plain text 貼到DOM"></a>把獲取到的plain text 貼到DOM</h2><p><img src="https://i.imgur.com/QBcQ8jN.png"></p><p><img src="https://i.imgur.com/aKSmxFf.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&quot;sample.txt&quot;</span>)</span><br><span class="line">          .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.text())</span><br><span class="line">          .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>).innerHTML = data;</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><h2 id="catch"><a href="#catch" class="headerlink" title="catch()"></a><code>catch()</code></h2><p>當reject情況發生的時候的時候，會跑catch內部的函式</p><p>印出錯誤訊息以及字串”err”<br><img src="https://i.imgur.com/ZPQXl47.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&quot;sample.txt&quot;</span>)</span><br><span class="line">          .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.text())</span><br><span class="line">          .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;divv&quot;</span>).innerHTML = data;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.error(err);</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><h1 id="使用Fetch-API取得JSON格式的資料"><a href="#使用Fetch-API取得JSON格式的資料" class="headerlink" title="使用Fetch API取得JSON格式的資料"></a>使用Fetch API取得JSON格式的資料</h1><h2 id="先建立一個JSON檔案待會做取用"><a href="#先建立一個JSON檔案待會做取用" class="headerlink" title="先建立一個JSON檔案待會做取用"></a>先建立一個JSON檔案待會做取用</h2><p>從這邊可以看到要操作的資料被包裹在陣列裡面<br><img src="https://i.imgur.com/jFUOq7A.png"></p><h2 id="用forEach操作陣列資料後以ES6字串串接的方式呈現"><a href="#用forEach操作陣列資料後以ES6字串串接的方式呈現" class="headerlink" title="用forEach操作陣列資料後以ES6字串串接的方式呈現"></a>用forEach操作陣列資料後以ES6字串串接的方式呈現</h2><p>因為內容是JSON格式所以必須轉換response 成 JSON格式再使用forEach去逐個印出<br>forEach內部的函式是每一個印出的user該長的樣子讓他符合html的格式後再使用innerHTML貼上去outputs<br><img src="https://i.imgur.com/Dr8rzap.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fetch(<span class="string">&quot;users.json&quot;</span>)</span><br><span class="line">          .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json())</span><br><span class="line">          .then(<span class="function">(<span class="params">users</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> outputs = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            users.forEach(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">              outputs += <span class="string">`</span></span><br><span class="line"><span class="string">              &lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;ID:<span class="subst">$&#123;user.id&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;name:<span class="subst">$&#123;user.name&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;email:<span class="subst">$&#123;user.email&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;/ul&gt;</span></span><br><span class="line"><span class="string">              `</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>).innerHTML = outputs;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h1 id="使用Fetch-API-POST-JSON格式的資料"><a href="#使用Fetch-API-POST-JSON格式的資料" class="headerlink" title="使用Fetch API POST JSON格式的資料"></a>使用Fetch API POST JSON格式的資料</h1><p>當點擊submit按鈕時，會送出POST方法。</p><p>下面有展示一些簡易的POST寫法，之後的.then處理方式是跟GET方法是一樣的</p><p><img src="https://i.imgur.com/P5SIhv4.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form id=<span class="string">&quot;addPost&quot;</span>&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;title&quot;</span> placeholder=<span class="string">&quot;Title&quot;</span>&gt;&lt;/input&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;textarea type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;body&quot;</span> placeholder=<span class="string">&quot;Body&quot;</span><span class="string">&quot;&gt;&lt;/textarea&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;</span>submit<span class="string">&quot; value=&quot;</span>submit<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;div id=&quot;</span>div<span class="string">&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      document.getElementById(&quot;</span>addPost<span class="string">&quot;).addEventListener(&quot;</span>submit<span class="string">&quot;, addPost);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      function addPost(e) &#123;</span></span><br><span class="line"><span class="string">          e.preventDefault();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          let title = document.getElementById(&quot;</span>title<span class="string">&quot;).value;</span></span><br><span class="line"><span class="string">          let body = document.getElementById(&quot;</span>body<span class="string">&quot;).value;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          fetch(&#x27;https://jsonplaceholder.typicode.com/posts&#x27;, &#123;</span></span><br><span class="line"><span class="string">              method: &#x27;POST&#x27;,</span></span><br><span class="line"><span class="string">              headers: &#123;</span></span><br><span class="line"><span class="string">                  &#x27;Accept&#x27;: &#x27;application/json, text/plain, */*&#x27;,</span></span><br><span class="line"><span class="string">                  &#x27;Content-Type&#x27;: &#x27;application/json&#x27;</span></span><br><span class="line"><span class="string">              &#125;,</span></span><br><span class="line"><span class="string">              body:JSON.stringify(&#123;title: title, body: body&#125;)</span></span><br><span class="line"><span class="string">          &#125;)</span></span><br><span class="line"><span class="string">          .then((res) =&gt;res.json())</span></span><br><span class="line"><span class="string">          .then((data) =&gt;console.log(data))</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fetch-API-Introduction-Vanilla-JavaScript&quot;&gt;&lt;a href=&quot;#Fetch-API-Introduction-Vanilla-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Fetch API </summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-網頁前端工程入門(一萬字)</title>
    <link href="http://example.com/2021/03/22/JS-%E7%B6%B2%E9%A0%81%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%85%A5%E9%96%80(%E4%B8%80%E8%90%AC%E5%AD%97)/"/>
    <id>http://example.com/2021/03/22/JS-%E7%B6%B2%E9%A0%81%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%85%A5%E9%96%80(%E4%B8%80%E8%90%AC%E5%AD%97)/</id>
    <published>2021-03-22T11:13:05.333Z</published>
    <updated>2021-03-22T11:15:47.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="網頁前端工程入門"><a href="#網頁前端工程入門" class="headerlink" title="網頁前端工程入門"></a>網頁前端工程入門</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h2 id="Javascript-簡介"><a href="#Javascript-簡介" class="headerlink" title="Javascript 簡介"></a>Javascript 簡介</h2><ul><li> 現代網頁的必需品</li><li> Java V.S Javascript</li></ul><p>接下來他介紹了可以在HTML檔案裡寫入JS的其中一種方式如下:</p><p><img src="https://i.imgur.com/czM75KC.png"></p><h2 id="Javascript-變數與運算子"><a href="#Javascript-變數與運算子" class="headerlink" title="Javascript 變數與運算子"></a>Javascript 變數與運算子</h2><ul><li>資料: 數字 字串 布林值 物件</li><li>變數: 可存放資料的空間並且它可以命名</li><li>運算子: 可對資料做操作的符號</li></ul><h3 id="單行的註解以及多行註解"><a href="#單行的註解以及多行註解" class="headerlink" title="單行的註解以及多行註解:"></a>單行的註解以及多行註解:</h3><p><img src="https://i.imgur.com/q6YqNsN.png"></p><h3 id="數字-字串-需要””包裹或是’’包裹-布林值"><a href="#數字-字串-需要””包裹或是’’包裹-布林值" class="headerlink" title="數字 字串(需要””包裹或是’’包裹) 布林值"></a>數字 字串(需要””包裹或是’’包裹) 布林值</h3><p><img src="https://i.imgur.com/0Y3B0De.png"></p><h3 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h3><ul><li> 需要宣告並且賦予值之後才能跑</li><li> 等號右邊的值被抓取給變數</li><li> 可以被覆蓋，跟文章一樣有順序由上至下</li></ul><p><img src="https://i.imgur.com/JB1XwY5.png"></p><h3 id="運算子"><a href="#運算子" class="headerlink" title="運算子"></a>運算子</h3><p>常見的有加減乘除</p><p>單元運算 <code>++</code>把數值加一<br>result<code>++</code> =&gt; result = result + 1</p><p><img src="https://i.imgur.com/tHnVQHQ.png"></p><h3 id="布林值"><a href="#布林值" class="headerlink" title="布林值"></a>布林值</h3><p>比較運算 </p><p><img src="https://i.imgur.com/DvCSF3M.png"></p><p>一個 = 是指派<br>兩個 = 是相等的值</p><p><img src="https://i.imgur.com/VAxT3TU.png"></p><p>也可以用變數做運算</p><p><img src="https://i.imgur.com/G42xNwd.png"></p><h3 id="輸入、輸出"><a href="#輸入、輸出" class="headerlink" title="輸入、輸出"></a>輸入、輸出</h3><p>使用者有感的程式:</p><p>輸入: <code>prompt(提示語,預設值)</code>-&gt; 程式做運算 -&gt; 輸出:<code>alert(資料)</code></p><p>prompt的效果裡面的提示語是字串”請輸入數字”，”1”就是預設值</p><p><img src="https://i.imgur.com/NDC9t6U.png"></p><p>一個簡單的可以跟使用者互動的程式:</p><p><img src="https://i.imgur.com/QHcrp0S.png"></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li>判斷式</li><li>迴圈</li></ul><h3 id="第一個-if"><a href="#第一個-if" class="headerlink" title="第一個: if"></a>第一個: if</h3><p><code>if()&#123;&#125;</code></p><p>當小括號的布林值為true的時候會跑後面大括號的程式，如果為false則跳過</p><p><img src="https://i.imgur.com/mUp72db.png"></p><p>像這邊就會讓使用者輸入值並去判斷大小，再根據判斷內容去決定是否跑後面的程式</p><p><img src="https://i.imgur.com/oIxiI6C.png"></p><h3 id="第二個-else"><a href="#第二個-else" class="headerlink" title="第二個:  else"></a>第二個:  else</h3><p>當if後面的比較式出錯之後就會跑else</p><p><img src="https://i.imgur.com/d4BF56Z.png"></p><h3 id="第三個-else-if"><a href="#第三個-else-if" class="headerlink" title="第三個: else if"></a>第三個: else if</h3><p>會一直做判斷如果都不是true的話則執行else</p><p><img src="https://i.imgur.com/ya7BbMw.png"></p><p>一個簡單的四則運算使用上面所學:</p><p>一個重點在於prompt會要求輸入字串所以必須做資料型態轉換</p><p><img src="https://i.imgur.com/SuiUIC0.png"></p><h2 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h2><h3 id="while迴圈-跟if不一樣的地方在while會一直跑"><a href="#while迴圈-跟if不一樣的地方在while會一直跑" class="headerlink" title="while迴圈(跟if不一樣的地方在while會一直跑)"></a>while迴圈(跟if不一樣的地方在while會一直跑)</h3><p>下圖就是個很好的while的範例，他會跑50遍在n變成51的時候跳脫迴圈被印出51</p><p><img src="https://i.imgur.com/iOoAJMj.png"></p><p>另一個很常見的1+~100:</p><p><img src="https://i.imgur.com/PQUcHTq.png"></p><h3 id="do-迴圈"><a href="#do-迴圈" class="headerlink" title="do 迴圈"></a>do 迴圈</h3><p>還有個do 迴圈跟while不一樣的是do 一定會跑至少一次，while如果條件不成立就一次都不會跑。</p><p>下圖可以觀察出do 的執行式在上面所以他一定至少會跑一次程式<br><img src="https://i.imgur.com/LY35pGc.png"></p><h3 id="for迴圈"><a href="#for迴圈" class="headerlink" title="for迴圈"></a>for迴圈</h3><ul><li>第一個分號之前initializes整個loop，同時定義binding</li><li>第二個部分check整個loop要不要繼續跑</li><li>最後一個部分更新整個loop狀態在每一次迴圈結束之後</li></ul><p><img src="https://i.imgur.com/MfL6MgZ.png"></p><h3 id="break-強制跳出迴圈"><a href="#break-強制跳出迴圈" class="headerlink" title="break 強制跳出迴圈"></a>break 強制跳出迴圈</h3><p>直接跳出迴圈印出50:</p><p><img src="https://i.imgur.com/Mcs874U.png"></p><h3 id="continue-強制進行下一次的迴圈"><a href="#continue-強制進行下一次的迴圈" class="headerlink" title="continue 強制進行下一次的迴圈"></a>continue 強制進行下一次的迴圈</h3><p>因為continue會強制進行迴圈所以下方的x被省略了25次也就是100裡面整除4的數字的數量所以印出75</p><p><img src="https://i.imgur.com/KN8UGdW.png"></p><h2 id="迴圈仔細新手教學"><a href="#迴圈仔細新手教學" class="headerlink" title="迴圈仔細新手教學"></a>迴圈仔細新手教學</h2><p>計算1+~+50:<br><img src="https://i.imgur.com/V5Q7i0G.png"></p><p>建議直接把數字帶進去可以幫助理解:<br><img src="https://i.imgur.com/DXicri4.png"></p><p>這邊來理解continue:</p><p>觀察下方追蹤的數字可以發現x必須執行兩次才會+1一次，所以印出x是50</p><p><img src="https://i.imgur.com/ZBFFWKK.png"></p><p><img src="https://i.imgur.com/m4gShlK.png"></p><h2 id="函式教學"><a href="#函式教學" class="headerlink" title="函式教學"></a>函式教學</h2><h3 id="函式基礎"><a href="#函式基礎" class="headerlink" title="函式基礎"></a>函式基礎</h3><h4 id="內建函式"><a href="#內建函式" class="headerlink" title="內建函式"></a>內建函式</h4><p>人家內建好的程式碼，例如:<br><code>alert();</code></p><h4 id="設計階段"><a href="#設計階段" class="headerlink" title="設計階段"></a>設計階段</h4><p>當多個參數的時候可以使用(,)隔開</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">message<span class="comment">//參數名稱)&#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="comment">//函式的本體</span></span></span></span><br><span class="line"><span class="function"><span class="params">    alert(message)</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure><h4 id="呼叫-使用階段"><a href="#呼叫-使用階段" class="headerlink" title="呼叫/使用階段"></a>呼叫/使用階段</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&quot;Helloe World&quot;</span><span class="comment">//傳入函式的參數資料);</span></span><br></pre></td></tr></table></figure><p>這邊的result因為上方function沒有輸入return回傳值，所以下面的alert(result)會回傳undefined</p><p><img src="https://i.imgur.com/uWbVPIC.png"></p><p>因此這邊要介紹到reture，他會把函式本體跑的結果回傳到呼叫的位置，這樣下方的alert(result)就會回傳7瞜!</p><p><img src="https://i.imgur.com/qFu3lbH.png"></p><p>return回傳明確可以做些甚麼呢?可以再利用return回傳到呼叫位置，再去做運算結果會得掉210!</p><p><img src="https://i.imgur.com/0aWqZD2.png"></p><h4 id="整合範例"><a href="#整合範例" class="headerlink" title="整合範例"></a>整合範例</h4><p>因為函式就是設定一個方法來做重複使用，所以數字上面不能寫死，用max來代替之後輸入max值之後就可以用在其他地方了</p><p><img src="https://i.imgur.com/hFagRlX.png"></p><h3 id="函式變形與名稱空間"><a href="#函式變形與名稱空間" class="headerlink" title="函式變形與名稱空間"></a>函式變形與名稱空間</h3><h4 id="函式變形"><a href="#函式變形" class="headerlink" title="函式變形"></a>函式變形</h4><p>創造函式有兩種方法:</p><p>第一種就是上面介紹的創造函式<br><img src="https://i.imgur.com/z9xYOMS.png"></p><p>第二種比較像是使用變數指派函數給變數<br><img src="https://i.imgur.com/Q8OdUrz.png"></p><p>所以她是可以這樣使用的像是變數一樣改變指派的內容一樣可以跑這個函式<br>test後面的add就代表函式的本體(因為她沒有做呼叫)<br><img src="https://i.imgur.com/6YuDkPG.png"></p><p>判別x後面的資料是什麼他就可以做甚麼事情<br><img src="https://i.imgur.com/WBxkE6L.png"></p><h4 id="函是創造新的名稱空間"><a href="#函是創造新的名稱空間" class="headerlink" title="函是創造新的名稱空間"></a>函是創造新的名稱空間</h4><p>變數找不到往外找</p><p>!!外部的程式碼不能使用內部的變數!!</p><p><img src="https://i.imgur.com/iv0M4uM.png"></p><h2 id="物件object"><a href="#物件object" class="headerlink" title="物件object"></a>物件object</h2><h3 id="建立物件"><a href="#建立物件" class="headerlink" title="建立物件:"></a>建立物件:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">point.x=<span class="number">3</span>; <span class="comment">//物件裡面裝的東西不是函式就是屬性</span></span><br><span class="line">point.y=<span class="number">4</span>;</span><br><span class="line">point.getPosition=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//如果是函式就是方法</span></span><br><span class="line">alert(<span class="built_in">this</span>.x+<span class="built_in">this</span>.y);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用物件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//這邊跟函式的呼叫很像</span></span><br><span class="line">point.getPosition();</span><br></pre></td></tr></table></figure><p>綜合範例</p><p><img src="https://i.imgur.com/6Y008E5.png"></p><h3 id="使用建構式"><a href="#使用建構式" class="headerlink" title="使用建構式:"></a>使用建構式:</h3><p>建構式就是要取代設計的部分讓未來要產生類似的物件的時候會更輕鬆</p><p>建構式的函式呼叫必須加上new</p><p>　<img src="https://i.imgur.com/BwJ96JP.png"></p><p>紅框框的部分是讓這個函式可以讓複數的變數呼叫</p><p><img src="https://i.imgur.com/52TGuOM.png"></p><h2 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h2><h3 id="基本教學"><a href="#基本教學" class="headerlink" title="基本教學"></a>基本教學</h3><p>然後有個小地方windows這個部分可以不寫程式一樣可以正常執行</p><p>這張圖特別重要這張圖就代表DOM<br><img src="https://i.imgur.com/MfGGsvP.png"></p><p>下圖可以看出那個樹狀圖出現在程式碼中並且加上一個innerHTML去修改裡面的內容:</p><p><img src="https://i.imgur.com/fDEaHMp.png"></p><p>但是他修改整個body會導致泛用性不高因此可以這樣改:</p><p>使用getElementId的工具來取的id來做修改這樣子就到處都可以用摟!</p><p><img src="https://i.imgur.com/p2nuB1D.png"></p><p>剛剛上面都是修改內容其實還可以修改CSS:</p><p>這邊有個重點因為CSS裡面有很多功能有包含(-)JS不能使用，因此都改成字首大寫例如:font-weight會改成fontWeight</p><p><img src="https://i.imgur.com/RW70Ynv.png"></p><h3 id="選單操作開合範例"><a href="#選單操作開合範例" class="headerlink" title="選單操作開合範例"></a>選單操作開合範例</h3><p>使用onclick在HTML裡面，並且設定id去操作:</p><p><img src="https://i.imgur.com/ZmJX3be.png"></p><p>不過在搭配class 選擇器使用之後可以讓他更精簡:</p><p><img src="https://i.imgur.com/apqRb7S.png"></p><p><img src="https://i.imgur.com/l5oNcaM.png"></p><p>接下來當選單不只一個需要開闔的時候就可以放入編號:</p><p>並且在選單處的id放入編號就可以針對點擊的選單收放摟!</p><p><img src="https://i.imgur.com/u22EjXv.png"></p><h2 id="事件處理"><a href="#事件處理" class="headerlink" title="事件處理"></a>事件處理</h2><h3 id="基本教學-1"><a href="#基本教學-1" class="headerlink" title="基本教學"></a>基本教學</h3><p>基本上任何標籤都可以加上事件處理:on+事件的名稱</p><p>當使用者對畫面做出動作的時候，程式必須偵測到這個動作並且做出反應</p><p>最簡單的就是點擊<code>onclick</code>:</p><p><img src="https://i.imgur.com/zNACDqg.png"></p><p>類似CSS裡面的hover功能:</p><p><code>onmouseover</code></p><p><code>onmouseout</code></p><p><img src="https://i.imgur.com/NbmZWGh.png"></p><p><img src="https://i.imgur.com/V1lhneK.png"></p><p>靜態的事件處理器:</p><p>直接寫入HTML裡面，不推薦這樣寫<br><img src="https://i.imgur.com/VOqJuIx.png"></p><p>動態的事件處理器:</p><p>必須先在要處理的tag裡面設置id，這邊是設置”btn”</p><p>下方的addEvenListener是比較好的寫法</p><p><img src="https://i.imgur.com/NbK1u2M.png"></p><p>有很多的功能參數使用在事件裡面，例如: click, mouseover, focus, blur….<br><img src="https://i.imgur.com/H0oIswo.png"></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/Events">MDN網站:事件參考</a></p><h3 id="事件物件的取得和使用"><a href="#事件物件的取得和使用" class="headerlink" title="事件物件的取得和使用"></a>事件物件的取得和使用</h3><p>這是個簡單的跳出式窗hello的程式在你點擊瀏覽器之後</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 這邊這個init會對應到HTML中tag裡面</span></span><br><span class="line">    <span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> handler=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 註冊函式</span></span><br><span class="line">        alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    btn.addEventListener(<span class="string">&quot;click&quot;</span>, handler); <span class="comment">// 註冊事件處理器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有三件事情會發生在當你點擊瀏覽器上的物件後:</p><ul><li>使用者點擊了按鈕，觸發了click事件</li><li>瀏覽器主動收集和事件有關的資訊，並製造出Even object 事件物件<br>var eventobj=事件物件</li><li>呼叫已經註冊的事件處理器(事件處理函式)</li></ul><p>這要先做取得事件物件:</p><p>這邊的事件物件就是滑鼠的座標</p><p><img src="https://i.imgur.com/9E4QuzQ.png"></p><p>這邊的事件物件就是鍵盤的代表的值</p><p>比較特別的點是他直接把註冊的函式直接寫入處理器裡面，這種作法叫做匿名函式直接當作事件處理使用<br><img src="https://i.imgur.com/bSWS2AZ.png"></p><h2 id="自動排程"><a href="#自動排程" class="headerlink" title="自動排程"></a>自動排程</h2><p>一個簡單的基本例子:</p><p>讓瀏覽器在1秒之後跳出alert視窗說HELLO</p><p><img src="https://i.imgur.com/j8e2oJo.png"></p><p>一般自動排程的應用</p><p>這邊介紹<code>window.setTimeout</code>這個倒數工具:</p><p><img src="https://i.imgur.com/OJXsARi.png"></p><p><code>window.setIterval</code></p><p>使用這個工具的話就不需要再if那邊再重新倒數一次因為它會在設定的時間後每次都執行一次:</p><p><img src="https://i.imgur.com/73wUXNE.png"></p><h2 id="跨平台的網頁伺服器架設教學"><a href="#跨平台的網頁伺服器架設教學" class="headerlink" title="跨平台的網頁伺服器架設教學"></a>跨平台的網頁伺服器架設教學</h2><p><a href="https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb/related">chrome插件網址</a></p><ul><li>程式中選擇資料夾</li><li>開啟伺服器或式關閉伺服器按鈕</li><li>測試網站的網址</li></ul><p><img src="https://i.imgur.com/GmiEH3q.png"></p><p>下方有個可以輸入port值，當要正式上線的時候可以使用80這個值</p><p><img src="https://i.imgur.com/p57vPB1.png"></p><p>在資料夾裡面放入HTML檔就可以測試檔案瞜!</p><h2 id="Ajax教學-JS-與伺服器的互動"><a href="#Ajax教學-JS-與伺服器的互動" class="headerlink" title="Ajax教學 - JS 與伺服器的互動"></a>Ajax教學 - JS 與伺服器的互動</h2><blockquote><p>用程式來做網路的連線就是Ajax</p></blockquote><p>這邊有使用到 <code>get</code> 來送出資料在使用onload來把資料載入頁面藉由搜尋HTML裡面的id處理</p><p><img src="https://i.imgur.com/hIYACq3.png"></p><h2 id="JSON基本教學"><a href="#JSON基本教學" class="headerlink" title="JSON基本教學"></a>JSON基本教學</h2><p>Javascript object Notation(Javascript 物件表示法)</p><p>JSON可以讓一般object做到比較簡潔寫法</p><p>上下兩個表達一樣的東西:<br><img src="https://i.imgur.com/IZFF1lD.png"></p><p><code>JSON.stringify</code><br>回應使用JSON編碼過後的內容回來並且轉換成字串，但是它會忽略函式(get不見了)<br>把上面的point轉換成字串輸出<br><img src="https://i.imgur.com/OkrD8Bh.png"><br><img src="https://i.imgur.com/XZt8be4.png"></p><p><code>JSON.parse</code><br>擷取出被編譯前的內容出來將字串轉換成物件結構又轉換回來的概念<br><img src="https://i.imgur.com/AyDf3mL.png"><br><img src="https://i.imgur.com/JUwM7IJ.png"></p><h2 id="Hoisting-宣告提升"><a href="#Hoisting-宣告提升" class="headerlink" title="Hoisting 宣告提升"></a>Hoisting 宣告提升</h2><p>前端工程師面式的常見議題:</p><h3 id="變數與函式的宣告提升-Hoisting"><a href="#變數與函式的宣告提升-Hoisting" class="headerlink" title="變數與函式的宣告提升 Hoisting"></a>變數與函式的宣告提升 Hoisting</h3><p>JS程式在執行的時候會內建把變數往上提升，所以就算這樣寫，跑出來的結果也是正常的10</p><p><img src="https://i.imgur.com/sqSdBm0.png"></p><p>這邊要特別注意只有宣告變數提升而已，給定初始值並不會提升所以這邊的結果會印出undefined</p><p><img src="https://i.imgur.com/yUgavdK.png"></p><p>在JS裡面可以先呼叫函式在寫宣告也一樣可以執行，因為函式的宣告跟變數的宣告一樣會被提升到程式的最上方<br><img src="https://i.imgur.com/oYRQ5pt.png"></p><p>這邊一樣要特別注意的點是變數一樣只有宣告的部分提升函式的部分留在原地所以一樣沒有執行</p><p><img src="https://i.imgur.com/H91XNnV.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;網頁前端工程入門&quot;&gt;&lt;a href=&quot;#網頁前端工程入門&quot; class=&quot;headerlink&quot; title=&quot;網頁前端工程入門&quot;&gt;&lt;/a&gt;網頁前端工程入門&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;tags-Javascript-relate&quot;&gt;&lt;a href=&quot;#ta</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-Practice (5000字)</title>
    <link href="http://example.com/2021/03/22/JS-Practice/"/>
    <id>http://example.com/2021/03/22/JS-Practice/</id>
    <published>2021-03-22T11:13:05.333Z</published>
    <updated>2021-03-22T11:19:19.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-Practice"><a href="#JS-Practice" class="headerlink" title="JS Practice"></a>JS Practice</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="製作一個紅綠燈"><a href="#製作一個紅綠燈" class="headerlink" title="製作一個紅綠燈"></a>製作一個紅綠燈</h1><h2 id="成品"><a href="#成品" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/OlFszR9.gif"></p><p><a href="">成品網址</a></p><h2 id="成品功能"><a href="#成品功能" class="headerlink" title="成品功能:"></a>成品功能:</h2><ol><li>預設起始點是亮紅燈</li><li>每秒換一個燈色</li><li>循環順序是紅 =&gt; 黃 =&gt; 綠</li></ol><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>HTML很單純的顯示三個圓圈跟紅綠燈的身體<br>比較特殊的是color屬性</p><h2 id="html程式碼"><a href="#html程式碼" class="headerlink" title="html程式碼:"></a>html程式碼:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;circle red&quot; color&#x3D;&quot;red&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;circle&quot; color&#x3D;&quot;yellow&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;circle&quot; color&#x3D;&quot;green&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h1><p>.circle:after 處理立體感燈泡</p><ul><li>使用after創造出來的block</li><li>把after的background-color:red 先設定出來比較好處理</li><li>右側用border-right做出粉紅色的邊邊來當作陰影(紅色箭頭處)</li><li>再使用borderj-radius後就會呈現半月形狀</li><li>最後去除掉background-color:red就可以得到立體感的燈泡!<br><img src="https://i.imgur.com/qmNsp0u.png"> =&gt; <img src="https://i.imgur.com/qulDZo1.png"> =&gt; <img src="https://i.imgur.com/eECGhCM.png"></li></ul><h2 id="CSS完整程式碼"><a href="#CSS完整程式碼" class="headerlink" title="CSS完整程式碼"></a>CSS完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> * &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1abc9c</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.circle</span>:after &#123;</span><br><span class="line">    content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">4px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.6</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#c0392b</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">5px</span> <span class="number">#c0392b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-class">.yellow</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f1c40f</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">5px</span> <span class="number">#f1c40f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-class">.green</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#2ecc71</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">5px</span> <span class="number">#2ecc71</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS"><a href="#JS" class="headerlink" title="JS:"></a>JS:</h1><h2 id="變數設置"><a href="#變數設置" class="headerlink" title="變數設置"></a>變數設置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> circles = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.circle&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/r9DR7KE.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> activeLight = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> currenLight = circles[activeLight];</span><br></pre></td></tr></table></figure><ul><li>activeLight代表circle的index</li><li>circles[activeLight]就是顯示當前亮甚麼燈號</li></ul><p><img src="https://i.imgur.com/SgbZy1k.png"></p><h2 id="functions"><a href="#functions" class="headerlink" title="functions:"></a>functions:</h2><ul><li><code>setInterval()</code> - 每秒執行一次更換燈號</li><li><code>changeLight()</code> - 因為基礎燈號一開設置在red燈，所以程式開頭先把當前的class轉回circle也就是代表熄燈，隨後增加circle的index號碼因為要讓燈號跑到下一個，接下來做if判斷式讓index跑到底時，可以繞回 0也就是回到紅燈，最後把當前的燈號currenLight的class加上 對應的div 屬性 也就是加上color內的內容，就可以切換到下一個燈號了</li></ul><p>步驟:</p><ol><li>把當前燈號關閉(轉換class回到circle)</li><li>把index號碼往前進<code>activeLight++;</code></li><li>if判斷式處理當index號碼超過2時要回到0</li><li>把上面index已經往前的號碼填入circle[]抓取currentLight當前亮的燈號</li><li>抓好後處理他的class抓取當前燈號div的 color屬性也就是對應的顏色(red, yellow, green)</li></ol><h2 id="JS完整程式碼"><a href="#JS完整程式碼" class="headerlink" title="JS完整程式碼:"></a>JS完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> circles = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.circle&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> activeLight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(changeLight, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeLight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 預設值是亮紅燈這行的用處在於取消red的class變回circle</span></span><br><span class="line">    <span class="comment">// circles[0] = red</span></span><br><span class="line">    circles[activeLight].className = <span class="string">&#x27;circle&#x27;</span>;</span><br><span class="line">    activeLight++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (activeLight &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        activeLight = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> currenLight = circles[activeLight];</span><br><span class="line">    currenLight.classList.add(currenLight.getAttribute(<span class="string">&#x27;color&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="製作一個老爸笑話產生器"><a href="#製作一個老爸笑話產生器" class="headerlink" title="製作一個老爸笑話產生器"></a>製作一個老爸笑話產生器</h1><h2 id="成品-1"><a href="#成品-1" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/3L2rtUc.png"></p><p><a href="">成品網址</a></p><h2 id="成品功能-1"><a href="#成品功能-1" class="headerlink" title="成品功能:"></a>成品功能:</h2><ol><li>點擊Get Another joke就會取得一則新的笑話</li></ol><h1 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h1><ul><li>容器包住全部</li><li>h3</li><li>div 裡面處理js產生笑話</li><li>按鈕</li></ul><h2 id="html程式碼-1"><a href="#html程式碼-1" class="headerlink" title="html程式碼:"></a>html程式碼:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;h3&gt;Don&#39;t laugh challenge&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;joke&quot; class&#x3D;&quot;joke&quot;&gt;</span><br><span class="line">            &#x2F;&#x2F;here goes the joke</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;get_joke&quot; class&#x3D;&quot;btn&quot;&gt;</span><br><span class="line">            Get Another Joke</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h1 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li>簡單修飾容器不多作介紹</li></ul><h2 id="CSS完整程式碼-1"><a href="#CSS完整程式碼-1" class="headerlink" title="CSS完整程式碼"></a>CSS完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;https://fonts.googleapis.com/css?family=Muli&amp;display=swap&#x27;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#686de0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Muli&#x27;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">50px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>), <span class="number">0</span> <span class="number">6px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.joke</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#9f68e0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>), <span class="number">0</span> <span class="number">6px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.98</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-1"><a href="#JS-1" class="headerlink" title="JS:"></a>JS:</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p><a href="https://icanhazdadjoke.com/api">icanhazdadjoke API位置以及使用說明</a></p><p>因為我們要使用JSON格式</p><p><img src="https://i.imgur.com/HdHkok2.png"></p><h2 id="變數設置-1"><a href="#變數設置-1" class="headerlink" title="變數設置"></a>變數設置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jokeEl = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;joke&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/OIMbsYD.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> get_joke = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;get_joke&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/oEboUWY.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> joke = <span class="keyword">await</span> jokeRes.json();</span><br></pre></td></tr></table></figure><p>fetch回來的資料裡面的joke就是要取用的部分<br><img src="https://i.imgur.com/k2II9Tb.png"></p><h2 id="functions-1"><a href="#functions-1" class="headerlink" title="functions:"></a>functions:</h2><ul><li><code>generateJoke()</code></li></ul><ol><li>jokeRes 變數等待fetch回傳的資料</li><li>joke 變數等待jokeRes從json格式轉回來得到下圖內容並且使用joke.joke取用後</li></ol><p><img src="https://i.imgur.com/e0Crd1A.png"></p><ol start="3"><li>最後貼上jokeEl的HTML上面</li></ol><h2 id="事件監聽"><a href="#事件監聽" class="headerlink" title="事件監聽"></a>事件監聽</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_joke.addEventListener(<span class="string">&#x27;click&#x27;</span>, generateJoke);</span><br></pre></td></tr></table></figure><p>點擊觸發<code>generateJoke()</code>產生笑話</p><h2 id="JS完整程式碼-1"><a href="#JS完整程式碼-1" class="headerlink" title="JS完整程式碼:"></a>JS完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jokeEl = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;joke&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> get_joke = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;get_joke&#x27;</span>);</span><br><span class="line"></span><br><span class="line">get_joke.addEventListener(<span class="string">&#x27;click&#x27;</span>, generateJoke);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">generateJoke</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// call the icanhaz API</span></span><br><span class="line">    <span class="keyword">const</span> jokeRes = <span class="keyword">await</span> fetch(<span class="string">&#x27;https://icanhazdadjoke.com/&#x27;</span>, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> joke = <span class="keyword">await</span> jokeRes.json();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(joke);</span><br><span class="line">    <span class="comment">//set the new joke to</span></span><br><span class="line">    jokeEl.innerHTML = joke.joke;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="製作一個動畫旋轉圈圈"><a href="#製作一個動畫旋轉圈圈" class="headerlink" title="製作一個動畫旋轉圈圈"></a>製作一個動畫旋轉圈圈</h1><h2 id="成品-2"><a href="#成品-2" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/zpADG4D.gif"></p><p><a href="">成品網址</a></p><h2 id="成品功能-2"><a href="#成品功能-2" class="headerlink" title="成品功能:"></a>成品功能:</h2><h1 id="HTML-2"><a href="#HTML-2" class="headerlink" title="HTML"></a>HTML</h1><p>要幾個圈圈可以自訂</p><h2 id="html程式碼-2"><a href="#html程式碼-2" class="headerlink" title="html程式碼:"></a>html程式碼:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;circle&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;circle&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;circle&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h1 id="CSS-2"><a href="#CSS-2" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li>body部分做全置中</li><li>container做一開始的定位(把半圓轉到上面)</li><li>使用border做出直線(dashed)，之後使用<code>border-radius:50%</code>成圓形</li><li>這兩個屬性作出半圓來<br>(border-top-color: #fff;<br>border-right-color: #fff;)</li><li>box-shadow讓每個圓有邊框</li></ul><p>(沒有做box-shadow的話會長這樣全部黏在一起)<br><img src="https://i.imgur.com/yzS5ec7.png"></p><p>(做出box-shado之後的效果)<br><img src="https://i.imgur.com/d9zoVO0.png"></p><ul><li><code>transform: translate(-50%, -50%)</code>為了讓圓形置中到圓心</li></ul><h2 id="讓半圓轉起來"><a href="#讓半圓轉起來" class="headerlink" title="讓半圓轉起來"></a>讓半圓轉起來</h2><p>下方是示範使用CSS來寫如何讓讓半圓轉起來<br>針對每一圈的border做處理</p><ul><li>修改大小</li><li>修改旋轉角度，這邊很有趣因為每一圈都是以360deg的倍數所以一定會一瞬間是所有半圓都會聚集變回半圓，也算是這個特效的看點</li><li>很重要的部分<code>transform: translate(-50%, -50%)</code>的全置中效果一樣必須寫進來不能只寫rotate進去@keyframes裡面不然特效會跑掉</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> dashed <span class="number">#111</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-right-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">animation</span>: rotateA <span class="number">3s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rotateA &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">40px</span> dashed <span class="number">#111</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-right-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">animation</span>: rotateB <span class="number">3s</span> ease-in-out infinite;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rotateB &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">720deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.circle</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">30px</span> dashed <span class="number">#111</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-right-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">animation</span>: rotateC <span class="number">3s</span> ease-in-out infinite;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rotateC &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">1080deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="CSS完整程式碼-2"><a href="#CSS完整程式碼-2" class="headerlink" title="CSS完整程式碼"></a>CSS完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">135deg</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">60px</span> dashed <span class="number">#111</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-right-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">animation</span>: rotate <span class="number">7s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-2"><a href="#JS-2" class="headerlink" title="JS:"></a>JS:</h1><h2 id="變數設置-2"><a href="#變數設置-2" class="headerlink" title="變數設置"></a>變數設置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> circles = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.circle&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/wqDg92e.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> style = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>);</span><br></pre></td></tr></table></figure><p>輸出在body內修飾半圓內部填入<code>@keyframes</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deg = (idx + <span class="number">1</span>) * <span class="number">360</span>;</span><br></pre></td></tr></table></figure><p>deg代表每圈的旋轉角度</p><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach:"></a>forEach:</h2><h3 id="forEach的輸出結果"><a href="#forEach的輸出結果" class="headerlink" title="forEach的輸出結果:"></a>forEach的輸出結果:</h3><p>利用forEach輸出circle的index的方式處理下面三個屬性:</p><ul><li>border-widht</li><li>z-index</li><li>animation-name</li></ul><p><img src="https://i.imgur.com/7DJvsSj.png"></p><h3 id="keyframes的輸出結果"><a href="#keyframes的輸出結果" class="headerlink" title="keyframes的輸出結果:"></a>keyframes的輸出結果:</h3><ul><li>translate的部分就固定</li><li>主要使用idx更改旋轉角度<code>const deg = (idx + 1) * 360;</code></li></ul><p><img src="https://i.imgur.com/4rq2d5Q.png"></p><h2 id="JS完整程式碼-2"><a href="#JS完整程式碼-2" class="headerlink" title="JS完整程式碼:"></a>JS完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> circles = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.circle&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> style = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> styleInner = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">circles.forEach(<span class="function">(<span class="params">circle, idx</span>) =&gt;</span> &#123;</span><br><span class="line">    circle.style.borderWidth = (idx + <span class="number">1</span>) * <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    circle.style.zIndex = -idx;</span><br><span class="line">    circle.style.animationName = <span class="string">`rotate-<span class="subst">$&#123;idx&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> deg = (idx + <span class="number">1</span>) * <span class="number">360</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> style = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">    styleInner += <span class="string">`</span></span><br><span class="line"><span class="string">@keyframes rotate-<span class="subst">$&#123;idx&#125;</span> &#123;</span></span><br><span class="line"><span class="string">to &#123;</span></span><br><span class="line"><span class="string">transform: translate(-50%, -50%) rotate(<span class="subst">$&#123;deg&#125;</span>deg);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">style.innerHTML = styleInner;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(style);</span><br></pre></td></tr></table></figure><h1 id="製作一個進度條"><a href="#製作一個進度條" class="headerlink" title="製作一個進度條"></a>製作一個進度條</h1><h2 id="成品-3"><a href="#成品-3" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/bBORPz2.gif"></p><p><a href="">成品網址</a></p><h2 id="成品功能-3"><a href="#成品功能-3" class="headerlink" title="成品功能:"></a>成品功能:</h2><ul><li>當頁面刷新時會更新進度條</li></ul><h1 id="HTML-3"><a href="#HTML-3" class="headerlink" title="HTML"></a>HTML</h1><ul><li>這邊的data-done是給JS做選取使用</li></ul><h2 id="html程式碼-3"><a href="#html程式碼-3" class="headerlink" title="html程式碼:"></a>html程式碼:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;progress-done&quot; data-done&#x3D;&quot;70&quot;&gt;</span><br><span class="line">            70%</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h1 id="CSS-3"><a href="#CSS-3" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li>漸層色的處<br>左邊的顏色會顯示在右邊，反之亦然</li><li>在JS處理<br>opacity顯示0<br>width顯示0</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to left, <span class="number">#f2709c</span>(顯示在右側), <span class="number">#ff9472</span>);</span><br></pre></td></tr></table></figure><h2 id="CSS完整程式碼-3"><a href="#CSS完整程式碼-3" class="headerlink" title="CSS完整程式碼"></a>CSS完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;https://fonts.googleapis.com/css?family=Montserrat&amp;display=swap&#x27;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Montserrat&#x27;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#d8d8d8</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-done</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span> -<span class="number">5px</span> <span class="number">#f2709c</span>, <span class="number">0</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#f2709c</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to left, <span class="number">#f2709c</span>, <span class="number">#ff9472</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-3"><a href="#JS-3" class="headerlink" title="JS:"></a>JS:</h1><ul><li>藉由html設定好的data-done由JS讀其值後動態呈現width</li><li>並且更改opacity為1</li></ul><p><img src="https://i.imgur.com/XNCVd6X.png"></p><h2 id="變數設置-3"><a href="#變數設置-3" class="headerlink" title="變數設置"></a>變數設置</h2><p>內部進度條的部分<br><img src="https://i.imgur.com/DP46VDz.png"></p><h2 id="JS完整程式碼-3"><a href="#JS完整程式碼-3" class="headerlink" title="JS完整程式碼:"></a>JS完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> progress = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.progress-done&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    progress.style.width = progress.getAttribute(<span class="string">&#x27;data-done&#x27;</span>) + <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    progress.style.opacity = <span class="number">1</span>;</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure><h1 id="製作一個下雪背景"><a href="#製作一個下雪背景" class="headerlink" title="製作一個下雪背景"></a>製作一個下雪背景</h1><h2 id="成品-4"><a href="#成品-4" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/srk8m46.gif"></p><p><a href="">成品網址</a></p><h2 id="成品功能-4"><a href="#成品功能-4" class="headerlink" title="成品功能:"></a>成品功能:</h2><ul><li>背景會下雪</li><li>雪花位置、大小、景深都隨機</li></ul><h1 id="HTML-4"><a href="#HTML-4" class="headerlink" title="HTML"></a>HTML</h1><ul><li>需要引入fontawesome</li><li>雪花會從JS製造</li></ul><h2 id="html程式碼-4"><a href="#html程式碼-4" class="headerlink" title="html程式碼:"></a>html程式碼:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;kit.fontawesome.com&#x2F;2ae9e2b502.js&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h1 id="CSS-4"><a href="#CSS-4" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li>使用絕對定位因為會在JS設定位置</li><li>animation使用forwards表示動畫結會停在結束的狀態</li><li>translateY設定105vh要展示出從螢幕上方掉下來所以設定超出視窗</li></ul><h2 id="CSS完整程式碼-4"><a href="#CSS完整程式碼-4" class="headerlink" title="CSS完整程式碼"></a>CSS完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#323975</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fa-snowflake</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">animation</span>: fall linear forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> fall &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">105vh</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-4"><a href="#JS-4" class="headerlink" title="JS:"></a>JS:</h1><h2 id="變數設置-4"><a href="#變數設置-4" class="headerlink" title="變數設置"></a>變數設置</h2><p>抓取創造的雪花</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> snow_flake = <span class="built_in">document</span>.createElement(<span class="string">&#x27;i&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="functions-2"><a href="#functions-2" class="headerlink" title="functions:"></a>functions:</h2><p><code>createSnowFlake()</code></p><ul><li>創造出i tag後加上class讓它可以吃到css的修飾</li><li>Math.random()會產出 0~1之間的小數</li><li>讓雪花的位置隨機 innerwidth乘上Math.random()代表雪花出現的寬度介在0~整個瀏覽器的寬度</li><li>讓雪花持續時間隨機 因為我們設定setTimeout為五秒所以最少持續兩秒最多五秒</li><li>透明度以及雪花大小 透明度就直接random很方便; 大小的部份讓他們保持在10~20之間不要大的太誇張</li></ul><h2 id="JS完整程式碼-4"><a href="#JS完整程式碼-4" class="headerlink" title="JS完整程式碼:"></a>JS完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(createSnowFlake, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSnowFlake</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> snow_flake = <span class="built_in">document</span>.createElement(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">    snow_flake.classList.add(<span class="string">&#x27;fas&#x27;</span>);</span><br><span class="line">    snow_flake.classList.add(<span class="string">&#x27;fa-snowflake&#x27;</span>);</span><br><span class="line">    snow_flake.style.left = <span class="built_in">Math</span>.random() * <span class="built_in">window</span>.innerWidth + <span class="string">`px`</span>;</span><br><span class="line">    snow_flake.style.animationDuration = <span class="built_in">Math</span>.random() * <span class="number">3</span> + <span class="number">2</span> + <span class="string">`s`</span>; <span class="comment">//數字會介於2~5之間</span></span><br><span class="line">    snow_flake.style.opacity = <span class="built_in">Math</span>.random(); <span class="comment">//給的數字會介於1~0之間 做景深相關的特效</span></span><br><span class="line">    snow_flake.style.fontSize = <span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">10</span> + <span class="string">`px`</span>; <span class="comment">//做出不同大小</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(snow_flake);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        snow_flake.remove();</span><br><span class="line">    &#125;, <span class="number">5000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="製作一個神奇寶貝圖鑑"><a href="#製作一個神奇寶貝圖鑑" class="headerlink" title="製作一個神奇寶貝圖鑑"></a>製作一個神奇寶貝圖鑑</h1><h2 id="成品-5"><a href="#成品-5" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/zJTLZQn.png"></p><p><a href="">成品網址</a></p><h2 id="成品功能-5"><a href="#成品功能-5" class="headerlink" title="成品功能:"></a>成品功能:</h2><ol><li>依照圖鑑順序顯示神奇寶貝</li><li>針對不同屬性呈現不同顏色</li><li>有RWD效果</li></ol><h1 id="HTML-5"><a href="#HTML-5" class="headerlink" title="HTML"></a>HTML</h1><p>基本上都是藉由JS產生所以的div</p><h2 id="html程式碼-5"><a href="#html程式碼-5" class="headerlink" title="html程式碼:"></a>html程式碼:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;PokeDex&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;poke_container&quot; class&#x3D;&quot;poke-container&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h1 id="CSS-5"><a href="#CSS-5" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li><p>pokemon-contaienr<br>使用flex-wrap:wrap是整個排版的重點讓圖鑑可以分行排版<br>並且全置中</p></li><li><p>.pokemon .img-container img<br>為了使用RWD使用<code>max-width: 90%;</code>也代表父母層的90%也就是120px*0.9=108</p></li></ul><h2 id="CSS完整程式碼-5"><a href="#CSS完整程式碼-5" class="headerlink" title="CSS完整程式碼"></a>CSS完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;https://fonts.googleapis.com/css?family=Muli&amp;display=swap&#x27;</span>);</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;https://fonts.googleapis.com/css?family=Lato:300,400&amp;display=swap&#x27;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#EFEFBB</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#D4D3DD</span>, <span class="number">#EFEFBB</span>);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Lato&#x27;</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.poke-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pokemon</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*     這邊的背景色是因為修飾使用做好JS後可以刪除 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pokemon</span> <span class="selector-class">.img-container</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.6</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pokemon</span> <span class="selector-class">.img-container</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">90%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pokemon</span> <span class="selector-class">.info</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pokemon</span> <span class="selector-class">.number</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.8em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pokemon</span> <span class="selector-class">.name</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0</span> <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-5"><a href="#JS-5" class="headerlink" title="JS:"></a>JS:</h1><h2 id="變數設置-5"><a href="#變數設置-5" class="headerlink" title="變數設置"></a>變數設置</h2><h3 id="全域變數"><a href="#全域變數" class="headerlink" title="全域變數"></a>全域變數</h3><ul><li><p>poke_container<br><img src="https://i.imgur.com/0EZjDSP.png"></p></li><li><p>pokemons_number = 150<br>主要使用在要逐個印出神奇寶貝的<code>fetchPokemons()</code>函式裡</p></li><li><p>main_types<br>取出物件colors裡面的key值</p></li><li><p>colors<br>設置不同屬性的神奇寶貝不同的顏色</p></li></ul><h3 id="getPokemon-內部變數"><a href="#getPokemon-內部變數" class="headerlink" title="getPokemon()內部變數"></a>getPokemon()內部變數</h3><ul><li><p>url<br>名字跟屬性的來源</p></li><li><p>res<br>回傳回來的url 資料</p></li><li><p>pokemon<br>轉檔成json使用並且傳入<code>createPokemonCard(pokemon);</code></p></li></ul><h3 id="createPokemonCard-內部變數"><a href="#createPokemonCard-內部變數" class="headerlink" title="createPokemonCard()內部變數"></a>createPokemonCard()內部變數</h3><ul><li><p>pokemonEl<br><img src="https://i.imgur.com/tLgjn6F.png"></p></li><li><p>poke_types<br>使map逐個印出每個神奇寶貝的types名稱<br><img src="https://i.imgur.com/xusdD57.png"></p></li><li><p>name<br>為了讓名字第一個字可以大寫所以使用name[0]抓取第一個字並且使用toUppercase()<br>並且串接上name.slice(1)也就是切掉第一個字母的單字就完成瞜!</p></li><li><p>type<br>使用find()來回傳第一個找到的值並填入color給不同總類的神奇寶貝上不同背景色</p></li><li><p>color<br>使用find()來回傳第一個找到的值並填入color給不同總類的神奇寶貝上不同背景色</p></li><li><p>pokeInnerHTML<br>整個要印出在DOM上面的html架構</p></li></ul><h2 id="functions-3"><a href="#functions-3" class="headerlink" title="functions:"></a>functions:</h2><ul><li><p><code>getPokemon()</code><br>從API擷取資下來並且傳入createPokemonCard中</p></li><li><p><code>fetchPokemons()</code><br>逐個擷取並且印出getPokemon()得到的資料</p></li><li><p><code>createPokemonCard()</code></p></li></ul><ol><li>創造div並加上class</li><li>取得神奇寶貝的type並且嵌入color使顏色隨屬性呈現</li><li>實際HTML內的撰寫並填入相應的API內容</li><li>把HTML填入pokemonEl</li><li>把poke_contaienr填入最後完成pokemonEl</li></ol><p>使用<code>pokemon.id.toString().padStart(3,&quot;0&quot;)</code><br>讓神奇寶貝編碼變成三位數<br><code>padStart(3,&quot;0&quot;)</code> 代表把內容物填充到三位數並且從0開頭(ex. 001,002,003)</p><h2 id="JS完整程式碼-5"><a href="#JS完整程式碼-5" class="headerlink" title="JS完整程式碼:"></a>JS完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> poke_container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;poke_container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pokemons_number = <span class="number">150</span>;</span><br><span class="line"><span class="keyword">const</span> colors = &#123;</span><br><span class="line">    fire: <span class="string">&#x27;#FDDFDF&#x27;</span>,</span><br><span class="line">    grass: <span class="string">&#x27;#DEFDE0&#x27;</span>,</span><br><span class="line">    electric: <span class="string">&#x27;#FCF7DE&#x27;</span>,</span><br><span class="line">    water: <span class="string">&#x27;#DEF3FD&#x27;</span>,</span><br><span class="line">    ground: <span class="string">&#x27;#f4e7da&#x27;</span>,</span><br><span class="line">    rock: <span class="string">&#x27;#d5d5d4&#x27;</span>,</span><br><span class="line">    fairy: <span class="string">&#x27;#fceaff&#x27;</span>,</span><br><span class="line">    poison: <span class="string">&#x27;#98d7a5&#x27;</span>,</span><br><span class="line">    bug: <span class="string">&#x27;#f8d5a3&#x27;</span>,</span><br><span class="line">    dragon: <span class="string">&#x27;#97b3e6&#x27;</span>,</span><br><span class="line">    psychic: <span class="string">&#x27;#eaeda1&#x27;</span>,</span><br><span class="line">    flying: <span class="string">&#x27;#F5F5F5&#x27;</span>,</span><br><span class="line">    fighting: <span class="string">&#x27;#E6E0D4&#x27;</span>,</span><br><span class="line">    normal: <span class="string">&#x27;#F5F5F5&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main_types = <span class="built_in">Object</span>.keys(colors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(main_types);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetchPokemons = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; pokemons_number; i++) &#123;</span><br><span class="line">        <span class="keyword">await</span> getPokemon(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getPokemon = <span class="keyword">async</span> id =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`https://pokeapi.co/api/v2/pokemon/<span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">const</span> pokemon = <span class="keyword">await</span> res.json();</span><br><span class="line">    createPokemonCard(pokemon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchPokemons();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPokemonCard</span>(<span class="params">pokemon</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> pokemonEl = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    pokemonEl.classList.add(<span class="string">&#x27;pokemon&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> poke_types = pokemon.types.map(<span class="function"><span class="params">el</span> =&gt;</span> el.type.name);</span><br><span class="line">    <span class="keyword">const</span> name = pokemon.name[<span class="number">0</span>].toUpperCase() + pokemon.name.slice(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> type = main_types.find(<span class="function"><span class="params">type</span> =&gt;</span> poke_types.indexOf(type) &gt; -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> color = colors[type];</span><br><span class="line">    pokemonEl.style.backgroundColor = color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> pokeInnerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;img-container&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;https://pokeres.bastionbot.org/images/pokemon/<span class="subst">$&#123;pokemon.id&#125;</span>.png&quot; alt =<span class="subst">$&#123;name&#125;</span>&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;info&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;number&quot;&gt;#<span class="subst">$&#123;pokemon.id.toString().padStart(<span class="number">3</span>,<span class="string">&quot;0&quot;</span>)&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;h3 class=&quot;name&quot;&gt;<span class="subst">$&#123;name&#125;</span>&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;small class=&quot;type&quot;&gt;Type: &lt;span&gt;<span class="subst">$&#123;type&#125;</span>&lt;/span&gt;&lt;/small&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line"></span><br><span class="line">    pokemonEl.innerHTML = pokeInnerHTML;</span><br><span class="line">    poke_container.appendChild(pokemonEl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="製作一個網頁瀏覽計數器"><a href="#製作一個網頁瀏覽計數器" class="headerlink" title="製作一個網頁瀏覽計數器"></a>製作一個網頁瀏覽計數器</h1><h2 id="成品-6"><a href="#成品-6" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/abnaxsW.png"></p><p><a href="">成品網址</a></p><h2 id="成品功能-6"><a href="#成品功能-6" class="headerlink" title="成品功能:"></a>成品功能:</h2><ol><li>當頁面重整時會更新瀏覽次數</li></ol><h1 id="HTML-6"><a href="#HTML-6" class="headerlink" title="HTML"></a>HTML</h1><h2 id="html程式碼-6"><a href="#html程式碼-6" class="headerlink" title="html程式碼:"></a>html程式碼:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;This page has&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;h1 id&#x3D;&quot;count&quot;&gt;0&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;views&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h1 id="CSS-6"><a href="#CSS-6" class="headerlink" title="CSS:"></a>CSS:</h1><p>簡單的置中以及上色</p><h2 id="CSS完整程式碼-6"><a href="#CSS完整程式碼-6" class="headerlink" title="CSS完整程式碼"></a>CSS完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;https://fonts.googleapis.com/css?family=Muli&amp;display=swap&#x27;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#192a56</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Muli&#x27;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-6"><a href="#JS-6" class="headerlink" title="JS:"></a>JS:</h1><p><a href="https://countapi.xyz/">count API官網</a></p><p>參考這邊的參數設置要使用的API<br><img src="https://i.imgur.com/UklBjL9.png"></p><p>第一步 先設置namespace的名稱<br><code>https://api.countapi.xyz/create?namespace=mysite.com&amp;value=42</code></p><p>第二步 設置key以及value為0<br><code>https://api.countapi.xyz/create?namespace=mysite.com&amp;key=mykey&amp;value=0</code></p><p>第三步 修改狀態為update並輸入amount=1<br><code>https://api.countapi.xyz/update/mysite.com/mykey/?amount=1</code></p><p>就可以開始使用此API瞜!</p><h2 id="變數設置-6"><a href="#變數設置-6" class="headerlink" title="變數設置"></a>變數設置</h2><ul><li>countEl<br><img src="https://i.imgur.com/6Zw9v81.png"></li></ul><h2 id="functions-4"><a href="#functions-4" class="headerlink" title="functions:"></a>functions:</h2><p><code>updateVisitCount()</code></p><ul><li>把剛剛創建的API使用fetch抓取</li><li>擷取api內容從JSON轉換回來並且貼上HTML</li></ul><h2 id="JS完整程式碼-6"><a href="#JS完整程式碼-6" class="headerlink" title="JS完整程式碼:"></a>JS完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countEl = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;count&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateVisitCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fetch(<span class="string">&#x27;https://api.countapi.xyz/update/github/githubBlog/?amount=1&#x27;</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res);</span><br><span class="line">            countEl.innerHTML = res.value;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateVisitCount();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS-Practice&quot;&gt;&lt;a href=&quot;#JS-Practice&quot; class=&quot;headerlink&quot; title=&quot;JS Practice&quot;&gt;&lt;/a&gt;JS Practice&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;tags-Javascript-relate&quot;&gt;</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-The Weird Part Of Javascript - part 2(一萬字)</title>
    <link href="http://example.com/2021/03/21/JS-The%20Weird%20Part%20Of%20Javascript%20-%20part%202/"/>
    <id>http://example.com/2021/03/21/JS-The%20Weird%20Part%20Of%20Javascript%20-%20part%202/</id>
    <published>2021-03-20T17:35:53.016Z</published>
    <updated>2021-03-21T18:30:55.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-Weird-Part-Of-Javascript-part-2"><a href="#The-Weird-Part-Of-Javascript-part-2" class="headerlink" title="The Weird Part Of Javascript - part 2"></a>The Weird Part Of Javascript - part 2</h1><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="物件與函式-Objects-And-Functions"><a href="#物件與函式-Objects-And-Functions" class="headerlink" title="物件與函式 (Objects And Functions)"></a>物件與函式 (Objects And Functions)</h1><blockquote><p>在其他程式語言中物件、函式是兩種完全不同的存在，但是在JS裡面它們非常相似</p></blockquote><h2 id="Objects-And-The-Dot"><a href="#Objects-And-The-Dot" class="headerlink" title="Objects And The Dot"></a>Objects And The Dot</h2><ul><li>物件(objects)是鍵值配對 (name:value pair) 的集合(不一定只有一對)</li><li>物件內可以包含有純值(Primitives)、另一個物件(Objects)、函式Function(或稱方法method)</li><li>上面標示的0x001是記憶體內部位置的範例，就像是它們的地址</li></ul><p><img src="https://i.imgur.com/zt3XHMD.png"></p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>這邊是為了作範例而這樣製作物件，不過會有更好的方式會在後面的章節介紹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">person[<span class="string">&quot;firstname&quot;</span>] = <span class="string">&quot;Tony&quot;</span>;</span><br><span class="line">person[<span class="string">&quot;lastname&quot;</span>] = <span class="string">&quot;Alicea&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstNameProperty = <span class="string">&quot;firstname&quot;</span>;</span><br><span class="line"></span><br><span class="line">person.address = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.address.street = <span class="string">&quot;111 Main St.&quot;</span>;</span><br><span class="line">person.address.city = <span class="string">&quot;London&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">//得到object</span></span><br><span class="line"><span class="built_in">console</span>.log(person[<span class="string">&quot;firstname&quot;</span>]); <span class="comment">//得到Tony</span></span><br><span class="line"><span class="built_in">console</span>.log(person[firstNameProperty])<span class="comment">//得到Tony</span></span><br><span class="line"><span class="built_in">console</span>.log(person.firstname);<span class="comment">//得到Tony</span></span><br><span class="line"><span class="built_in">console</span>.log(person.address.street); <span class="comment">//得到111 Main St.</span></span><br><span class="line"><span class="built_in">console</span>.log(person.address.city);<span class="comment">//得到London</span></span><br></pre></td></tr></table></figure><ol><li>我們設置一個物件person，並且新增兩個屬性firstname,lastname</li><li>把firstname指派給變數，一樣可以使用變數取得新增的內容</li><li>使用(.)可以更方便的新增屬性以及取得物件內容</li><li>使用 [ ] , (.) 這兩個運算子都能取得物件內容以及新增屬性</li></ol><p><img src="https://i.imgur.com/tLJUO9h.png"></p><p>[ ]  運算子</p><ul><li>需要使用字串型態</li><li>可使用變數指派的方式使用</li></ul><p>(.) 運算子</p><ul><li>編譯器可以直接閱讀不需要使用字串型態</li><li>不可使用變數指派方式使用</li><li>更簡潔易讀</li></ul><p><img src="https://i.imgur.com/QFtKBuI.png"></p><h1 id="物件、物件實字-Objects-And-Object-Literals"><a href="#物件、物件實字-Objects-And-Object-Literals" class="headerlink" title="物件、物件實字(Objects And Object Literals)"></a>物件、物件實字(Objects And Object Literals)</h1><ul><li>為了創造物件我們可以使用{ } 是 <code>new Object();</code>的縮寫</li><li>{} 不是運算子</li><li>JS引擎會判斷使用{ } 就是正在創造物件</li><li>只要用{ } 來建立物件的語法，就稱為物件實字 (Object Literals)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Tony = &#123;<span class="attr">firstname</span>:<span class="string">&#x27;Tony&#x27;</span>,<span class="attr">lastname</span>:<span class="string">&#x27;Alicea&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Tony);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Tony = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.firstname = <span class="string">&quot;Tony&quot;</span>;</span><br><span class="line">person.lastname = <span class="string">&quot;Alicea&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Tony);</span><br></pre></td></tr></table></figure><p>會印出一樣的結果<br><img src="https://i.imgur.com/aUcJqIY.png"></p><p><strong>物件創建在物件之內</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Tony = &#123;</span><br><span class="line">    firstname:<span class="string">&quot;Tony&quot;</span></span><br><span class="line">    address:&#123;</span><br><span class="line">        street:<span class="string">&#x27;111 Main St.&#x27;</span>,</span><br><span class="line">        city:<span class="string">&#x27;New York&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>創建在函式內部</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">person</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;HI&#x27;</span> + person)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">greet(&#123;</span><br><span class="line">firstname:<span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">lastname:<span class="string">&#x27;Doe&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>使用在增添屬性上面</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tony.company = &#123;</span><br><span class="line">    street: <span class="string">&#x27;333 Second St.&#x27;</span>,</span><br><span class="line">    companyName: <span class="string">&#x27;Sucess&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="框架小叮嚀-Framework-Aside"><a href="#框架小叮嚀-Framework-Aside" class="headerlink" title="框架小叮嚀(Framework Aside)"></a>框架小叮嚀(Framework Aside)</h1><ul><li>JS是沒有namespace，因為{ }的關係不需要</li><li>可以使用{ } 創造出物件來假扮命名空間</li><li>在框架或是函式庫的原始碼中很常看到這樣的使用方式</li></ul><h2 id="Faking-Namespaces"><a href="#Faking-Namespaces" class="headerlink" title="Faking Namespaces"></a>Faking Namespaces</h2><h3 id="命名空間-Namespace"><a href="#命名空間-Namespace" class="headerlink" title="命名空間(Namespace)"></a>命名空間(Namespace)</h3><p>專門給變數以及函式使用的空間，讓同樣名字的變數或是函式可以做區隔</p><h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h3><p>兩個變數名稱一樣時上方的變數會被複寫，因此印出Hola!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hola!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greet); <span class="comment">// Renders Hola!</span></span><br></pre></td></tr></table></figure><p>為了避免上面的複寫情況發生，我們可以使用Faking Namespaces，創造一個物件來包裹住這些變數，這樣就能避免變數或是函式之間名字相同的衝突或是複寫的狀況發生摟!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hola!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> english = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> spanish = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">english.greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line">spanish.greet = <span class="string">&#x27;Hola!&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h3><p>命名空稱使用的{ }物件可以做很多層:</p><p>把greet包裹在greeting裡面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> english = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">english.greeting = &#123;&#125;;</span><br><span class="line">english.greeting.greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(english);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/xHDptD5.png"></p><p>也可以使用物件實字:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> english = &#123;</span><br><span class="line">    greeting:&#123;</span><br><span class="line">        greet:<span class="string">&quot;Hello!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(english);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/MNGbIRI.png"></p><h1 id="JSON以及物件實字-JSON-And-Object-Literals"><a href="#JSON以及物件實字-JSON-And-Object-Literals" class="headerlink" title="JSON以及物件實字(JSON And Object Literals)"></a>JSON以及物件實字(JSON And Object Literals)</h1><ul><li>JSON (JavaScript Object Notation)</li><li>跟物件的型態非常相似</li><li>有數個方法可以使用來轉換JSON</li></ul><p>一般物件型態:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objectLiteral = &#123;</span><br><span class="line">    firstname: <span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">    isAProgrammer: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>JSON型態:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;firstname&quot;</span>: <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;isAProgrammer&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>轉換物件成JSON格式可以使用<code>JSON.stringify()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(objectLiteral);</span><br></pre></td></tr></table></figure><p>轉換JSON為物件給JS使用<code>JSON.parse()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonValue = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123; &quot;firstname&quot;: &quot;Mary&quot;, &quot;isAProgrammer&quot;: true &#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="函式就是物件-Function-Are-Objects"><a href="#函式就是物件-Function-Are-Objects" class="headerlink" title="函式就是物件(Function Are Objects)"></a>函式就是物件(Function Are Objects)</h1><h2 id="First-Class-Functions"><a href="#First-Class-Functions" class="headerlink" title="First Class Functions"></a>First Class Functions</h2><ul><li>你可以對函式做對於其他類型(字串、數字、物件、布林值等)都可以做的事情</li><li>可以指派函式為變數</li><li>可以把函式當成參數給其他函式使用</li><li>可以在literal syntax中使用函式</li></ul><p><img src="https://i.imgur.com/Uc94cSq.png"></p><p>函式是一種特殊的物件，但正因為它是物件所以他可以使用純值、物件、函式</p><p>以及兩種特殊的屬性 </p><ol><li>name(非必須，有匿名函式)</li><li>code也就是使用者撰寫的程式碼並且它是可以被呼叫的”Invocable”()</li></ol><h2 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h2><p>能成功地給函式加上屬性代表函式真的是一種物件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet.language = <span class="string">&#x27;English&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greet.language);</span><br></pre></td></tr></table></figure><ol><li>設置一個函式greet，內容為印出hi</li><li>給函式加上屬性</li><li>印出greet.language</li></ol><p>得出結果 正是加上去的屬性<br><img src="https://i.imgur.com/31dfkx9.png"></p><h2 id="“Invocable”"><a href="#“Invocable”" class="headerlink" title="“Invocable”()"></a>“Invocable”()</h2><p><img src="https://i.imgur.com/eyOntey.png"></p><ul><li>當創造這個greet 函式時，它會被放到記憶體裡(以目前的例子會放到全域物件裡)</li><li>函式會有個名字屬性 greet</li><li>函式會有code屬性也就是 <code>console.log(&quot;h1&quot;);</code></li><li>然而當呼叫greet()這邊使用括弧來呼叫函式</li></ul><h2 id="作者非常強調"><a href="#作者非常強調" class="headerlink" title="作者非常強調"></a>作者非常強調</h2><blockquote><p>JS的函式就是物件</p></blockquote><h1 id="函式陳述式、函式表達式-Function-Statements-And-Function-Expressions"><a href="#函式陳述式、函式表達式-Function-Statements-And-Function-Expressions" class="headerlink" title="函式陳述式、函式表達式(Function Statements And Function Expressions)"></a>函式陳述式、函式表達式(Function Statements And Function Expressions)</h1><h2 id="表達式-Expression"><a href="#表達式-Expression" class="headerlink" title="表達式(Expression)"></a>表達式(Expression)</h2><ul><li>它不必須存在變數之中</li><li>一段會創造值(value)的程式碼</li></ul><h3 id="表達式範例"><a href="#表達式範例" class="headerlink" title="表達式範例"></a>表達式範例</h3><ul><li>(=),(+)運算子都會回傳結果，因此他們兩個都是表達式</li></ul><p><code>var a;</code></p><p><img src="https://i.imgur.com/QWDWw1J.png"></p><ul><li>只要有回傳值就是表達式(下方回傳物件)</li></ul><p><img src="https://i.imgur.com/Nwn6KsN.png"></p><h2 id="陳述式-statement"><a href="#陳述式-statement" class="headerlink" title="陳述式(statement)"></a>陳述式(statement)</h2><p>判斷式if 就是個很好的例子</p><ul><li>不會返回值</li><li>無法把if判斷式指派給變數</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a ===<span class="number">3</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函式陳述式範例"><a href="#函式陳述式範例" class="headerlink" title="函式陳述式範例"></a>函式陳述式範例</h2><ul><li>一開始就會被寫進記憶體中</li><li>具有Hoisting特性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這段函式它不會回傳值因為它沒有被呼叫，所以它就是個函式陳述式，只代表它被放置於記憶體中，也就代表著<strong>Hositing</strong></p><p>因此我們可以這樣使用:</p><ol><li>先呼叫函式</li><li>撰寫函式本體</li><li>依舊可以印出結果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">greet();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函式表達式範例"><a href="#函式表達式範例" class="headerlink" title="函式表達式範例"></a>函式表達式範例</h2><ul><li><p>一開始不會被寫進記憶體</p></li><li><p>執行時建立這個函數物件使用指向該函數記憶體的變數進行呼叫(也就是指派給變數做呼叫)</p></li><li><p>匿名函式的部分就是函式表達式</p><p><img src="https://i.imgur.com/T0hnU0W.png"></p></li></ul><p>注意: 這邊可以發現匿名函式的部分就是函式表達式，因為它會產生值</p><ol><li>創造匿名函式</li><li>把函式指派給變數 anonymousGreet</li><li>使用”()”  anonymousGreet()</li><li>就可以呼叫此匿名函式瞜</li></ol><p>#關於匿名函式的部分，其實可以命名，但是基於程式碼簡潔的關係以及其實函式位置已經綁訂於變數所以命名這部分是比較多餘的</p><h2 id="函式表達式無法做Hoisting"><a href="#函式表達式無法做Hoisting" class="headerlink" title="函式表達式無法做Hoisting"></a>函式表達式無法做Hoisting</h2><ul><li>因為變數的預設值為undefined</li><li>要到變數被執行了才會知道它的值，所以只會先顯示undefined那當然不是個函式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">anonymousGreet();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anonymousGreet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1 &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/OtTr7EZ.png"></p><h2 id="把函式作為參數丟進另一個函式"><a href="#把函式作為參數丟進另一個函式" class="headerlink" title="把函式作為參數丟進另一個函式"></a>把函式作為參數丟進另一個函式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>把函式做完參數傳送</li><li>這樣的寫法其實就是下方範例，也就是<a href="#First-Class-Functions">First Class Functions</a>的概念</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br></pre></td></tr></table></figure><h1 id="Conceptual-Aside"><a href="#Conceptual-Aside" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="By-Value-vs-By-reference"><a href="#By-Value-vs-By-reference" class="headerlink" title="By Value vs By reference"></a>By Value vs By reference</h2><ul><li>這邊主要談論的都是指變數</li><li>reference 像是記憶體中的地址</li><li>value 代表變數的值</li></ul><h3 id="By-Value"><a href="#By-Value" class="headerlink" title="By Value"></a>By Value</h3><blockquote><p>讓兩個變數有相同的value藉由複製value的方式但是有兩個不同的reference</p></blockquote><ul><li>所有純值都是傳值(By value)</li></ul><ol><li>設置 a = 純值(數字、字串)</li><li>這時候純值會有個reference就像是它的地址讓變數a可以找到它</li><li>讓 新的變數b b = a </li><li>這時候b就會複製純值的value到不一樣的地址b</li></ol><p><img src="https://i.imgur.com/pPMboQa.png"></p><h3 id="By-Value-範例"><a href="#By-Value-範例" class="headerlink" title="By Value 範例"></a>By Value 範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by value(primitives)</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"></span><br><span class="line">b = a;</span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/piUJv9Y.png"></p><p>因為by value只會複製值不會複製reference所以，b還是保持在新的地址，a的變化跟b無關</p><h3 id="Mutate"><a href="#Mutate" class="headerlink" title="Mutate"></a>Mutate</h3><p>改變某樣東西</p><ul><li>Immutable 代表無法被改變</li></ul><h3 id="By-reference"><a href="#By-reference" class="headerlink" title="By reference"></a>By reference</h3><blockquote><p>讓兩個物件有相同的物件藉由給予同樣的reference並不是複製同樣的內容</p></blockquote><ul><li>所有的物件都是傳址(by reference)</li><li>不管是處理把他們(物件)設置相等或是傳入函式</li></ul><ol><li>設置 a = 純值(數字、字串)</li><li>這時候純值會有個reference就像是它的地址讓變數a可以找到它</li><li>讓 新的變數b b = a </li><li>這時候b會藉由原本 a 的reference找到其value</li></ol><p><img src="https://i.imgur.com/JMYnTYu.png"></p><h3 id="By-reference-範例"><a href="#By-reference-範例" class="headerlink" title="By reference 範例"></a>By reference 範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// by reference(all objects(including function))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    greeting: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> d;</span><br><span class="line"></span><br><span class="line">d = c;</span><br><span class="line">c.greeting = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/1ixoIdP.png"></p><p>因為By reference 傳遞的是地址，所以兩個物件c d 基本上是在一樣的地址一樣的內容，修改其一另一個一樣也被修改</p><h3 id="By-reference-even-as-parameters-範例"><a href="#By-reference-even-as-parameters-範例" class="headerlink" title="By reference(even as parameters) 範例"></a>By reference(even as parameters) 範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeGreeting</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    obj.greeting = <span class="string">&#x27;Hola&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeGreeting(d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/VjO4C4H.png"></p><p>把物件使用參數做傳遞，一樣是傳址，因此兩個傳遞對象是一樣的地址，修改一個其他都會修改</p><h3 id="By-reference-使用-指派-範例-特例"><a href="#By-reference-使用-指派-範例-特例" class="headerlink" title="By reference 使用(=)指派 範例(特例)"></a>By reference 使用(=)指派 範例(特例)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = &#123;</span><br><span class="line">    greeting: <span class="string">&#x27;Howdy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/2Mbfcfb.png"></p><ul><li>這邊可以看到不是說reference是傳址，所以兩方物件應該會一樣?</li><li>但是(=)運算子可以設定新的記憶體地址給c因此c,d印出來的結果不同了</li></ul><h1 id="物件、函式以及’this’-Objects-Functions-And-‘this’"><a href="#物件、函式以及’this’-Objects-Functions-And-‘this’" class="headerlink" title="物件、函式以及’this’(Objects, Functions, And ‘this’)"></a>物件、函式以及’this’(Objects, Functions, And ‘this’)</h1><p><img src="https://i.imgur.com/RIdUSQV.png"></p><ul><li>函式就是物件: 其中有兩個特殊屬性 code, name</li><li>當函式被呼叫時(也就是code的部分)，會創造出執行背景(Execution Context)，接著會被擺入執行堆(Execution stack)，這會決定這個函式會如何被執行</li><li>當執行背景被創造出來時，內部都會有variable Environment也就是變數被創造在函式內部</li><li>也會有Outer Environment也就是當在函式內部找不到變數使用時，會往外部尋找參考一直找到全域變數為止(再來也沒了)</li><li>但我們也知道每天JS引擎創造執行背景時都會創造’this’這個變數，甚至我們不需要輸入任何內容</li><li>而這個this會指向(代表)不同的物件取決於這個函式是如何被呼叫</li></ul><h2 id="‘this’的指向"><a href="#‘this’的指向" class="headerlink" title="‘this’的指向"></a>‘this’的指向</h2><h3 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.newvariable = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(newvariable);</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>這邊設置了三種情況</p><ol><li>一定有的golbal object</li><li>函式陳述式</li><li>函式表達式</li></ol><p>結果印出來:</p><p>全部都指向window這個global object<br>並且可以直接給global object加上屬性都沒問題</p><p><img src="https://i.imgur.com/DlKoeZ0.png"></p><ul><li>當值是純值的時候被稱為property</li><li>當值是函式的時候被稱為method</li></ul><h3 id="範例二-例外"><a href="#範例二-例外" class="headerlink" title="範例二(例外)"></a>範例二(例外)</h3><p>這邊把this使用在物件內部的函式也就是methods</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/q1ClvKP.png"></p><p>竟然是指向了object</p><p>並且可以這樣使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;I can change name&quot;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/rBANwZ9.png"></p><p>竟然可以通過this的指向來操作物件的內容key的部分</p><h3 id="範例三-類似bug"><a href="#範例三-類似bug" class="headerlink" title="範例三(類似bug)"></a>範例三(類似bug)</h3><p>於是我們找到一個類似於JS引擎比較類似缺點的地方:</p><p>透過函式表達式的方式使用變數傳遞函式在物件內部的methods內，並且使用this再次改寫一次name屬性，這邊理論上應該會使”I can change name”修改成’change name again’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;I can change name&quot;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> setname = <span class="function"><span class="keyword">function</span> (<span class="params">newname</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = newname;</span><br><span class="line">        &#125;</span><br><span class="line">        setname(<span class="string">&#x27;change name again&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>沒有任何變化<br>剛剛以為透過物件內部的methods內部的this會指向物件本身，但是這邊的this卻指向別的地方</p><p><img src="https://i.imgur.com/p3yMbyc.png"></p><p>打開window全域物件查看發現，這邊的this竟然指向的位置是全域物件window<br><img src="https://i.imgur.com/S0rUjDo.png"></p><h3 id="範例四-範例三的解答"><a href="#範例四-範例三的解答" class="headerlink" title="範例四(範例三的解答)"></a>範例四(範例三的解答)</h3><p>如何避免這樣的情況發生呢?</p><p>把this的位置好好綁訂好並且把每個地方的this都使用變數確認是使用同一個this指向同一個地方就可以解決這個問題摟!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">        self.name = <span class="string">&quot;I can change name&quot;</span></span><br><span class="line">        <span class="built_in">console</span>.log(self);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> setname = <span class="function"><span class="keyword">function</span> (<span class="params">newname</span>) </span>&#123;</span><br><span class="line">            self.name = newname;</span><br><span class="line">        &#125;</span><br><span class="line">        setname(<span class="string">&#x27;change name again&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(self);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>這次的this就正常的指向物件本身因此可以修改name屬性搂!</p><p><img src="https://i.imgur.com/Xq4GGwA.png"></p><h1 id="Conceptual-Aside-1"><a href="#Conceptual-Aside-1" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="Arrays-Collection-of-Anything"><a href="#Arrays-Collection-of-Anything" class="headerlink" title="Arrays Collection of Anything"></a>Arrays Collection of Anything</h2><p>創造一個array<br><code>var arr = new Array();</code></p><p>使用array literal syntax<br><code>var arr = [];</code></p><p>JS的array是以0為基底的:</p><p><code>console.log(arr[0])</code></p><p>可以印出array第一個元素</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;The-Weird-Part-Of-Javascript-part-2&quot;&gt;&lt;a href=&quot;#The-Weird-Part-Of-Javascript-part-2&quot; class=&quot;headerlink&quot; title=&quot;The Weird Part Of Java</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-The Weird Part Of Javascript - part 1(一萬字)</title>
    <link href="http://example.com/2021/03/21/JS-The%20Weird%20Part%20Of%20Javascript%20-%20part%201/"/>
    <id>http://example.com/2021/03/21/JS-The%20Weird%20Part%20Of%20Javascript%20-%20part%201/</id>
    <published>2021-03-20T17:34:44.108Z</published>
    <updated>2021-03-21T18:30:45.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-Weird-Part-Of-Javascript-part-1"><a href="#The-Weird-Part-Of-Javascript-part-1" class="headerlink" title="The Weird Part Of Javascript - part 1"></a>The Weird Part Of Javascript - part 1</h1><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript"><a href="#tags-Javascript" class="headerlink" title="tags: Javascript"></a>tags: <code>Javascript</code></h6><h1 id="Conceptual-Aside"><a href="#Conceptual-Aside" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><blockquote><p>當我們寫好JS程式時，在執行時，我們宣告的變數、函式，就會呈現在記憶體中，由電腦去運作使用。</p></blockquote><h2 id="語法解析器-Syntax-Parsers"><a href="#語法解析器-Syntax-Parsers" class="headerlink" title="語法解析器 (Syntax Parsers)"></a>語法解析器 (Syntax Parsers)</h2><p>翻譯程式:</p><ul><li>直譯器(Interpreter)</li><li>編譯器(Compiler)</li></ul><p>一個程式用來翻譯JS code成電腦可以理解的語法</p><h2 id="詞彙環境-Lexical-Environment"><a href="#詞彙環境-Lexical-Environment" class="headerlink" title="詞彙環境 (Lexical Environment)"></a>詞彙環境 (Lexical Environment)</h2><ul><li>代表程式碼在程式中的實際位置</li><li>那些”翻譯程式”非常注重你把那些程式碼寫在哪以及當下環境是什麼</li></ul><h2 id="執行背景-Execution-Contexts"><a href="#執行背景-Execution-Contexts" class="headerlink" title="執行背景 (Execution Contexts)"></a>執行背景 (Execution Contexts)</h2><ul><li>別人寫好的程式來驗證以及執行使用者的程式碼</li><li>管理哪段程式碼先執行</li><li>管理的內容不只是使用者撰寫的還有更多</li></ul><h1 id="Conceptual-Aside-1"><a href="#Conceptual-Aside-1" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="鍵值配-Name-Value-Pairs"><a href="#鍵值配-Name-Value-Pairs" class="headerlink" title="鍵值配(Name/ Value Pairs)"></a>鍵值配(Name/ Value Pairs)</h2><ul><li>一個name 會配對到 一個 value</li><li>值(value) 也可以是 數個 name:value 的配對(也就是objects)</li></ul><h2 id="物件-Objects"><a href="#物件-Objects" class="headerlink" title="物件(Objects)"></a>物件(Objects)</h2><ul><li>是數個name:value 配對的組合</li></ul><p>address的值 裏面包含了數個鍵值配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">address:&#123;</span><br><span class="line">    street:<span class="string">&#x27;Main&#x27;</span>,</span><br><span class="line">    <span class="built_in">Number</span>:<span class="string">&#x27;100&#x27;</span>,</span><br><span class="line">    Apartment:&#123;</span><br><span class="line">        Floor:<span class="number">3</span>,</span><br><span class="line">        <span class="built_in">Number</span>:<span class="number">301</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="The-Global-Environment-and-The-Global-Object"><a href="#The-Global-Environment-and-The-Global-Object" class="headerlink" title="The Global Environment and The Global Object"></a>The Global Environment and The Global Object</h1><blockquote><p>不論使用者的JS程式碼何時執行，它都會跑在執行背景(Execution Context)裡面，意味著別人已經寫好的程式會來驗證以及執行使用者的程式碼</p></blockquote><h2 id="基礎執行背景-Base-Execution-Context也就是Global-Execution-Context"><a href="#基礎執行背景-Base-Execution-Context也就是Global-Execution-Context" class="headerlink" title="基礎執行背景(Base Execution Context也就是Global Execution Context)"></a>基礎執行背景(Base Execution Context也就是Global Execution Context)</h2><ul><li>代表整段程式的任何地方都可以取用它們</li><li>基礎執行環境創造了兩個事情 1.Global Object 2.特殊變數 this</li></ul><p><img src="https://i.imgur.com/0AtZF3g.png"></p><p>就算使用者沒有撰寫任程式碼，JS引擎也會直接創造它們兩個</p><p>1.window(Global Object)(但如果在node.js運行的話會不一樣)<br>2.特殊變數 this</p><p><img src="https://i.imgur.com/brA2yZq.png"></p><h2 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h2><blockquote><p>不在函式裡面就是Global<br>Not Inside a Function</p></blockquote><p>我們在IDE中輸入變數以及函式，會讓它們跟Glbal Object產生連結而我們剛剛設置的變數以及函式就變成了Global Object，因為它們都不在函式內部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/IbYW4PQ.png"></p><p>Execution Context會包裹住這些內容:</p><ul><li>Global Object(window)</li><li>‘this’變數</li><li>Outer Environment - Execution Context的外部環境</li><li>Your Code(如果寫的位置不在任何函式內部)</li></ul><p><img src="https://i.imgur.com/UkmvpH1.png"></p><h1 id="The-Execution-Context-Creation-And-‘Hoisting’"><a href="#The-Execution-Context-Creation-And-‘Hoisting’" class="headerlink" title="The Execution Context: Creation And ‘Hoisting’"></a>The Execution Context: Creation And ‘Hoisting’</h1><h2 id="Hoisting-範例說明"><a href="#Hoisting-範例說明" class="headerlink" title="Hoisting 範例說明"></a>Hoisting 範例說明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>我們會預期這樣的程式碼得到下面的結果</p><p><img src="https://i.imgur.com/z16LB4L.png"></p><hr><p>但如果我們做些一些改變呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有學過其他的語言應該會覺得這邊會直接出錯，因為程式碼應該是一行一行執行的，並且還沒宣告b函式所以b函式應該無法使用</p><p>但結果如下:</p><ul><li>他執行了函式b()</li><li>a的部份沒有出錯卻顯示undefined</li></ul><p>所以儘管b函式在下方才宣告卻還是執行了，以及a的部份還是可以使用的雖然它目前是一個值undefined(尚未定義)，**這樣的現象被稱為’Hoisting’**，但並不是把宣告內容提升到最上方那麼單純!</p><p><img src="https://i.imgur.com/kUSKFDe.png"></p><p>那我們直接把a移除會發生甚麼事呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出現錯誤訊息:a is not defined(沒有被定義)</p><p><img src="https://i.imgur.com/vg4o9Ru.png"></p><hr><h2 id="Execution-Context-is-Created-Creation-Phase創造階段"><a href="#Execution-Context-is-Created-Creation-Phase創造階段" class="headerlink" title="Execution Context is Created(Creation Phase創造階段)"></a>Execution Context is Created(Creation Phase創造階段)</h2><blockquote><p>變數或是函式沒有值卻還是可以取用<br>JS會這樣運作是因為執行背景被分為兩個階段</p></blockquote><h3 id="第一階段創造-Creation-Phase"><a href="#第一階段創造-Creation-Phase" class="headerlink" title="第一階段創造(Creation Phase)"></a>第一階段創造(Creation Phase)</h3><p><img src="https://i.imgur.com/C7YYlAm.png"></p><p><strong>在記憶體內部設定好空間給變數以及函式被稱為’Hoisting’</strong></p><p>他的意思不是把程式碼移到最上方!!</p><p>而是在逐行執行程式碼之前也就是第一階段，JS引擎已經把變數以及函式設定好空間給它們了，也就是變數以及函式已經存在記憶體中，所以當程式逐行執行時，就可以使用它們</p><h3 id="變數的不同點"><a href="#變數的不同點" class="headerlink" title="變數的不同點"></a>變數的不同點</h3><p>不過變數的情況比較不一樣</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函式b()已經全部都在記憶體內了，代表他已經被執行了</li><li>但是JS騰出空間給變數a時，JS不知道它的值是什麼直到被執行了才知道所以會先放入undefined代表還不知道它的值就跟完全不設值的情況一樣</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一樣會取得undefinded<br><img src="https://i.imgur.com/qTbIzIe.png"></p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><ul><li><strong>所有的JS變數一開始都會被設定成undefined</strong></li><li><strong>函式則是會被完全設定好放進記憶體裡</strong></li><li>所以盡量還是不要太依賴’Hoisting’，好好讓程式逐行執行的順序比較好!</li></ul><h1 id="Conceptual-Aside-2"><a href="#Conceptual-Aside-2" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="Javascript-and-Undefined"><a href="#Javascript-and-Undefined" class="headerlink" title="Javascript and Undefined"></a>Javascript and Undefined</h2><ul><li>undefined 是一個JS內建的特殊的值，代表這個變數還沒被設定</li><li>undefined 是一個值並且實際佔據記憶體空間 代表一個變數的初始值</li><li>undefined 是一個在變數再創造階段會被設定的值也就是(未設定)</li></ul><p>下方程式碼代表undefine是一個特殊值不需要加上””</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;a is undefined&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;a is defined&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我們不宣告變數內容會得到undefined結果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ZnYKpex.png"></p><h2 id="作者建議"><a href="#作者建議" class="headerlink" title="作者建議"></a>作者建議</h2><p>永遠不要設定變數為undefined，因為你其實可以這樣做並且不會出錯，但你會不知道出現的undefined是你設定好的還是程式碼中那些地方有出錯，最好使用的方式就是不設定它併用它來除錯</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line">a = <span class="literal">undefined</span>; <span class="comment">// 永遠別這樣做</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h1 id="The-Execution-Context-Code-Execution"><a href="#The-Execution-Context-Code-Execution" class="headerlink" title="The Execution Context: Code Execution"></a>The Execution Context: Code Execution</h1><blockquote><p>第一個階段是創造階段，第二個部分是執行</p></blockquote><ul><li>在創造階段就已經設定好所有東西</li><li>執行階段會執行使用者寫的程式碼<strong>逐行</strong>轉譯、轉換成電腦可以理解的內容</li></ul><p><img src="https://i.imgur.com/RMVW6WP.png"></p><h2 id="範例說明"><a href="#範例說明" class="headerlink" title="範例說明"></a>範例說明</h2><p>從下方程式碼以及結果可以理解:</p><ul><li>程式碼逐行執行</li></ul><p>第七行的a暫時還未指派因此印出結果為undefined<br>然後經過第九行新指派a = “Hello World!”，因此在11行重新印出a 的時候就印出被指派的內容Hello World!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/89oShvj.png"></p><h1 id="Conceptual-Aside-3"><a href="#Conceptual-Aside-3" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="單執行緒-Single-Threaded"><a href="#單執行緒-Single-Threaded" class="headerlink" title="單執行緒(Single Threaded)"></a>單執行緒(Single Threaded)</h2><ul><li>一次執行一個指令(使用者的視角)</li><li>瀏覽器下有很多程序在執行所以用瀏覽器的角度看的時候就不能這樣理解</li></ul><h2 id="同步執行-Synchronous-Execution"><a href="#同步執行-Synchronous-Execution" class="headerlink" title="同步執行(Synchronous Execution)"></a>同步執行(Synchronous Execution)</h2><ul><li>一次執行一行程式碼</li><li>並且按照順序</li><li>在JS中一次只會發生一件事情</li></ul><h1 id="Funciton-Invocation-and-The-Execution-Stack"><a href="#Funciton-Invocation-and-The-Execution-Stack" class="headerlink" title="Funciton Invocation and The Execution Stack"></a>Funciton Invocation and The Execution Stack</h1><h2 id="函式呼叫-Funciton-Invocation"><a href="#函式呼叫-Funciton-Invocation" class="headerlink" title="函式呼叫(Funciton Invocation)"></a>函式呼叫(Funciton Invocation)</h2><h3 id="Invocation"><a href="#Invocation" class="headerlink" title="Invocation"></a>Invocation</h3><blockquote><p>代表執行或是呼叫函式，會使用括號<code>()</code></p></blockquote><p>比方說要執行函式app可以這樣使用:</p><p><code>app();</code></p><h2 id="執行堆-Execution-Stack"><a href="#執行堆-Execution-Stack" class="headerlink" title="執行堆(Execution Stack)"></a>執行堆(Execution Stack)</h2><ul><li>每個函式會多創造一層Execution Context</li><li>會逐行且同步地執行程式碼</li><li>執行結束後會從最上層開始拋棄</li></ul><h3 id="範例說明-1"><a href="#範例說明-1" class="headerlink" title="範例說明"></a>範例說明</h3><p>橘色部分就是執行堆<br><img src="https://i.imgur.com/mduoRi5.png"></p><p>每一層都會創造一個新的Execution Context都會經歷創造階段然後逐行執行程式，這邊就是函式被呼叫之後做事情</p><ol><li>Global Execution Context 會處理所有的全域項目變數、函式等等</li><li>a() 這邊會創造一個嶄新的Execution Context 代表函式 a內的變數、函式</li><li>b() 這邊會創造一個嶄新的Execution Context 代表函式 b內的變數、函式</li></ol><h3 id="範例說明二"><a href="#範例說明二" class="headerlink" title="範例說明二"></a>範例說明二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  b();</span><br><span class="line">  <span class="keyword">var</span> c;</span><br><span class="line">  <span class="built_in">console</span>.log(c + <span class="string">&quot; is c&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d;</span><br><span class="line">  <span class="built_in">console</span>.log(d + <span class="string">&quot; is d&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e;</span><br><span class="line"><span class="built_in">console</span>.log(e + <span class="string">&quot; is e&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這邊可以先忽略undefined畢竟都沒指派內容當然都會是預設值，可以先注意印出順序<br><img src="https://i.imgur.com/dOdzoLW.png"></p><blockquote><p>執行堆最上方的程式就是正在執行的程式，逐行、同步地在被處理中</p></blockquote><p>從上方程式碼可以理解函式呼叫以及執行堆的順序:</p><ol><li>呼叫 a();</li><li>進到a的內部，這邊呼叫b()</li><li>進到b的內部，印出 d (第一個印出結果)</li><li>因為b()內部執行完成，所以從執行堆中移除換執行函式a()</li><li>印出函式a()，印出 c (第二個印出結果)</li><li>因為a()內部執行完成，所以從執行堆中移除換執行Global object(也就是最下面的e)並且印出</li></ol><h1 id="Function-Context-and-Variable-Environments"><a href="#Function-Context-and-Variable-Environments" class="headerlink" title="Function, Context, and Variable Environments"></a>Function, Context, and Variable Environments</h1><h2 id="變數環境-Variable-Environments"><a href="#變數環境-Variable-Environments" class="headerlink" title="變數環境(Variable Environments)"></a>變數環境(Variable Environments)</h2><blockquote><p>描述使用者創造變數的位置以及在記憶體中與其他變數的關聯，所以當你想到這個詞基本上就是在想變數在哪裡?</p></blockquote><ul><li>變數環境 = 變數的位置以及與其他變數的關聯</li><li>每個執行背景內部(Execution Context)的變數是不會彼此影響的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myVar;</span><br><span class="line">  <span class="built_in">console</span>.log(myVar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myVar = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(myVar);</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myVar);</span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(myVar);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/1mC8Hv5.png"></p><p>上方的程式碼可以這樣理解:</p><blockquote><p>每個執行背景內部的變數是不會彼此影響的</p></blockquote><ol><li>印出13行結果 myVar = 1</li><li>跑呼叫a()，內部函式印出結果 2，並且呼叫 b()</li><li>進入函式b()，內部函式結果印出undefined</li><li>執行堆移除函式b =&gt; 移除函式a =&gt; 回到Global Execution，15行在印出一次myVar = 1</li></ol><h1 id="範圍鏈-The-Scope-Chain"><a href="#範圍鏈-The-Scope-Chain" class="headerlink" title="範圍鏈(The Scope Chain)"></a>範圍鏈(The Scope Chain)</h1><ul><li>簡單來說明就是當函式內部找不到變數時就會往外找(outer environment)而這個過程就是範圍鏈</li><li>函式的位置決定它的外部環境(outer environment)</li></ul><p><img src="https://i.imgur.com/7yVQZtW.png"></p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myVar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myVar = <span class="number">2</span>;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>印出myVar的結果是1<br><img src="https://i.imgur.com/x6DtNiM.png"></p><p>由範例可以得知:</p><ol><li>呼叫a()</li><li>進入函式a()，呼叫函式b()</li><li>進入函式b()，內容需要印出myVar但內容沒有變數於是往外找</li><li>函式b()的outer environment是Global Execution因此印出結果 1</li></ol><h2 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h2><p>我們把函式b()整個移進去函式a()內部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myVar);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> myVar = <span class="number">2</span>;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>印出結果是錯誤 b is not defined<br><img src="https://i.imgur.com/KJcmUHs.png"></p><p>由範例二可以得知:</p><ul><li>呼叫函式b()位於Global Execution的環境中</li><li>位於Global Execution的環境中找不到函式b()，因為我們把它移動到函式a()裡面了</li><li>當呼叫函式找不到東西時就會顯示錯誤 <code>&#39;XXX is not defined&#39;</code></li></ul><h2 id="範例三"><a href="#範例三" class="headerlink" title="範例三"></a>範例三</h2><p>函式b()的外層是函式a()</p><p><img src="https://i.imgur.com/vvRCywU.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myVar);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> myVar = <span class="number">2</span>;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>印出myVar的結果是2<br><img src="https://i.imgur.com/Gj4zC6Q.png"></p><p>由範例三可以得知:</p><p>由於函式b()內部找不到變數因此往外層找到a()的<code>var myVar = 2;</code>故印出結果為2</p><h2 id="範例四"><a href="#範例四" class="headerlink" title="範例四"></a>範例四</h2><p>去掉<code>var myVar = 2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myVar);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>由範例四可以得知:</p><p>所以當 <code>var myVar = 2</code> 又被拉掉的時候，就會得到結果 1，因為又會繼續往外找<br>b的外層是a a的外層是Global Execution</p><h1 id="Scope-Es6-And-let"><a href="#Scope-Es6-And-let" class="headerlink" title="Scope, Es6, And let"></a>Scope, Es6, And let</h1><h2 id="範圍-Scope"><a href="#範圍-Scope" class="headerlink" title="範圍(Scope)"></a>範圍(Scope)</h2><ul><li>指的是變數可以被取用的區域</li><li>呼叫兩個函式它會各自有一個執行背景</li><li>如果有兩個看起來相同的變數但在記憶體中其實是兩個不同的變數(因為環境不同)</li></ul><h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myVar); <span class="comment">// 步驟 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myVar); <span class="comment">// 步驟2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> myVar = <span class="number">2</span>;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(myVar); <span class="comment">// 步驟 3</span></span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/LcmlEqh.png"></p><p>從範例可以得知:</p><ul><li>叫了兩遍一樣的函示b() 第11行、18行，他們會各有一個執行背景</li><li>這邊的變數myVar雖然變數名稱一樣但是結果完全不同</li><li>因為它們的範圍(scope)不同，並且處在不同的函式中彼此的變數不會互相干擾</li></ul><ol><li>呼叫a() =&gt; 進去a()內部呼叫b()(位於a()內部)</li><li>b()內部的console找不到變數因此往外(函式a()是外部)找 故印出2</li><li>接下來回到外層印出 Global Execution的 myVar = 1 故印出1</li><li>最後又呼叫一次b()，很明顯地這次直接找尋了跟Global Execution位於同一層的b()(位於第一行)故印出結果往外找到myVar = 1 故印出1</li></ol><h2 id="let簡介"><a href="#let簡介" class="headerlink" title="let簡介"></a>let簡介</h2><ul><li>區塊範圍(Block Scope) - 變數的作用範圍只限在大括號間<code>&#123;&#125;</code></li></ul><h3 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`迴圈跑第<span class="subst">$&#123;i&#125;</span>次`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><p>很明顯的地方是外面的var i = 0被裡面的迴圈汙染到所以傳回來的結果是10<br><img src="https://i.imgur.com/wexESY7.png"></p><p>所以改成let做操作時因為其作用域是{}因此沒有汙染到外面來</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`迴圈跑第<span class="subst">$&#123;i&#125;</span>次`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/za2DaSb.png"></p><h1 id="What-About-Asynchronous-Callbacks"><a href="#What-About-Asynchronous-Callbacks" class="headerlink" title="What About Asynchronous Callbacks?"></a>What About Asynchronous Callbacks?</h1><ul><li>JS引擎的內部處理方式是同步的，但是與外部引擎的合作就是非同步的</li><li>非同步的部分只是在於瀏覽器會把非同步的東西放進去Event Queue但JS依舊一行一行執行</li><li>Event Queue的執行會排在執行堆任務執行完並且執行背景清除了才會動作</li></ul><h2 id="非同步-Asynchronous"><a href="#非同步-Asynchronous" class="headerlink" title="非同步(Asynchronous)"></a>非同步(Asynchronous)</h2><ul><li>代表不只一件事情同時發生</li></ul><p>但前面有說JS是同步的，那它會怎麼處理非同步事件呢?</p><p><img src="https://i.imgur.com/ecNSwqe.jpg"></p><p>JS引擎其實在運行的時候，在瀏覽器下面還有其他的引擎同時在運行:</p><ul><li>呈現引擎(Rendering Engine) - 處理畫面的呈現在螢幕上</li><li>HTTP Request - 處理瀏覽器的HTTP請求，以及獲取資料</li></ul><h3 id="結論-1"><a href="#結論-1" class="headerlink" title="結論"></a>結論</h3><p>所以我們可以理解的是JS引擎的內部處理方式是同步的，但是與外部引擎的合作就是非同步的(在瀏覽器下)</p><h2 id="事件佇列-Event-Queue"><a href="#事件佇列-Event-Queue" class="headerlink" title="事件佇列(Event Queue)"></a>事件佇列(Event Queue)</h2><ul><li><p>當執行堆是空的 JS 才會注意事件佇列</p><p>當在瀏覽器中有一個事件需要被JS引擎處理時，就會被放在Event Queue排隊並且會被事件監聽並等待函式做處不過就是要等待在Event Queue之中<br><img src="https://i.imgur.com/mfkOqWu.png"></p></li></ul><p>上面提到Event Queue在排隊其實是在等Execution stack的任務處理完之後，才會輪到Event Queue的函式創造新的執行背景<code>clickHandler()</code>處理click事件接下來輪到HTTP Request(以圖片舉例)<br><img src="https://i.imgur.com/9tyPbPp.png"></p><h3 id="範例-3"><a href="#範例-3" class="headerlink" title="範例"></a>範例</h3><p><img src="https://i.imgur.com/gEUKBJ8.gif"></p><p>這個範例可以看出被放在Event Queue的事件(clickHandler)一直到執行堆的任務完成(3秒)之後才會執行，要等三秒函式完成並且清空execution stacks，才會跑Event Queue內的click事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitThreeSeconds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ms = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>() &lt; ms) &#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;finished function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;click event!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;click&quot;</span>, clickHandler);</span><br><span class="line"></span><br><span class="line">waitThreeSeconds();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;finished execution&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="Conceptual-Aside-4"><a href="#Conceptual-Aside-4" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="靜態型別-Static-Typing"><a href="#靜態型別-Static-Typing" class="headerlink" title="靜態型別(Static Typing)"></a>靜態型別(Static Typing)</h2><p>常用在Java或是C#<br>代表必須在一開始就告訴編譯器目前使用的變數是甚麼型別</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool isNew = <span class="string">&quot;hello&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 前方就指示型別</span></span><br><span class="line"><span class="comment">// 明顯這邊會報錯因為&#x27;Hello&#x27;是字串不是布林值</span></span><br></pre></td></tr></table></figure><h2 id="動態型別-Dynamic-Typing"><a href="#動態型別-Dynamic-Typing" class="headerlink" title="動態型別(Dynamic Typing)"></a>動態型別(Dynamic Typing)</h2><p>意味著你不需告訴JS引擎你使用的變數型別(字串、數字、布林值等等)，當程式執行時它會自己做辨識</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isNew = <span class="literal">true</span>; <span class="comment">//不會報錯</span></span><br><span class="line">isNew = <span class="string">&#x27;yup!&#x27;</span>;</span><br><span class="line">isNew = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="型別-Types-And-Javascirpt"><a href="#型別-Types-And-Javascirpt" class="headerlink" title="型別(Types And Javascirpt)"></a>型別(Types And Javascirpt)</h2><h3 id="純值-Primitive-Types"><a href="#純值-Primitive-Types" class="headerlink" title="純值(Primitive Types)"></a>純值(Primitive Types)</h3><ul><li>是一種資料型態並且只代表一個值意味著不是物件</li></ul><ol><li>undefined</li></ol><ul><li>是所有變數的初始值</li><li>代表其值還尚未存在(千萬不要設到變裡)</li><li>會一直保持undefined直到你給變數設定值為止</li></ul><ol start="2"><li>null</li></ol><ul><li>代表其值”不存在”為空(可以設到變數裡)</li></ul><ol start="3"><li>Boolean</li></ol><ul><li>代表true or false其中一種可能</li></ul><ol start="4"><li>number</li></ol><ul><li>在JS中只有一種數字型態number(其他語言不是這樣可能有整數或其他類型)</li><li>它是一種浮點數代表後面總會有小數位</li><li>會讓數學在JS裡面比較奇怪</li></ul><ol start="5"><li>string</li></ol><ul><li>一連串的文字並且使用單引號或是雙引號包裹住</li><li>Es6可以使用<code>(``)</code>包裹住文字並且使用變數在裡面</li></ul><ol start="6"><li>symbol</li></ol><ul><li>使用在ES6中尚未被全部瀏覽器支援</li><li>在後面的bouns課程會講解</li></ul><h1 id="Conceptual-Aside-5"><a href="#Conceptual-Aside-5" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="運算子-Operators"><a href="#運算子-Operators" class="headerlink" title="運算子(Operators)"></a>運算子(Operators)</h2><ul><li>是種特殊的function並且在語法、寫法上都不一樣</li><li>一般來說運算子取兩個參數並且返回一個結果</li></ul><h3 id="範例-4"><a href="#範例-4" class="headerlink" title="範例"></a>範例</h3><p>(+)加號運算子 做代表(-,&gt;,&lt;,% 這些也是一樣)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span> + <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>實際上 (+)的部分是是一個函式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> +(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我們要呼叫函式不是應該這樣寫嗎?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span> + <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">+(<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>不過太惱人了對嗎? 還好JS提供了<strong>中綴表示法 (Infix notation)</strong></p><p>讓我們可以把呼叫的部分寫在參數中間，讓程式看起來更人性化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>+<span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="運算子的優先性與相依姓-Operator-Precedence-and-Associativity"><a href="#運算子的優先性與相依姓-Operator-Precedence-and-Associativity" class="headerlink" title="運算子的優先性與相依姓(Operator Precedence and Associativity)"></a>運算子的優先性與相依姓(Operator Precedence and Associativity)</h1><h2 id="運算子的優先性"><a href="#運算子的優先性" class="headerlink" title="運算子的優先性"></a>運算子的優先性</h2><ul><li>代表哪個運算子會被優先使用</li><li>當同一行程式有不只一個運算子時，函式會依序被呼叫</li><li>具備高優先性的運算子優先運算</li></ul><h2 id="運算子的相依姓"><a href="#運算子的相依姓" class="headerlink" title="運算子的相依姓"></a>運算子的相依姓</h2><ul><li>當優先順序都相同時才會使用到相依姓</li><li>代表運算子被呼叫的順序</li><li>左到右、右到左</li></ul><h2 id="範例-5"><a href="#範例-5" class="headerlink" title="範例"></a>範例</h2><ul><li>從下圖可以理解 *(乘號)的優先序高於 +(加號)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span> + <span class="number">4</span> * <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a 為23</span></span><br></pre></td></tr></table></figure><p>擷取自mdn<br><img src="https://i.imgur.com/8UTEPpN.png"></p><ul><li>grouping - ()</li></ul><p>相依姓最高的運算子，會優先計算括號內部的運算子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="number">3</span> + <span class="number">4</span>) * <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a為35</span></span><br></pre></td></tr></table></figure><p>擷取自mdn<br><img src="https://i.imgur.com/duIO03J.png"></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">運算子優先序參考 - MDN</a></p><h2 id="範例二-1"><a href="#範例二-1" class="headerlink" title="範例二"></a>範例二</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>, b =<span class="number">3</span>, c=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">a = b = c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果 4, 4, 4</span></span><br></pre></td></tr></table></figure><ul><li>印出結果都是四，因為他們都是相同的運算子具有相同的相同的優先性所以必須使用相依姓來處理，因此以MDN網站上的結果顯示必須從右到左執行</li><li>a = b = c, 會先處理右邊的 等號(=) 所以會這樣執行:<br>a = (b=c)，必須先求出b=c，因c = 4，所以b = 4，外面則 a = 4</li></ul><p><img src="https://i.imgur.com/rg1yoF9.png"></p><h1 id="Conceptual-Aside-6"><a href="#Conceptual-Aside-6" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="強制轉型-Coercion"><a href="#強制轉型-Coercion" class="headerlink" title="強制轉型(Coercion)"></a>強制轉型(Coercion)</h2><ul><li> 轉換一個值從一個形態到另一個<br>(ex.你可能有的Number類型別被轉換成String)</li><li> 在JS很常發生因為其為動態型別</li></ul><h2 id="隱性-vs-顯性-Implicit-vs-explicit-coercion"><a href="#隱性-vs-顯性-Implicit-vs-explicit-coercion" class="headerlink" title="隱性 vs. 顯性 (Implicit vs. explicit coercion)"></a>隱性 vs. 顯性 (Implicit vs. explicit coercion)</h2><h3 id="顯性-explicit"><a href="#顯性-explicit" class="headerlink" title="顯性(explicit)"></a>顯性(explicit)</h3><p>會直接顯示出要轉換的型別</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(value)</span><br></pre></td></tr></table></figure><h3 id="隱性-implicit"><a href="#隱性-implicit" class="headerlink" title="隱性(implicit)"></a>隱性(implicit)</h3><p>當指派運算子時:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="literal">null</span>, <span class="number">2</span>/’<span class="number">5</span><span class="string">&#x27;, null + new Date()</span></span><br></pre></td></tr></table></figure><p>當被轉換成boolean時:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value) &#123;…&#125;</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 三種強制轉換(Three types of conversion)</span><br><span class="line"></span><br><span class="line">純值以及物件都只會有這三種轉換但是它們工作方式不太一樣</span><br><span class="line"></span><br><span class="line">* to string</span><br><span class="line">* to boolean</span><br><span class="line">* to number</span><br><span class="line"></span><br><span class="line">### 解釋純值轉型(Type coercion for primitives)</span><br><span class="line"></span><br><span class="line">#### String conversion</span><br><span class="line"></span><br><span class="line">* 顯性使用 <span class="built_in">String</span>()函式直接轉換成字串</span><br><span class="line">* 隱性使用 (+) 做轉換成字串，當兩個運算元(operand)有一方為字串就會觸發轉換成字串</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript=</span></span><br><span class="line"><span class="string">String(123) // explicit</span></span><br><span class="line"><span class="string">123 + &#x27;&#x27;    // implicit</span></span><br></pre></td></tr></table></figure><ul><li>所有的純值都可以被轉換成字串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">123</span>)                   <span class="comment">// &#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">String</span>(-<span class="number">12.3</span>)                 <span class="comment">// &#x27;-12.3&#x27;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>)                  <span class="comment">// &#x27;null&#x27;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>)             <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>)                  <span class="comment">// &#x27;true&#x27;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">false</span>)                 <span class="comment">// &#x27;false&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>Symbol 比較特別只能使用顯性的coercion</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="built_in">Symbol</span>(<span class="string">&#x27;my symbol&#x27;</span>))   <span class="comment">// &#x27;Symbol(my symbol)&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> + <span class="built_in">Symbol</span>(<span class="string">&#x27;my symbol&#x27;</span>)      <span class="comment">// TypeError is thrown</span></span><br></pre></td></tr></table></figure><ul><li>Symbol 使用所有數學運算子都會報錯</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let uid &#x3D; Symbol.for(&quot;uid&quot;),</span><br><span class="line">    sum &#x3D; uid &#x2F; 1;            &#x2F;&#x2F; error!</span><br></pre></td></tr></table></figure><p><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-symbol-coercion">Symbol coercion - 參考</a></p><h4 id="Boolean-conversion"><a href="#Boolean-conversion" class="headerlink" title="Boolean conversion"></a>Boolean conversion</h4><ul><li>顯性的使用<code>Boolean()</code></li><li>隱性的必須使用在邏輯運算子的環境下或是被邏輯運算子直接影響</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="number">2</span>)          <span class="comment">// explicit</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span>) &#123; ... &#125;      <span class="comment">// implicit due to logical context</span></span><br><span class="line">!!<span class="number">2</span>                 <span class="comment">// implicit due to logical operator</span></span><br><span class="line"><span class="number">2</span> || <span class="string">&#x27;hello&#x27;</span>        <span class="comment">// implicit due to logical operator</span></span><br></pre></td></tr></table></figure><ul><li>需要注意的是 ||以及&amp;&amp;運算子它們是會返回運算元的值的也就是不會返回true or false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回123而不是true</span></span><br><span class="line"><span class="comment">// &#x27;hello&#x27; and 123 在內部依舊是布林值來計算這個表達式</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;hello&#x27;</span> &amp;&amp; <span class="number">123</span>;   <span class="comment">// x === 123</span></span><br></pre></td></tr></table></figure><ul><li>下方列表以外的值都是返回true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="string">&#x27;&#x27;</span>)           <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>)            <span class="comment">// false     </span></span><br><span class="line"><span class="built_in">Boolean</span>(-<span class="number">0</span>)           <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>)          <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>)         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>)    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">false</span>)        <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>物件、陣列、Symbol、Date、自定義function都會返回true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(&#123;&#125;)             <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>([])             <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="built_in">Symbol</span>())       <span class="comment">// true</span></span><br><span class="line">!!<span class="built_in">Symbol</span>()              <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Numeric-conversion"><a href="#Numeric-conversion" class="headerlink" title="Numeric conversion"></a>Numeric conversion</h4><ul><li>顯性的使用<code>Number()</code>函式</li></ul><p>隱性的比較麻煩有多種觸發方式:</p><ul><li>使用比較運算子(&gt;, &lt;, &lt;=,&gt;=)</li><li>使用位元算子( | &amp; ^ ~)</li><li>算數運算子 (- + * / % )(注意當+包含的運算元有字串時會轉成字串)</li><li>單一使用+運算子</li><li>使用(==,!=)(注意當兩邊運算元都是字串時不會觸發數字轉型)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;123&#x27;</span>)   <span class="comment">// explicit</span></span><br><span class="line">+<span class="string">&#x27;123&#x27;</span>          <span class="comment">// implicit</span></span><br><span class="line"><span class="number">123</span> != <span class="string">&#x27;456&#x27;</span>    <span class="comment">// implicit</span></span><br><span class="line"><span class="number">4</span> &gt; <span class="string">&#x27;5&#x27;</span>         <span class="comment">// implicit</span></span><br><span class="line"><span class="number">5</span>/<span class="literal">null</span>          <span class="comment">// implicit</span></span><br><span class="line"><span class="literal">true</span> | <span class="number">0</span>        <span class="comment">// implicit</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)              <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)                   <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)                  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot; 12 &quot;</span>)                 <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;-12.34&quot;</span>)               <span class="comment">// -12.34</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;\n&quot;</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot; 12s &quot;</span>)                <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">123</span>)                    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><ul><li>跳脫字元的部分如果內含不是數字則顯示NaN，為空則顯示0</li><li>null, undefined比較特別需要特別記憶</li><li>Symbols不能轉換為Number會直接報錯<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;\n&quot;</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)              <span class="comment">// NaN</span></span><br><span class="line">+sym or sym | <span class="number">0</span>                <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#symbol_type_conversions">Symbol type conversions -MDN</a></p><ul><li>當== 應用到null, undefined時數字轉換不會進行</li><li>null = null, null = undefined但不等於0</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="number">0</span>               <span class="comment">// false, null is not converted to 0</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">null</span>            <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>       <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>NaN不等於任何東西連自己都不等於</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value !== value) &#123; <span class="built_in">console</span>.log(<span class="string">&quot;we&#x27;re dealing with NaN here&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span></span><br><span class="line"><span class="comment">// return false</span></span><br></pre></td></tr></table></figure><h3 id="解釋物件轉型-Type-coercion-for-objects"><a href="#解釋物件轉型-Type-coercion-for-objects" class="headerlink" title="解釋物件轉型(Type coercion for objects)"></a>解釋物件轉型(Type coercion for objects)</h3><h4 id="傳換成Boolean值"><a href="#傳換成Boolean值" class="headerlink" title="傳換成Boolean值"></a>傳換成Boolean值</h4><ul><li>非純值的值都會轉成true</li><li>物件、陣列、空都會返回true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>([<span class="literal">NaN</span>])</span><br><span class="line"><span class="built_in">Boolean</span>([<span class="number">123</span>])</span><br><span class="line"><span class="built_in">Boolean</span>([<span class="string">&#x27;123&#x27;</span>])</span><br><span class="line"><span class="built_in">Boolean</span>([<span class="literal">false</span>])</span><br><span class="line"><span class="built_in">Boolean</span>([<span class="literal">undefined</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(&#123;<span class="literal">NaN</span>&#125;)</span><br><span class="line"><span class="built_in">Boolean</span>(&#123;<span class="number">123</span>:<span class="number">123</span>&#125;)</span><br><span class="line"><span class="built_in">Boolean</span>(&#123;<span class="string">&#x27;123&#x27;</span>:<span class="number">123</span>&#125;)</span><br><span class="line"><span class="built_in">Boolean</span>(&#123;<span class="literal">undefined</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全部輸出都為true</span></span><br></pre></td></tr></table></figure><h4 id="轉換成Number-String"><a href="#轉換成Number-String" class="headerlink" title="轉換成Number, String"></a>轉換成Number, String</h4><ul><li>物件會轉為純值藉由內部的<code>[[ToPrimitive]]</code>方法</li><li><code>ToPrimitive(input, PreferredType?)</code>(PreferredType可以為Number or String)</li><li>使用<code>valueOf</code> 、<code>toString</code> </li></ul><p>一般來說演算法如下:</p><ol><li>如果input已經是純值則直接返回</li><li>呼叫input.toString() 如果結果是純值則返回</li><li>呼叫input.valueOf() 如果解果是純值則返回</li><li>都不是則產出TypeError</li></ol><ul><li>字串轉型 先呼叫 toString() 隨後 valueOf() </li><li>數字轉型 先呼叫 valueOf() 隨後 toString()</li></ul><p>過程是這樣的：</p><p>一個物件 obj 透過呼叫 ToPrimitive(obj, Number) 轉換成原始型別，接著在使用 ToNumber() 取得最後的結果</p><p>一個物件 obj 透過調用 ToPrimitive(obj, String) 轉換為原始型別，然後 ToString() 取得最後結果</p><ul><li>可以觀察這個實作理解其觸發順序:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  valueOf: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;valueOf&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(obj); <span class="comment">// 先印valueOf, 在接toString</span></span><br><span class="line"><span class="built_in">String</span>(obj); <span class="comment">// 先印toString, 在接valueOf</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>大多數的build-in type方法不包含<code>valueOf()</code>或是會返回this.object(也就是會把同樣的元素回傳)然而並不是純值而被忽略，所以數字或是字串轉型可能都會返回呼叫<code>toString()</code>的內容<br>舉例:<br><img src="https://i.imgur.com/1Xcp7FK.png"></li></ul><h4 id="loose-equality-這兩個運算子有特別之處"><a href="#loose-equality-這兩個運算子有特別之處" class="headerlink" title="loose equality(==), (+)這兩個運算子有特別之處"></a>loose equality(==), (+)這兩個運算子有特別之處</h4><ul><li>大多數的情況當這兩個運算子出現時都會預設使用Number 轉換</li><li>除了Date()<br>預設Date()會出現現在時間的字串<br><img src="https://i.imgur.com/yDrcFGu.png"></li></ul><h2 id="小練習"><a href="#小練習" class="headerlink" title="小練習"></a>小練習</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> + <span class="literal">false</span>             <span class="comment">// 1</span></span><br><span class="line"><span class="number">12</span> / <span class="string">&quot;6&quot;</span>                 <span class="comment">// 2</span></span><br><span class="line"><span class="string">&quot;number&quot;</span> + <span class="number">15</span> + <span class="number">3</span>        <span class="comment">// &#x27;number153&#x27;</span></span><br><span class="line"><span class="number">15</span> + <span class="number">3</span> + <span class="string">&quot;number&quot;</span>        <span class="comment">// &#x27;18number&#x27;</span></span><br><span class="line">[<span class="number">1</span>] &gt; <span class="literal">null</span>               <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;foo&quot;</span> + + <span class="string">&quot;bar&quot;</span>          <span class="comment">// &#x27;fooNaN&#x27;</span></span><br><span class="line"><span class="string">&#x27;true&#x27;</span> == <span class="literal">true</span>           <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;false&#x27;</span>         <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="string">&#x27;&#x27;</span>               <span class="comment">// false</span></span><br><span class="line">!!<span class="string">&quot;false&quot;</span> == !!<span class="string">&quot;true&quot;</span>    <span class="comment">// true</span></span><br><span class="line">[<span class="string">&#x27;x&#x27;</span>] == <span class="string">&#x27;x&#x27;</span>             <span class="comment">// true </span></span><br><span class="line">[] + <span class="literal">null</span> + <span class="number">1</span>            <span class="comment">// &#x27;null1&#x27;</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]       <span class="comment">// false</span></span><br><span class="line">&#123;&#125;+[]+&#123;&#125;+[<span class="number">1</span>]             <span class="comment">// &#x27;0[object Object]1&#x27;</span></span><br><span class="line">!+[]+[]+![]              <span class="comment">// &#x27;truefalse&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) - <span class="number">0</span>          <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) + <span class="number">0</span>          <span class="comment">// &#x27;Thu Jan 01 1970 02:00:00(EET)0&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="題目解題"><a href="#題目解題" class="headerlink" title="題目解題"></a>題目解題</h3><ul><li>true + false             // 1</li></ul><p>使用 + 運算子會轉換成Numbe轉換<br>true = 1<br>false = 0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> + <span class="literal">false</span></span><br><span class="line">==&gt; <span class="number">1</span> + <span class="number">0</span></span><br><span class="line">==&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>12 / “6”                 // 2</li></ul><p>算數運算子 / 會轉換成Number轉換</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> / <span class="string">&#x27;6&#x27;</span></span><br><span class="line">==&gt; <span class="number">12</span> / <span class="number">6</span></span><br><span class="line">==&gt;&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>“number” + 15 + 3        // ‘number153’</li></ul><p>(+) 運算子的相依姓是由左自右</p><ol><li>所以這邊會先處理”number” + 15</li><li>因為+號兩側有字串直接轉成字串”number15”</li><li>在來處理 “number15” + 3 =&gt; “number153”</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“number” + <span class="number">15</span> + <span class="number">3</span> </span><br><span class="line">==&gt; <span class="string">&quot;number15&quot;</span> + <span class="number">3</span> </span><br><span class="line">==&gt; <span class="string">&quot;number153&quot;</span></span><br></pre></td></tr></table></figure><ul><li>15 + 3 + “number”        // ‘18number’</li></ul><ol><li>15+3 這邊就正常運算</li><li>18+’number’因為有字串所以就變成’18number’</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span> + <span class="number">3</span> + <span class="string">&quot;number&quot;</span> </span><br><span class="line">==&gt; <span class="number">18</span> + <span class="string">&quot;number&quot;</span> </span><br><span class="line">==&gt; <span class="string">&quot;18number&quot;</span></span><br></pre></td></tr></table></figure><ul><li>[1] &gt; null //true</li></ul><p>比較運算子(&gt;)會觸發Number轉換</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] &gt; <span class="literal">null</span></span><br><span class="line">==&gt; <span class="string">&#x27;1&#x27;</span> &gt; <span class="number">0</span></span><br><span class="line">==&gt; <span class="number">1</span> &gt; <span class="number">0</span></span><br><span class="line">==&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>“foo” + + “bar”   //“fooNaN”</li></ul><ol><li>單位元的 (+)運算子的優先級高於二進制(+)</li><li>故+”bar” 先處理 因為轉型Number後內容物不是number故產出NaN</li><li>跟”foo”串接觸發字串轉換故結果為”fooNaN”</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;foo&quot;</span> + + <span class="string">&quot;bar&quot;</span> </span><br><span class="line">==&gt; <span class="string">&quot;foo&quot;</span> + (+<span class="string">&quot;bar&quot;</span>) </span><br><span class="line">==&gt; <span class="string">&quot;foo&quot;</span> + <span class="literal">NaN</span> </span><br><span class="line">==&gt; <span class="string">&quot;fooNaN&quot;</span></span><br></pre></td></tr></table></figure><ul><li>‘true’ == true  //false</li><li>false == ‘false’    //false</li></ul><ol><li>== 運算子觸發Number轉換</li><li>‘true’ 轉換成Number轉換 因內容不是數字因此為NaN</li><li>布林值 true的部分轉換成數字為1/ false為0</li><li>所以他們不相等</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;true&#x27;</span> == <span class="literal">true</span></span><br><span class="line">==&gt; <span class="literal">NaN</span> == <span class="number">1</span></span><br><span class="line">==&gt; <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;false&#x27;</span>   </span><br><span class="line">==&gt; <span class="number">0</span> == <span class="literal">NaN</span></span><br><span class="line">==&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>null == ‘’   //false</li></ul><p>Null比較特別</p><ul><li>當== 應用到null, undefined時數字轉換不會進行</li><li>null = null, null = undefined但不等於0</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="string">&#x27;&#x27;</span></span><br><span class="line">==&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>!!”false” == !!”true” //true</li><li>兩個驚嘆號代表如果內容為true則會顯示true</li><li>一般字串沒有為空的話是會顯示true的</li><li>下面是會顯示false的範例:</li></ul><ol><li>null;</li><li>NaN;</li><li>0;</li><li>empty string (“” or ‘’ or ``);</li><li>undefined.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="string">&quot;false&quot;</span> == !!<span class="string">&quot;true&quot;</span>  </span><br><span class="line">==&gt; <span class="literal">true</span> == <span class="literal">true</span></span><br><span class="line">==&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>[‘x’] == ‘x’   //true</li></ul><ol><li>== 觸發Number轉換</li><li>[‘x’].valueOf()會得出他自己[“x”] 這並不是純值所以不會返回結果</li><li>故使用toString()得到”x”因此相等</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;x&#x27;</span>] == <span class="string">&#x27;x&#x27;</span>  </span><br><span class="line">==&gt; <span class="string">&#x27;x&#x27;</span> == <span class="string">&#x27;x&#x27;</span></span><br><span class="line">==&gt;  <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>[] + null + 1    // ‘null1’</li></ul><ol><li>(+)號運算子觸發Number轉換給[]</li><li>然而陣列做Number轉換後因為陣列做<code>valueOf()</code>得出自己不是純值無法返回</li><li>因此使用<code>toString()</code>空陣列轉為’’空字串</li><li>‘’ 空字串出現在 (+)運算子中所以變成’null’+1 在得出結果’null1’</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[] + <span class="literal">null</span> + <span class="number">1</span>  </span><br><span class="line">==&gt;  <span class="string">&#x27;&#x27;</span> + <span class="literal">null</span> + <span class="number">1</span>  </span><br><span class="line">==&gt;  <span class="string">&#x27;null&#x27;</span> + <span class="number">1</span>  </span><br><span class="line">==&gt; <span class="string">&#x27;null1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>0 || “0” &amp;&amp; {}     //{}</li></ul><ol><li>邏輯運算子會轉換運算元為布林值(內部)但會返回原本的值</li><li>0為false, “0”字串為true因為不為空, 空物件為true</li><li>|| 運算子只要有false則取其左邊的值，&amp;&amp; 運算子如果運算元都為true取右邊的值故為{}</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> || <span class="string">&quot;0&quot;</span> &amp;&amp; &#123;&#125;  </span><br><span class="line">==&gt;  (<span class="number">0</span> || <span class="string">&quot;0&quot;</span>) &amp;&amp; &#123;&#125;</span><br><span class="line">==&gt; (<span class="literal">false</span> || <span class="literal">true</span>) &amp;&amp; <span class="literal">true</span>  <span class="comment">// internally</span></span><br><span class="line">==&gt; <span class="string">&quot;0&quot;</span> &amp;&amp; &#123;&#125;</span><br><span class="line">==&gt; <span class="literal">true</span> &amp;&amp; <span class="literal">true</span>             <span class="comment">// internally</span></span><br><span class="line">==&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>[1,2,3] == [1,2,3]   /false</li></ul><ol><li>不需要強制轉型因為兩邊的型別一樣</li><li>==會確認物件的id然而兩個array是不同的instance,id一定不同所以答出false</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">==&gt;  <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>{}+[]+{}+[1] //‘0[object Object]1’</li></ul><ol><li>(+)觸發Number轉型(但是因為物件以及陣列都會切換成toString())從最左邊開始轉換</li><li>第一個{}轉換成””(透過toString())但因為沒有+在前面轉換成數字所以先不理</li><li>+[]會轉換成0</li><li>{}會轉換成字串’[object Object]’</li><li>[1]toString()會變成’1’</li><li>最後做字串串接得出’0[object Object]1’<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;+[]+&#123;&#125;+[<span class="number">1</span>]</span><br><span class="line">==&gt; +[]+&#123;&#125;+[<span class="number">1</span>]</span><br><span class="line">==&gt; <span class="number">0</span> + &#123;&#125; + [<span class="number">1</span>]</span><br><span class="line">==&gt; <span class="number">0</span> + <span class="string">&#x27;[object Object]&#x27;</span> + [<span class="number">1</span>]</span><br><span class="line">==&gt; <span class="string">&#x27;0[object Object]&#x27;</span> + [<span class="number">1</span>]</span><br><span class="line">==&gt; <span class="string">&#x27;0[object Object]&#x27;</span> + <span class="string">&#x27;1&#x27;</span></span><br><span class="line">==&gt; <span class="string">&#x27;0[object Object]1&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>!+[]+[]+![]    //‘truefalse’</li></ul><ol><li>驚嘆號邏輯運算子優先權大於(+)</li><li>故有驚嘆號的地方先處理(!+[]) + [] + (![])</li><li>!+[] =&gt; !=false, +[] = 0 = false ,兩個false則為true</li><li>![] =&gt; []為true, 故得出false</li><li>[] =&gt; 做Number轉後轉成’’</li><li>三個串起來’truefalse’</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!+[]+[]+![]  </span><br><span class="line">==&gt; (!+[]) + [] + (![])</span><br><span class="line">==&gt; !<span class="number">0</span> + [] + <span class="literal">false</span></span><br><span class="line">==&gt; <span class="literal">true</span> + [] + <span class="literal">false</span></span><br><span class="line">==&gt; <span class="literal">true</span> + <span class="string">&#x27;&#x27;</span> + <span class="literal">false</span></span><br><span class="line">==&gt; <span class="string">&#x27;truefalse&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>new Date(0) - 0 //0</li></ul><p>new Date(0).valueOf()會取得毫秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) - <span class="number">0</span></span><br><span class="line">==&gt; <span class="number">0</span> - <span class="number">0</span></span><br><span class="line">==&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>new Date(0) + 0 //‘Thu Jan 01 1970 02:00:00 GMT+0200 (EET)0’</li></ul><ol><li>new Date(0) 會出字串</li><li>把0做String轉型</li><li>串接得出答案’Thu Jan 01 1970 02:00:00 GMT+0200 (EET)0’</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) + <span class="number">0</span></span><br><span class="line">==&gt; <span class="string">&#x27;Thu Jan 01 1970 02:00:00 GMT+0200 (EET)&#x27;</span> + <span class="number">0</span></span><br><span class="line">==&gt; <span class="string">&#x27;Thu Jan 01 1970 02:00:00 GMT+0200 (EET)0&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="本篇參考來源"><a href="#本篇參考來源" class="headerlink" title="本篇參考來源:"></a>本篇參考來源:</h2><p><a href="https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/">JavaScript type coercion explained</a></p><h1 id="比較運算子-Comparison-Operators"><a href="#比較運算子-Comparison-Operators" class="headerlink" title="比較運算子(Comparison Operators)"></a>比較運算子(Comparison Operators)</h1><h2 id="範例-6"><a href="#範例-6" class="headerlink" title="範例"></a>範例</h2><ul><li>兩個範例的優先順序都是一樣的(畢竟符號都一樣)</li><li>故比較的是相依姓(&lt;)，(&gt;)排序是由左至右</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>&lt;<span class="number">2</span>&lt;<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果得出 true</span></span><br></pre></td></tr></table></figure><p>第一題處理:</p><ol><li>1&lt;2 會得到 true, 接著處理true&lt;3</li><li>比較運算子會做Number強制轉型 true轉型為數字為1<img src="https://i.imgur.com/gw7Dkeg.png"></li><li>故1&lt;3 為true</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>&lt;<span class="number">2</span>&lt;<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果得出 true</span></span><br></pre></td></tr></table></figure><p>第二題處理:</p><ol><li>3&lt;2 會得到 false, 接著處理false&lt;1</li><li>比較運算子會做Number強制轉型 false轉型為數字為0 <img src="https://i.imgur.com/9vLEghi.png"></li><li>故0&lt;1 為true</li></ol><h2 id="null-undefined-是特別的"><a href="#null-undefined-是特別的" class="headerlink" title="null, undefined 是特別的"></a>null, undefined 是特別的</h2><ul><li><p>當== 應用到null, undefined時數字轉換不會進行</p></li><li><p>null = null, null = undefined但不等於0</p></li><li><p>雖然使用Number()函式來取得數值 null有取得0，undefined取得NaN但是還是不能應用在(==)<br><img src="https://i.imgur.com/tzWiWI3.png"></p></li><li><p>不過null&lt;1是得出true <img src="https://i.imgur.com/JxDpW2I.png"></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">null</span>            <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>       <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但是當情況越演越烈:</p><p>這樣強制型別轉換會讓程式碼難以預期，於是我們往下介紹**(===)Strict Equality**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span>&lt;<span class="number">1</span> <span class="comment">// tru</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="number">0</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="literal">false</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Strict-Equality"><a href="#Strict-Equality" class="headerlink" title="(===)Strict Equality"></a>(===)Strict Equality</h2><p>這個符號他不會強制轉換型別，如果運算元型別不同就會直接跑false</p><p><img src="https://i.imgur.com/PqvIMJD.png"></p><h2 id="作者建議-1"><a href="#作者建議-1" class="headerlink" title="作者建議"></a>作者建議</h2><ul><li>大多數的時間使用 (===)Strict Equality</li><li>除非你真的需要強制轉型來做一些功能不然不要輕易使用(==)</li><li>作者推薦文章 <a href="http://www-lia.deis.unibo.it/materiale/JS/developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness.html">內含(==, ===)比對表格 MDN</a></li></ul><h1 id="存在以及布林值-Existence-and-Booleans"><a href="#存在以及布林值-Existence-and-Booleans" class="headerlink" title="存在以及布林值(Existence and Booleans)"></a>存在以及布林值(Existence and Booleans)</h1><ul><li>如果我們試著轉化null, undefined,”” 成布林值都會取得false</li><li>因此可以利用這個狀況使用if判斷式來尋找是否變數存在於內容之中<br>如果a存在的話則印出console.log()的內容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a; <span class="comment">// a is undefined</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Something is there.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="預設值-Default-Values"><a href="#預設值-Default-Values" class="headerlink" title="預設值(Default Values)"></a>預設值(Default Values)</h1><p>如果我們使用這個函式並且不輸入參數會發生什麼事呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">greet();</span><br></pre></td></tr></table></figure><p>會印出Helloundefined，因為變數在這邊沒有被指定的情況下，預設值就會是undefined，然後碰上(+)運算子只要前方有字串就會把純值undefined轉換成字串因此得出這個結果<br><img src="https://i.imgur.com/sGylF11.png"></p><p>但我們可以這樣寫讓這個預設值更有功能性:</p><ul><li>使用 or 運算子</li><li>因為or運算子的優先級高於 (=)所以右邊會先處理</li><li>當name為undeined時因為or運算子會回傳true的結果也就是’Your name here’</li><li>當name不為undefined時就立即回傳，因為當兩邊都為ture時會回傳左側</li><li>唯一例外則為使用 0 因為 0 會回傳false</li><li>最後記得ES6有新的方法可以做參考使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">   name = name || <span class="string">&#x27;Your name here&#x27;</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">greet(<span class="string">&#x27;Joan&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="框架小叮嚀-Framework-Aside"><a href="#框架小叮嚀-Framework-Aside" class="headerlink" title="框架小叮嚀(Framework Aside)"></a>框架小叮嚀(Framework Aside)</h1><p>想像一種情況當我們要使用複數個框架或是函式庫時，其中的變數名稱重複了，這時候撰寫位置於下方的程式會複寫上方的:</p><p>以下方的範例舉例的話，Lib2的變數內容會取代Lib1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;Lib1.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;Lib2.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;app.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>所以常常會看到函式庫使用預設值來避免這種被取代的現象發生:</p><ul><li>如果變數已經存在(libraryName)則會使用現有的library的變數，如果沒有則使用Lib2</li><li>這樣的使用預設值的方式就是在檢查全域命名空間(global namespace)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.libraryName = <span class="built_in">window</span>.libraryName || <span class="string">&quot;Lib2&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;The-Weird-Part-Of-Javascript-part-1&quot;&gt;&lt;a href=&quot;#The-Weird-Part-Of-Javascript-part-1&quot; class=&quot;headerlink&quot; title=&quot;The Weird Part Of Java</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS-for beginner</title>
    <link href="http://example.com/2021/03/21/CSS-CSS%20for%20beginner/"/>
    <id>http://example.com/2021/03/21/CSS-CSS%20for%20beginner/</id>
    <published>2021-03-20T17:33:22.553Z</published>
    <updated>2021-03-21T18:21:59.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-for-beginner"><a href="#CSS-for-beginner" class="headerlink" title="CSS for beginner"></a>CSS for beginner</h1><hr><h2 id="tags-HTML-CSS-relate"><a href="#tags-HTML-CSS-relate" class="headerlink" title="tags: HTML CSS relate"></a>tags: HTML CSS relate</h2><h6 id="tags-HTML-CSS"><a href="#tags-HTML-CSS" class="headerlink" title="tags: HTML, CSS"></a>tags: <code>HTML, CSS</code></h6><p>參考學習資源連結:<a href="https://www.htmldog.com/guides/css/beginner/">https://www.htmldog.com/guides/css/beginner/</a></p><p><strong>CSS(Cascading Styles Sheets) is a way to style and present HTML</strong></p><p>Cascading </p><p>其中一個含意是寫在下面的code會覆蓋掉上面的</p><p><img src="https://i.imgur.com/kLEaN8L.png"></p><p><img src="https://i.imgur.com/FEDJlV2.png"></p><hr><p>1.Inline CSS(幾乎不太用到)<br>An inline CSS is used to apply a unique “style” to <strong>a single HTML element</strong>.<br>**<br>An inline CSS <strong>uses the style attribute of an HTML element</strong>.</p><p>The following example sets the text color of the element to blue, and the text color of the element to red:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style&#x3D;&quot;color:blue;&quot;&gt;A Blue Heading&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p style&#x3D;&quot;color:red;&quot;&gt;A red paragraph.&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><hr><p>2.Internal CSS</p><p>An internal CSS is used to define a style for a <strong>single HTML page</strong>.</p><p>An internal CSS is <strong>defined in the head section of an HTML page</strong>, within a style element.</p><p>The following example sets the text color of ALL the h1 elements (on that page) to blue, and the text color of ALL the p elements to red. In addition, the page will be displayed with a “powderblue” background color: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;background-color: powderblue;&#125;</span><br><span class="line">h1   &#123;color: blue;&#125;</span><br><span class="line">p    &#123;color: red;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><hr><p>3.External CSS(最重要的用法)</p><p>An external style sheet is used to define the style for <strong>many HTML pages</strong>.</p><p>To use an external style sheet, <strong>add a link to it in the head section of each HTML page</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;styles.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="Selectors-Properties-and-Values"><a href="#Selectors-Properties-and-Values" class="headerlink" title="Selectors, Properties, and Values"></a>Selectors, Properties, and Values</h1><p>CSS選擇器的組成</p><p><img src="https://i.imgur.com/YjuuJlS.png"></p><p>Whereas HTML has tags, CSS has selectors. <strong>Selectors are the names given to styles in internal and external style sheets</strong>.</p><p>For each selector there are “<strong>properties</strong>” inside curly brackets, which simply take the form of words such as <strong>color, font-weight or background-color</strong>.</p><p>A <strong>value</strong> is given to the property following a colon (NOT an “equals” sign). Semi-colons are used to separate the properties.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    color: navy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Lengths-and-Percentages"><a href="#Lengths-and-Percentages" class="headerlink" title="Lengths and Percentages"></a>Lengths and Percentages</h1><p>一些單位參考</p><p>px (such as font-size: 12px) is the unit for pixels.</p><p>em (such as font-size: 2em) is the unit for the calculated size of a font. So “2em”, for example, is two times the current font size.</p><p>pt (such as font-size: 12pt) is the unit for points, for measurements typically in printed media.</p><p>% (such as width: 80%) is the unit for percentages.</p><p>Other units include pc (picas), cm (centimeters), mm (millimeters) and in (inches).</p><p>When a value is zero, you do not need to state a unit. For example, if you wanted to specify no border, it would be border: 0.</p><hr><h1 id="Colors"><a href="#Colors" class="headerlink" title="Colors"></a>Colors</h1><p>CSS brings 16,777,216 colors to your disposal. They can take the form of a <strong>name</strong>(Ex.red), an <strong>RGB (255,0,0) value</strong> or a <strong>hex code</strong>(#f0000).</p><p>The following values, to specify full-on as red-as-red-can-be, all produce the same result:</p><p>a color name - like “red”<br>a HEX value - like “#ff0000”<br>an RGB value - like “rgb(255,0,0)”</p><p>吸色工具是可以很好模仿他人顏色的工具，或是從開發者瀏覽器工具裡面去看人家的程式碼使用甚麼顏色</p><p><strong>color and background-color</strong></p><p>Colors can be applied by using color and background-color</p><p>A blue background and yellow text could look like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">    color: yellow;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h1><p>這邊的東西可以在開發者工具裡面檢視，多熟練開發者工具！</p><p>You can alter the size and shape of the text on a web page with a range of properties.</p><p><strong>font-family</strong></p><p>各種字體選擇使用它</p><p>This is the font itself, such as Times New Roman, Arial, or Verdana.</p><p><img src="https://i.imgur.com/sZOTIrA.png"></p><p>字形參考網站:<a href="https://fonts.google.com/">https://fonts.google.com/</a></p><p><strong>font-size</strong></p><p>Font size. Size of a font. Font? The size of it.(字體大小)</p><p><code>p &#123; font-size: 16px; &#125;</code></p><p><strong>font-weight</strong></p><p>Bold or light text.(粗體字跟淡體字)</p><p><code>.chubbybaby &#123; font-weight: bold; &#125;</code></p><p><strong>font-style</strong></p><p>Italic or oblique text.(斜體字)</p><p><code>.warning &#123; font-style: italic; &#125;</code></p><p><strong>text-decoration</strong></p><p>Underlined, overlined, and struck-through text.(底線、上斜線、刪除線)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.oldfangled a:hover &#123; text-decoration: none &#125;</span><br><span class="line"></span><br><span class="line">.newfangled a:hover &#123; text-decoration: underline overline line-through wavy #f99 &#125; </span><br></pre></td></tr></table></figure><p><strong>text-transform</strong></p><p>轉換大小寫</p><p>text-transform will change the case of the text.</p><p>Converts the case of letters — to uppercase, lowercase, or capitalized.</p><p><code>h1 &#123; text-transform: uppercase; &#125;</code></p><h1 id="Text-spacing"><a href="#Text-spacing" class="headerlink" title="Text spacing"></a>Text spacing</h1><p>The <strong>letter-spacing</strong> and <strong>word-spacing</strong> properties are for <strong>spacing between letters or words</strong>. The value can be a length or normal.(字母以及單字間的空白)</p><p>The <strong>line-height</strong> property sets the height of the lines in an element, such as a paragraph, without adjusting the size of the font. It can be a number (which specifies a multiple of the font size, so “2” will be two times the font size, for example), a length, a percentage, or normal.(行高)</p><p>The <strong>text-align</strong> property will align the text inside an element to left, right, center, or justify.(文字置中偏左偏又等等)</p><p>The <strong>text-indent</strong> property will indent the first line of a paragraph, for example, to a given length or percentage. This is a style traditionally used in print, but rarely in digital media such as the web.(常用在印刷品少用在網頁，例如寫作文開頭要空幾個字下來)</p><hr><h1 id="Margins-and-Padding"><a href="#Margins-and-Padding" class="headerlink" title="Margins and Padding"></a>Margins and Padding</h1><p>A <strong>margin</strong> is the space outside something, whereas <strong>padding</strong> is the space inside something.</p><ul><li><p>margin是指一個物件外面的空間</p></li><li><p>padding是指一個物件內裡的空間</p></li></ul><p>The four sides of an element can also be set individually. margin-top, margin-right, margin-bottom, margin-left, padding-top, padding-right, padding-bottom and padding-left are the self-explanatory properties you can use.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2 &#123;</span><br><span class="line">    font-size: 1.5em;</span><br><span class="line">    background-color: #ccc;</span><br><span class="line">    margin: 20px;</span><br><span class="line">    padding: 40px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="The-Box-Model"><a href="#The-Box-Model" class="headerlink" title="The Box Model"></a>The Box Model</h1><p>Margins, padding and borders are all part of what’s known as the Box Model. </p><p>The Box Model works like this: in the middle you have the content area (let’s say an image), surrounding that you have the padding, surrounding that you have the border and surrounding that you have the margin. It can be visually represented like this:</p><p><img src="https://i.imgur.com/AY0cGAQ.png"></p><h1 id="Borders"><a href="#Borders" class="headerlink" title="Borders"></a>Borders</h1><p>To make a border around an element, all you need is border-style. The values can be solid, dotted, dashed, double, groove, ridge, inset and outset.</p><p><img src="https://i.imgur.com/uyxOXNP.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h2 &#123;</span><br><span class="line">    border-style: dashed;</span><br><span class="line">    border-width: 3px;</span><br><span class="line">    border-left-width: 10px;</span><br><span class="line">    border-right-width: 10px;</span><br><span class="line">    border-color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS-for-beginner&quot;&gt;&lt;a href=&quot;#CSS-for-beginner&quot; class=&quot;headerlink&quot; title=&quot;CSS for beginner&quot;&gt;&lt;/a&gt;CSS for beginner&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;tags</summary>
      
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML-簡介</title>
    <link href="http://example.com/2021/03/21/HTML-HTML%E7%B0%A1%E4%BB%8B/"/>
    <id>http://example.com/2021/03/21/HTML-HTML%E7%B0%A1%E4%BB%8B/</id>
    <published>2021-03-20T17:30:10.008Z</published>
    <updated>2021-03-21T18:22:03.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML簡介"><a href="#HTML簡介" class="headerlink" title="HTML簡介"></a>HTML簡介</h1><hr><h2 id="tags-HTML-CSS-relate"><a href="#tags-HTML-CSS-relate" class="headerlink" title="tags: HTML CSS relate"></a>tags: HTML CSS relate</h2><h6 id="tags-HTML-CSS"><a href="#tags-HTML-CSS" class="headerlink" title="tags: HTML, CSS"></a>tags: <code>HTML, CSS</code></h6><h2 id="他的程式架構"><a href="#他的程式架構" class="headerlink" title="他的程式架構"></a>他的程式架構</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello Pages!!&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello pages!!&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="DOCTYPE-html"><a href="#DOCTYPE-html" class="headerlink" title="!DOCTYPE html"></a>!DOCTYPE html</h2><p>這個表示它們的類型</p><p>是HTML5，也是現行的大多數的瀏覽器都相容的格式</p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>被稱為根元素，基本上會把整個網站的內容包在裡面</p><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>網頁的描述 EX.字元集、標題、縮圖</p><h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><p>網頁的標題</p><h2 id="charset"><a href="#charset" class="headerlink" title="charset"></a>charset</h2><p>一個資料格式</p><h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><p>網頁瀏覽器的眼前的內容，文字、圖片、影片都是</p><hr><h2 id="headings"><a href="#headings" class="headerlink" title="headings"></a>headings</h2><p>像是h1<del>h2</del>h3(數字越小字體越大)這些東西都是，有著各種粗體跟大小的字體會讓文字顯示在網頁上</p><p><code>&lt;h1&gt;&lt;/h1&gt;</code></p><p><img src="https://i.imgur.com/XeigVbl.png"></p><h2 id="paragarph-block元素"><a href="#paragarph-block元素" class="headerlink" title="paragarph(block元素)"></a>paragarph(block元素)</h2><p>段落，每個段落都會有個空間存在，他的文字不會都黏在一起</p><p><code>&lt;P&gt; &lt;/P&gt;</code></p><p><img src="https://i.imgur.com/pUvlW87.png"></p><hr><h2 id="img"><a href="#img" class="headerlink" title="img"></a>img</h2><p>這是代表圖片的標籤<br>如果中間也沒有文字的話可以為了節省時間變成這樣寫</p><p><code>&lt;img src=&quot;裡面可以放入圖片的位置/&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">這個是正常寫法</span><br><span class="line">&lt;img src&#x3D;&quot;裡面可以放入圖片的位置&gt;&lt;&#x2F;img&gt;</span><br></pre></td></tr></table></figure><h2 id="ul、li"><a href="#ul、li" class="headerlink" title="ul、li"></a>ul、li</h2><p>代表列表 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;UL&gt;</span><br><span class="line">    &lt;li&gt;中間輸入內容&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;中間輸入內容&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;UL&gt;</span><br></pre></td></tr></table></figure><h2 id="a"><a href="#a" class="headerlink" title="a"></a>a</h2><p>這個標籤可以代表網頁的超連結</p><p><code>&lt;a href=放入超連結的網址&gt;名稱如.GOOGLE&lt;/a&gt;</code></p><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p>代表表格 tr 裡面是那列的內容，td表示那一欄的內容</p><p>border=”1” 這個屬性會讓格線出現<br>width=”400” 這個屬性表示表格寬度<br>cellpadding=”5” 這個屬性代表表格框框內容的填塞(可以讓內容不那麼擁擠)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot; width&#x3D;&quot;400&quot; cellpadding&#x3D;&quot;5&quot;&gt;</span><br><span class="line">    &lt;tr&gt;這裡代表表格的第一列</span><br><span class="line">        &lt;td&gt;這邊是第一欄&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;tr&gt;這裡代表表格的第二列</span><br><span class="line">        &lt;td&gt;這邊是第一欄&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><hr><h2 id="b"><a href="#b" class="headerlink" title="b"></a>b</h2><p>這個標籤的功能是讓文字變成粗體字</p><p><code>&lt;b&gt;中間放入要變粗體字的內容&lt;/b&gt;</code></p><p>u 這個標籤的功能是給文字加入底線</p><p><code>&lt;u&gt;中間放入要加入底線的內容&lt;/u&gt;</code></p><p>兩個功能合併的話可以又粗體又底線</p><p><code>&lt;u&gt;&lt;b&gt;中間放入要加入又粗體又底線的內容&lt;/b&gt;&lt;/u&gt;</code></p><hr><h2 id="hr"><a href="#hr" class="headerlink" title="hr"></a>hr</h2><p>這個標籤的功能是加入斜線區格</p><p>因為這個功能常常中間是沒有文字的，就可以把後面那個<code>&lt;/hr&gt;</code>整個去掉變成<code>&lt;hr/&gt;</code><br>這樣可以代替並節省時間</p><p><code>&lt;hr&gt;&lt;/hr&gt;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML簡介&quot;&gt;&lt;a href=&quot;#HTML簡介&quot; class=&quot;headerlink&quot; title=&quot;HTML簡介&quot;&gt;&lt;/a&gt;HTML簡介&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;tags-HTML-CSS-relate&quot;&gt;&lt;a href=&quot;#tags-HTML-CS</summary>
      
    
    
    
    <category term="HTML" scheme="http://example.com/categories/HTML/"/>
    
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap 5-First Look</title>
    <link href="http://example.com/2021/03/21/Bootstrap-Bootstrap%205%20-%20First%20Look/"/>
    <id>http://example.com/2021/03/21/Bootstrap-Bootstrap%205%20-%20First%20Look/</id>
    <published>2021-03-20T17:22:07.626Z</published>
    <updated>2021-03-21T18:21:52.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bootstrap-5-First-Look"><a href="#Bootstrap-5-First-Look" class="headerlink" title="Bootstrap 5 - First Look"></a>Bootstrap 5 - First Look</h1><hr><h2 id="tags-HTML-CSS-Bootstrap-relate"><a href="#tags-HTML-CSS-Bootstrap-relate" class="headerlink" title="tags: HTML CSS Bootstrap relate"></a>tags: HTML CSS Bootstrap relate</h2><h6 id="tags-HTML-CSS-Bootstrap"><a href="#tags-HTML-CSS-Bootstrap" class="headerlink" title="tags: HTML, CSS, Bootstrap"></a>tags: <code>HTML, CSS, Bootstrap</code></h6><h1 id="bootstrap-5-特色"><a href="#bootstrap-5-特色" class="headerlink" title="bootstrap 5 特色"></a>bootstrap 5 特色</h1><h2 id="官方文件的更新與改進"><a href="#官方文件的更新與改進" class="headerlink" title="官方文件的更新與改進"></a>官方文件的更新與改進</h2><p>新的外觀<br>Customization新增更多解釋<br>增加v4版本 主題的頁數以及新增內容<br>新增npm project</p><h2 id="擴充color-palette"><a href="#擴充color-palette" class="headerlink" title="擴充color palette"></a>擴充color palette</h2><p><img src="https://i.imgur.com/y2VfRW8.png"></p><h2 id="不需要再引入jQuery"><a href="#不需要再引入jQuery" class="headerlink" title="不需要再引入jQuery"></a>不需要再引入jQuery</h2><ul><li>JS的插件依舊支援</li><li>減少檔案大小</li><li>不支援IE瀏覽器</li></ul><h2 id="CSS-custom-properties"><a href="#CSS-custom-properties" class="headerlink" title="CSS custom properties"></a>CSS custom properties</h2><p><img src="https://i.imgur.com/27ThtQm.png"></p><h2 id="升級Forms"><a href="#升級Forms" class="headerlink" title="升級Forms"></a>升級Forms</h2><ul><li>更多自主化設定的空間</li><li>文件的部分新增內容</li><li>重新設計form controls</li></ul><h2 id="強化Grid-system"><a href="#強化Grid-system" class="headerlink" title="強化Grid system"></a>強化Grid system</h2><ul><li>新的格式xxl tier</li><li>.gutter class被修改</li><li>form layout 被新的grid system取代</li><li>新增vertical class</li><li>column不再預設position:relative</li></ul><h2 id="新增icon-library"><a href="#新增icon-library" class="headerlink" title="新增icon-library"></a>新增icon-library</h2><p><a href="https://icons.getbootstrap.com/">取用位置</a></p><h1 id="啟用bootstrap-5"><a href="#啟用bootstrap-5" class="headerlink" title="啟用bootstrap 5"></a>啟用bootstrap 5</h1><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p><strong>使用連結嵌入網址:</strong><br>缺點客製化能力比較差</p><p><a href="%5B%E5%8F%96%E7%94%A8%E4%BD%8D%E7%BD%AE%5D(https://icons.getbootstrap.com/)">網址</a></p><p><img src="https://i.imgur.com/9DaDKUc.png"></p><p><strong>使用npm:</strong></p><p>客製化能力比較好</p><p>這邊會下載到最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bootstrap@next</span><br></pre></td></tr></table></figure><p>下載icon library</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bootstrap-icons</span><br></pre></td></tr></table></figure><p>裝好之後我們看到這邊<br><img src="https://i.imgur.com/I33IubM.png"></p><p>引入js的檔案<br><img src="https://i.imgur.com/C3kwixS.png"></p><p>所有可用的icons<br><img src="https://i.imgur.com/m779H3T.png"></p><p>引入sass的關鍵檔案<br><img src="https://i.imgur.com/bE2CTiT.png"></p><h2 id="推薦使用插件"><a href="#推薦使用插件" class="headerlink" title="推薦使用插件"></a>推薦使用插件</h2><p>live sass compiler</p><p>如果有使用live server(基本上一定有這個必裝)<br>一鍵開關watch功能</p><p><img src="https://i.imgur.com/JcJHf6d.png"></p><p><img src="https://i.imgur.com/RZ2grSP.png"></p><p>到vscode裡面做設定<br>點擊json設定檔</p><p><img src="https://i.imgur.com/pawih09.png"></p><p>設定檔案存檔路徑以及不產生source map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;liveSassCompile.settings.formats&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;format&quot;: &quot;compressed&quot;,</span><br><span class="line">      &quot;extensionName&quot;: &quot;.css&quot;,</span><br><span class="line">      &quot;savePath&quot;: &quot;&#x2F;css&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;liveSassCompile.settings.generateMap&quot;: false</span><br></pre></td></tr></table></figure><p>設立資料夾如下<br><img src="https://i.imgur.com/v5SIVHu.png"></p><p>在main.scss引入bootstap.scss<br><img src="https://i.imgur.com/mjam0ly.png"></p><p>會把所有的scss元素轉換成css使用</p><p>點擊watch Sass後就可以開始專案摟!<br><img src="https://i.imgur.com/JcJHf6d.png"></p><p><img src="https://i.imgur.com/nGAydGK.png"></p><h1 id="專案內容"><a href="#專案內容" class="headerlink" title="專案內容"></a>專案內容</h1><p>專案圖示<br><img src="https://i.imgur.com/mG0HCTV.png"></p><p>簡單的製作登入頁面(無功能)</p><h2 id="客製化"><a href="#客製化" class="headerlink" title="客製化"></a>客製化</h2><p>針對顏色 客製化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$primary: #401f7c;</span><br><span class="line">$secondary: #f4f4f4;</span><br></pre></td></tr></table></figure><p>針對border 客製化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$border-radius:0;</span><br><span class="line">$border-radius-sm:0;</span><br><span class="line">$border-radius-lg:0;</span><br></pre></td></tr></table></figure><p>針對utilities 客製化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Utilities</span><br><span class="line">$utilities:() !default;</span><br><span class="line">$utilities:map-merge((&#39;input-padding&#39;:(property:padding,</span><br><span class="line">            class:ip,</span><br><span class="line">            values:(0:0,</span><br><span class="line">                1:0.3rem,</span><br><span class="line">                2:0.5rem,</span><br><span class="line">                3:0.7rem,</span><br><span class="line">                4:0.9rem,</span><br><span class="line">                5:1rem,</span><br><span class="line">            ),</span><br><span class="line">        )),</span><br><span class="line">    $utilities);</span><br></pre></td></tr></table></figure><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body class&#x3D;&quot;d-flex text-center bg-secondary&quot;&gt;</span><br></pre></td></tr></table></figure><p>直接使用flexbox並且文字置中並設定背景顏色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d-flex &#x3D; display : flex </span><br><span class="line">text-center</span><br><span class="line">bg-secondary &#x3D; backgroup-color : $secondary</span><br></pre></td></tr></table></figure><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>則直接取用icon-library</p><p><code>src=&quot;/bs5-landingpage/scss/node_modules/bootstrap-icons/icons/bootstrap.svg&quot;</code></p><p>並且使用<code>mb-4</code>增加下方一點空間</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.mb-4 &#123;</span><br><span class="line">  margin-bottom: $spacer * 1.5 !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 class&#x3D;&quot;h3 mb-3 font-weight-normal&quot;&gt;Bootstrap 5 Login&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><p>重新設定為h3</p><p>字體設定<code>font-weight-normal</code></p><p>也可以縮寫成 <code>fw-normal</code></p><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p><code>sr-only</code> screen-reader(幫助聽障人士使用對畫面不影響)</p><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p><code>form-control</code> 不加大小的話則為預設</p><p>form-control的樣板<br><img src="https://i.imgur.com/znnj3CG.png"></p><p>ip-3 在上方使用自訂的工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Utilities</span><br><span class="line">$utilities:() !default;</span><br><span class="line">$utilities:map-merge((&#39;input-padding&#39;:(property:padding,</span><br><span class="line">            class:ip,</span><br><span class="line">            values:(0:0,</span><br><span class="line">                1:0.3rem,</span><br><span class="line">                2:0.5rem,</span><br><span class="line">                3:0.7rem,</span><br><span class="line">                4:0.9rem,</span><br><span class="line">                5:1rem,</span><br><span class="line">            ),</span><br><span class="line">        )),</span><br><span class="line">    $utilities);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;email&quot; id&#x3D;&quot;inputEmail&quot; class&#x3D;&quot;form-control mb-2 ip-3&quot; placeholder&#x3D;&quot;Email Address&quot; required</span><br><span class="line">            autofocus&gt;</span><br></pre></td></tr></table></figure><h3 id="btn"><a href="#btn" class="headerlink" title="btn"></a>btn</h3><p>btn樣板們<br><img src="https://i.imgur.com/wfM8nhO.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class&#x3D;&quot;btn btn-lg btn-primary btn-block&quot; type&#x3D;&quot;submit&quot;&gt;Login&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><h3 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body class&#x3D;&quot;d-flex text-center bg-secondary&quot;&gt;</span><br><span class="line">    &lt;form class&#x3D;&quot;form-login&quot;&gt;&lt;img src&#x3D;&quot;&#x2F;bs5-landingpage&#x2F;scss&#x2F;node_modules&#x2F;bootstrap-icons&#x2F;icons&#x2F;bootstrap.svg&quot;</span><br><span class="line">            height&#x3D;&quot;72&quot; width&#x3D;&quot;72&quot; class&#x3D;&quot;mb-4&quot;&gt;</span><br><span class="line">        &lt;h1 class&#x3D;&quot;h3 mb-3 font-weight-normal&quot;&gt;Bootstrap 5 Login&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;inpuEmail&quot; class&#x3D;&quot;sr-only&quot;&gt;Email Address&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type&#x3D;&quot;email&quot; id&#x3D;&quot;inputEmail&quot; class&#x3D;&quot;form-control mb-2 ip-3&quot; placeholder&#x3D;&quot;Email Address&quot; required</span><br><span class="line">            autofocus&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;inputPassword&quot; class&#x3D;&quot;sr-only&quot;&gt;Password&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;inputPassword&quot; class&#x3D;&quot;form-control mb-2&quot; placeholder&#x3D;&quot;Password&quot; required&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class&#x3D;&quot;checkbox mb-3&quot;&gt;</span><br><span class="line">            &lt;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;remember-me&quot;&gt;Remember Me&lt;&#x2F;input&gt;</span><br><span class="line">            &lt;&#x2F;label&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;button class&#x3D;&quot;btn btn-lg btn-primary btn-block&quot; type&#x3D;&quot;submit&quot;&gt;Login&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;scss&#x2F;node_modules&#x2F;bootstrap&#x2F;dist&#x2F;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;scss&#x2F;node_modules&#x2F;popper.js&#x2F;dist&#x2F;umd&#x2F;popper.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bootstrap-5-First-Look&quot;&gt;&lt;a href=&quot;#Bootstrap-5-First-Look&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap 5 - First Look&quot;&gt;&lt;/a&gt;Bootstrap 5 - Firs</summary>
      
    
    
    
    <category term="Bootstrap" scheme="http://example.com/categories/Bootstrap/"/>
    
    
    <category term="Bootstrap" scheme="http://example.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap 4-Responsive Website Design</title>
    <link href="http://example.com/2021/03/21/Bootstrap%204%20-%20Responsive%20Website%20Design/"/>
    <id>http://example.com/2021/03/21/Bootstrap%204%20-%20Responsive%20Website%20Design/</id>
    <published>2021-03-20T17:12:29.489Z</published>
    <updated>2021-03-21T18:21:40.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bootstrap-4-Responsive-Website-Design"><a href="#Bootstrap-4-Responsive-Website-Design" class="headerlink" title="Bootstrap 4 - Responsive Website Design"></a>Bootstrap 4 - Responsive Website Design</h1><hr><h2 id="tags-HTML-CSS-Bootstrap-relate"><a href="#tags-HTML-CSS-Bootstrap-relate" class="headerlink" title="tags: HTML CSS Bootstrap relate"></a>tags: HTML CSS Bootstrap relate</h2><h6 id="tags-HTML-CSS-Bootstrap"><a href="#tags-HTML-CSS-Bootstrap" class="headerlink" title="tags: HTML, CSS, Bootstrap"></a>tags: <code>HTML, CSS, Bootstrap</code></h6><h1 id="製作一個-使用Bootstrap的網站"><a href="#製作一個-使用Bootstrap的網站" class="headerlink" title="製作一個 使用Bootstrap的網站"></a>製作一個 使用Bootstrap的網站</h1><h2 id="成品"><a href="#成品" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/8X5zcSP.png"></p><p><a href="https://chiehliu.github.io/git-projects/Bootstrap%202020%20Starter%20Files/index.html">成品網址</a></p><h2 id="成品功能"><a href="#成品功能" class="headerlink" title="成品功能:"></a>成品功能:</h2><ol><li>點擊漢堡會有下拉是選單跳出(並且可以開關)</li><li>中間有大圖呈現slide 效果並且點擊或是等待都可以讓slide移動</li><li>呈現一個三欄位/兩欄位的文章區塊</li><li>中間有圖片固定的區域並且點擊按鈕會有跳出視窗</li><li>插頭符號也可以跳出區塊顯示圖片</li><li>jumbotron 區域展示顏色變化以及一段文字及按鈕</li><li>最後是footer區域顯示social icon</li></ol><h1 id="介紹使用到的Bootstrap-4-元素"><a href="#介紹使用到的Bootstrap-4-元素" class="headerlink" title="介紹使用到的Bootstrap 4 元素"></a>介紹使用到的Bootstrap 4 元素</h1><h2 id="margin-padding"><a href="#margin-padding" class="headerlink" title="margin, padding"></a>margin, padding</h2><p>範例</p><p>使用 mr-lg-3<br>代表margin-right: 1rem並且breakpoint在lg</p><p><img src="https://i.imgur.com/KgbVswT.png"></p><h2 id="Navigation-區域"><a href="#Navigation-區域" class="headerlink" title="Navigation 區域"></a>Navigation 區域</h2><ul><li><p>container<br>這邊使用的是預設的版本，所有會有四個breadkpoint(觸發RWD的點)，並且置中</p></li><li><p>col-12<br>使用的是bootstrap內部的gird系統，主要分為12格，這邊這樣使用會有滿版的效果</p></li><li><p>text-right<br>讓文字往右，其中也有搭配RWD的作法，ex.使用text-lg-right 可以讓文字在lg的breadkpoint時取消文字定位</p></li><li><p>navbar<br>使用navbar系列的功能必須先使用這個關鍵字包覆住</p></li><li><p>bg-light<br>讓背景呈現淺色</p></li><li><p>navbar-light<br>讓文字配合淺色背景</p></li><li><p>navbar-expand-lg<br>讓navbar RWD的關鍵，不使用的話會預設滿版</p></li><li><p>navbar-brand<br>使用在公司名稱的部分或是logo</p></li></ul><ul><li>下拉式選單標準作法<br>button是漢堡的部分<br>collapse navbar-collapse的部分是會被隱藏的選單部分</li></ul><p><img src="https://i.imgur.com/BAAEHJn.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class&#x3D;&quot;navbar-toggler&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;span class&#x3D;&quot;navbar-toggler-icon&quot; type&#x3D;&quot;button&quot; data-toggle&#x3D;&quot;collapse&quot; data-target&#x3D;&quot;#navbarResponsive&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;collapse navbar-collapse&quot; id&#x3D;&quot;navbarResponsive&quot;&gt;</span><br><span class="line">        &lt;ul class&#x3D;&quot;navbar-nav ml-auto&quot;&gt;</span><br><span class="line">          &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><p>ml-auto<br>使物件靠右</p></li><li><p>nav-item nav-link<br>在navbar中的物件使用</p></li></ul><h3 id="使用到的CSS"><a href="#使用到的CSS" class="headerlink" title="使用到的CSS"></a>使用到的CSS</h3><p>為了要蓋掉bootstrap原生的顏色要使用 <code>!important</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav-link</span> &#123;</span><br><span class="line">  <span class="comment">/* 加上驚嘆號去取代bootstrap內建的顏色 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5b5555</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-link</span><span class="selector-class">.active</span>,</span><br><span class="line"><span class="selector-class">.nav-link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4981b3</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Carousel-區域"><a href="#Carousel-區域" class="headerlink" title="Carousel 區域"></a>Carousel 區域</h2><ul><li>必須安裝 util.js. 這包boostrap的內容才可以使用</li></ul><p>使用範例</p><p>data-interval的部分是 換張投影片的間隔時間(ms毫秒)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;carousel&quot; class&#x3D;&quot;carousel slide&quot; data-ride&#x3D;&quot;carousel&quot; data-interval&#x3D;&quot;6500&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><p>carousel-inner<br>針對投影片區域的圖片區域做包裹的動作</p></li><li><p>carousel-item<br>主要放在carousel-inner裡面，內部設置投影片的內容(圖片文字等等)，並且有active的item為預設值</p></li><li><p>carousel-caption<br>使用在幻燈片如果需要標題時可以嵌入</p></li><li><p>carousel-control-prev(next)<br>選取#carousel後嵌入範例即可使用<br>上一張/下一張 功能並且搭配fontawesome的箭頭作範例</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#carousel&quot; class&#x3D;&quot;carousel-control-prev&quot; role&#x3D;&quot;button&quot; data-slide&#x3D;&quot;prev&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;fas fa-chevron-left fa-2x&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h2 id="Emoji-Navbar-區域"><a href="#Emoji-Navbar-區域" class="headerlink" title="Emoji Navbar 區域"></a>Emoji Navbar 區域</h2><p>這兩個區域點擊會觸發下面四個圖片的縮放</p><p><img src="https://i.imgur.com/DKVx8Sa.png"></p><p><img src="https://i.imgur.com/48hoY2E.png"></p><p>主要使用了</p><ul><li><p>a tag的部分<br>href部分抓取#emoji也就是要出現部分的id，並且使用<code>data-toggle=&quot;collapse&quot;</code></p></li><li><p>下方圖片toggle處 使用 class = collapse 以及設置id = emoji</p></li></ul><p>這部分比較特別的地方是插頭的部分在css選取器上，比較特別要去google inspect裡面看才知道</p><h2 id="fixed-img-內部的跳出視窗功能"><a href="#fixed-img-內部的跳出視窗功能" class="headerlink" title="fixed img 內部的跳出視窗功能"></a>fixed img 內部的跳出視窗功能</h2><p>點擊下方藍色跟紅色按鈕會出現的圖片<br><img src="https://i.imgur.com/eaIbItx.png"></p><p>使用modal做到跳出視窗的效果</p><ul><li><p>針對按鈕的部分加入<br><code>data-toggle=&quot;modal&quot; data-target=&quot;#modal1&quot;</code></p></li><li><p>跳出圖片的部分<br>設置被抓取的<code>id = modal1</code><br>並在內容處設置 <code>modal-dialog</code></p></li></ul><h2 id="Jumbotron-區域"><a href="#Jumbotron-區域" class="headerlink" title="Jumbotron 區域"></a>Jumbotron 區域</h2><p>一個簡單並且滿版的區域並且對內部文字按鈕有基本裝飾跟定位</p><ul><li>Jumbotron</li></ul><p><img src="https://i.imgur.com/14tTA2B.png"></p><h1 id="html程式碼"><a href="#html程式碼" class="headerlink" title="html程式碼:"></a>html程式碼:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta</span><br><span class="line">      name&#x3D;&quot;viewport&quot;</span><br><span class="line">      content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, viewport-fit&#x3D;cover&quot;</span><br><span class="line">    &#x2F;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;HTML5 Website with Bootstrap | Responsive Website Design&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;shortcut icon&quot; href&#x3D;&quot;img&#x2F;favicon.ico&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- Bootstrap 4.5 CSS --&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;bootstrap.min.css&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- Style CSS --&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;style.css&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- Google Fonts --&gt;</span><br><span class="line">    &lt;link</span><br><span class="line">      href&#x3D;&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css?family&#x3D;Montserrat:300,400,500,600,700&amp;display&#x3D;swap&quot;</span><br><span class="line">      rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">    &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;!-- Top Bar --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;top-bar&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;!-- 這邊col-12代表延續整個頁面 --&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-12 text-right&quot;&gt;</span><br><span class="line">          &lt;!-- 因為bootstrap的關係 a 的文字會直接顯示藍色 --&gt;</span><br><span class="line">          &lt;p&gt;&lt;a href&#x3D;&quot;tel:+999123888&quot;&gt; Call us at 1 (800) HTML - CSS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- End Top Bar --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Navigation --&gt;</span><br><span class="line">    &lt;nav class&#x3D;&quot;navbar bg-light navbar-light navbar-expand-large&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;index.html&quot; class&#x3D;&quot;navbar-brand&quot;</span><br><span class="line">          &gt;&lt;img src&#x3D;&quot;img&#x2F;logo.png&quot; alt&#x3D;&quot;logo&quot; title&#x3D;&quot;logo&quot;</span><br><span class="line">        &#x2F;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;button class&#x3D;&quot;navbar-toggler&quot;&gt;</span><br><span class="line">          &lt;!-- 加入bootstarp js library讓漢堡選單可以使用 --&gt;</span><br><span class="line">          &lt;span</span><br><span class="line">            class&#x3D;&quot;navbar-toggler-icon&quot;</span><br><span class="line">            type&#x3D;&quot;button&quot;</span><br><span class="line">            data-toggle&#x3D;&quot;collapse&quot;</span><br><span class="line">            data-target&#x3D;&quot;#navbarResponsive&quot;</span><br><span class="line">          &gt;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;collapse navbar-collapse&quot; id&#x3D;&quot;navbarResponsive&quot;&gt;</span><br><span class="line">          &lt;ul class&#x3D;&quot;navbar-nav ml-auto&quot;&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;nav-item&quot;&gt;</span><br><span class="line">              &lt;a href&#x3D;&quot;index.html&quot; class&#x3D;&quot;nav-link active&quot;&gt;Home&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;&quot; class&#x3D;&quot;nav-link&quot;&gt;About&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;&quot; class&#x3D;&quot;nav-link&quot;&gt;Services&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;&quot; class&#x3D;&quot;nav-link&quot;&gt;Projects&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li class&#x3D;&quot;nav-item&quot;&gt;&lt;a href&#x3D;&quot;&quot; class&#x3D;&quot;nav-link&quot;&gt;Contact Us&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;nav&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- End Navigation --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Image Carousel --&gt;</span><br><span class="line">    &lt;!-- 加入bootstarp js library讓slide可以動 --&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      id&#x3D;&quot;carousel&quot;</span><br><span class="line">      class&#x3D;&quot;carousel slide&quot;</span><br><span class="line">      data-ride&#x3D;&quot;carousel&quot;</span><br><span class="line">      data-interval&#x3D;&quot;6500&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- Carousel Content --&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;carousel-inner&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;carousel-item active&quot;&gt;</span><br><span class="line">          &lt;!-- 這邊使用w-100會讓圖片吃到其父母層的100%寬度 --&gt;</span><br><span class="line">          &lt;img src&#x3D;&quot;img&#x2F;carousel&#x2F;1.jpg&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;carousel-caption&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">              &lt;div class&#x3D;&quot;row justify-content-center&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;col-8 bg-custom d-none d-md-block py-3 px-0&quot;&gt;</span><br><span class="line">                  &lt;h1&gt;Bootstrap&lt;&#x2F;h1&gt;</span><br><span class="line">                  &lt;div class&#x3D;&quot;border-top border-primay w-50 mx-auto my-3&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                  &lt;h3 class&#x3D;&quot;pb-3&quot;&gt;Complete Website Design&lt;&#x2F;h3&gt;</span><br><span class="line">                  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;btn btn-danger btn-lg mr-2&quot;&gt;View Demo&lt;&#x2F;a&gt;</span><br><span class="line">                  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;btn btn-primary btn-lg ml-2&quot;&gt;Start Now&lt;&#x2F;a&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class&#x3D;&quot;carousel-item&quot;&gt;</span><br><span class="line">          &lt;img src&#x3D;&quot;img&#x2F;carousel&#x2F;2.jpg&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;carousel-caption&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">              &lt;div class&#x3D;&quot;row justify-content-end text-right&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;col-5 bg-custom d-none d-lg-block py-3 px-0 pr-3&quot;&gt;</span><br><span class="line">                  &lt;!-- lead會使用font-weight&#x3D;300 --&gt;</span><br><span class="line">                  &lt;p class&#x3D;&quot;lead pb-3&quot;&gt;</span><br><span class="line">                    Lorem ipsum dolor sit amet consectetur.</span><br><span class="line">                  &lt;&#x2F;p&gt;</span><br><span class="line">                  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;btn btn-danger btn-lg mr-2&quot;&gt;See PHone&lt;&#x2F;a&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class&#x3D;&quot;carousel-item&quot;&gt;</span><br><span class="line">          &lt;img src&#x3D;&quot;img&#x2F;carousel&#x2F;3.jpg&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;carousel-caption&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">              &lt;div class&#x3D;&quot;row justify-content-center text-left&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;col-7 bg-custom d-none d-lg-block py-3 px-0 pl-3&quot;&gt;</span><br><span class="line">                  &lt;h3 class&#x3D;&quot;pb-3&quot;&gt;Lorem, ipsum dolor.&lt;&#x2F;h3&gt;</span><br><span class="line">                  &lt;p class&#x3D;&quot;lead&quot;&gt;</span><br><span class="line">                    Lorem ipsum, dolor sit amet consectetur adipisicing elit.</span><br><span class="line">                  &lt;&#x2F;p&gt;</span><br><span class="line">                  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;btn btn-primary btn-lg ml-2&quot;&gt;Start Now&lt;&#x2F;a&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;!-- End Carousel Content --&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- Previous &amp; Next Buttons --&gt;</span><br><span class="line">      &lt;a</span><br><span class="line">        href&#x3D;&quot;#carousel&quot;</span><br><span class="line">        class&#x3D;&quot;carousel-control-prev&quot;</span><br><span class="line">        role&#x3D;&quot;button&quot;</span><br><span class="line">        data-slide&#x3D;&quot;prev&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;fas fa-chevron-left fa-2x&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">      &lt;a</span><br><span class="line">        href&#x3D;&quot;#carousel&quot;</span><br><span class="line">        class&#x3D;&quot;carousel-control-next&quot;</span><br><span class="line">        role&#x3D;&quot;button&quot;</span><br><span class="line">        data-slide&#x3D;&quot;next&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;fas fa-chevron-right fa-2x&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;a&gt;</span><br><span class="line">      &lt;!-- End Previous &amp; Next Buttons --&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- End Image Carousel --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Main Page Heading --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-12 text-center mt-5&quot;&gt;</span><br><span class="line">      &lt;h1 class&#x3D;&quot;text-dark pt-4&quot;&gt;Built With Ease&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;border-top border-primay w-25 mx-auto my-3&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;p class&#x3D;&quot;lead&quot;&gt;Lorem ipsum, dolor sit amet consectetur adipisicing.&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Three Column Section --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;row my-5&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-4 my-4&quot;&gt;</span><br><span class="line">          &lt;img src&#x3D;&quot;img&#x2F;1.jpg&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">          &lt;h4 class&#x3D;&quot;my-4&quot;&gt;Lorem, ipsum.&lt;&#x2F;h4&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            Lorem ipsum dolor, sit amet consectetur adipisicing elit.</span><br><span class="line">            Aspernatur, iure!</span><br><span class="line">          &lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">          &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;btn btn-outline-dark btn-md&quot;&gt;Our Story&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-4 my-4&quot;&gt;</span><br><span class="line">          &lt;img src&#x3D;&quot;img&#x2F;2.jpg&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">          &lt;h4 class&#x3D;&quot;my-4&quot;&gt;Lorem, ipsum.&lt;&#x2F;h4&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            Lorem ipsum dolor, sit amet consectetur adipisicing elit.</span><br><span class="line">            Aspernatur, iure!</span><br><span class="line">          &lt;&#x2F;p&gt;</span><br><span class="line">          &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;btn btn-outline-dark btn-md&quot;&gt;Our Story&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-4 my-4&quot;&gt;</span><br><span class="line">          &lt;img src&#x3D;&quot;img&#x2F;3.jpg&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">          &lt;h4 class&#x3D;&quot;my-4&quot;&gt;Lorem, ipsum.&lt;&#x2F;h4&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            Lorem ipsum dolor, sit amet consectetur adipisicing elit.</span><br><span class="line">            Aspernatur, iure!</span><br><span class="line">          &lt;&#x2F;p&gt;</span><br><span class="line">          &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;btn btn-outline-dark btn-md&quot;&gt;Our Story&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- End Three Column Section --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Emoji Navbar First --&gt;</span><br><span class="line">    &lt;a</span><br><span class="line">      class&#x3D;&quot;navbar bg-primary sticky-top emoji&quot;</span><br><span class="line">      href&#x3D;&quot;#emoju&quot;</span><br><span class="line">      role&#x3D;&quot;button&quot;</span><br><span class="line">      data-toggle&#x3D;&quot;collapse&quot;</span><br><span class="line">    &gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Start Fixed Background IMG --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;fixed-background&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;row text-light py-5&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-12 text-center&quot;&gt;</span><br><span class="line">          &lt;h1&gt;Advance to Next Level&lt;&#x2F;h1&gt;</span><br><span class="line">          &lt;h3&gt;..see what&#39;s on the other side&lt;&#x2F;h3&gt;</span><br><span class="line">          &lt;!-- 這邊使用modal library可以達到跳出視窗的效果 --&gt;</span><br><span class="line">          &lt;button</span><br><span class="line">            type&#x3D;&quot;button&quot;</span><br><span class="line">            data-toggle&#x3D;&quot;modal&quot;</span><br><span class="line">            data-target&#x3D;&quot;#modal1&quot;</span><br><span class="line">            class&#x3D;&quot;btn btn-primary btn-lg mr-2&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            Blue pill</span><br><span class="line">          &lt;&#x2F;button&gt;</span><br><span class="line">          &lt;button</span><br><span class="line">            type&#x3D;&quot;button&quot;</span><br><span class="line">            data-toggle&#x3D;&quot;modal&quot;</span><br><span class="line">            data-target&#x3D;&quot;#modal1&quot;</span><br><span class="line">            class&#x3D;&quot;btn btn-danger btn-lg ml-2&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            Red pill</span><br><span class="line">          &lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;fixed-wrap&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;fixed&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- End Fixed Background IMG --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Emoji Navbar Second --&gt;</span><br><span class="line">    &lt;a</span><br><span class="line">      class&#x3D;&quot;navbar bg-primary sticky-top emoji&quot;</span><br><span class="line">      href&#x3D;&quot;#emoji&quot;</span><br><span class="line">      role&#x3D;&quot;button&quot;</span><br><span class="line">      data-toggle&#x3D;&quot;collapse&quot;</span><br><span class="line">      &gt;&lt;i class&#x3D;&quot;fas fa-plug&quot;&gt;&lt;&#x2F;i</span><br><span class="line">    &gt;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;collapse&quot; id&#x3D;&quot;emoji&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-sm-6 col-md-3&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;img&#x2F;emoji&#x2F;panda.gif&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-sm-6 col-md-3&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;img&#x2F;emoji&#x2F;poo.gif&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-sm-6 col-md-3&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;img&#x2F;emoji&#x2F;unicorn.gif&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-sm-6 col-md-3&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;img&#x2F;emoji&#x2F;chicken.gif&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- Modal Popup --&gt;</span><br><span class="line">    &lt;!-- modal連接處 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;modal fade&quot; id&#x3D;&quot;modal1&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;modal-dialog&quot;&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;img&#x2F;emoji&#x2F;poo.gif&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- Start Two Column Section --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container my-5&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;row py-4&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-lg-4 mb-4 my-lg-auto&quot;&gt;</span><br><span class="line">          &lt;h1 class&#x3D;&quot;text-dark font-weight&#x3D;bold mb-3&quot;&gt;We&#39;ve Expecting YOu&lt;&#x2F;h1&gt;</span><br><span class="line">          &lt;p class&#x3D;&quot;mb-4&quot;&gt;</span><br><span class="line">            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sapiente</span><br><span class="line">            tenetur minus illum excepturi beatae neque at numquam a nam</span><br><span class="line">            voluptas!</span><br><span class="line">          &lt;&#x2F;p&gt;</span><br><span class="line">          &lt;a href&#x3D;&quot;#&quot; target&#x3D;&quot;_blank&quot; class&#x3D;&quot;btn btn-outline-dark btn-lg&quot;</span><br><span class="line">            &gt;The Agency THeme&lt;&#x2F;a</span><br><span class="line">          &gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class&#x3D;&quot;col-lg-8&quot;&gt;</span><br><span class="line">          &lt;img src&#x3D;&quot;img&#x2F;code.jpg&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;w-100&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- End Two Column Section --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Start Jumbotron --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;jumbotron py-5 mb-0&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-md-7 col-lg-8 col-xl-9 my-auto&quot;&gt;</span><br><span class="line">            &lt;h4&gt;Lorem ipsum dolor sit amet.&lt;&#x2F;h4&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;div class&#x3D;&quot;col-md-5 col-lg-4 col-xl-3 pt-4 pt-md-0&quot;&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;btn btn-primary btn-lg&quot;&gt;Contact US&lt;&#x2F;a&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- End Jumbotron --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Start Footer --&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;row text-light text-center py-4 justify-content-center&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-sm-10 col-md-8 col-lg-6&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;img&#x2F;logo-white.png&quot; alt&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">              Lorem ipsum dolor sit amet consectetur adipisicing elit. Iusto</span><br><span class="line">              laudantium culpa voluptates repellat! Hic rerum error facilis</span><br><span class="line">              sequi natus voluptates enim tenetur. Provident iusto laborum minus</span><br><span class="line">              aliquam, eum placeat?</span><br><span class="line">            &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;ul class&#x3D;&quot;social pt-3 m-auto&quot;&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;a href&#x3D;&quot;#&quot;&gt;&lt;i class&#x3D;&quot;fab fa-facebook&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;a&gt;</span><br><span class="line">              &lt;&#x2F;li&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;a href&#x3D;&quot;#&quot;&gt;&lt;i class&#x3D;&quot;fab fa-twitter&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;a&gt;</span><br><span class="line">              &lt;&#x2F;li&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;a href&#x3D;&quot;#&quot;&gt;&lt;i class&#x3D;&quot;fab fa-instagram&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;a&gt;</span><br><span class="line">              &lt;&#x2F;li&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;a href&#x3D;&quot;#&quot;&gt;&lt;i class&#x3D;&quot;fab fa-youtube&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;a&gt;</span><br><span class="line">              &lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;footer&gt;</span><br><span class="line">    &lt;!-- End Footer --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Start Socket --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;socket text-light text-center py-3&quot;&gt;</span><br><span class="line">      &lt;p&gt;&amp;copy; &lt;a href&#x3D;&quot;#&quot;&gt;123.com&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- End Socket --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Script Source Files --&gt;</span><br><span class="line">    &lt;!-- jQuery --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;jquery-3.5.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!-- Bootstrap 4.5 JS --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!-- Popper JS --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;popper.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!-- Font Awesome --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;all.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!-- End Script Source Files --&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h1><h2 id="CSS完整程式碼"><a href="#CSS完整程式碼" class="headerlink" title="CSS完整程式碼"></a>CSS完整程式碼</h2><p><a href="https://github.com/chiehLiu/git-projects/blob/bootstrap-practice-1/Bootstrap%202020%20Starter%20Files/css/style.css">CSS 原始碼</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bootstrap-4-Responsive-Website-Design&quot;&gt;&lt;a href=&quot;#Bootstrap-4-Responsive-Website-Design&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap 4 - Resp</summary>
      
    
    
    
    <category term="Bootstrap" scheme="http://example.com/categories/Bootstrap/"/>
    
    
    <category term="Bootstrap" scheme="http://example.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Vue-文件閱讀 part 2- The Vue Instance(5000字)</title>
    <link href="http://example.com/2021/03/21/Vue.js%20%E6%96%87%E4%BB%B6%E9%96%B1%E8%AE%80%20part%202-%20The%20Vue%20Instance/"/>
    <id>http://example.com/2021/03/21/Vue.js%20%E6%96%87%E4%BB%B6%E9%96%B1%E8%AE%80%20part%202-%20The%20Vue%20Instance/</id>
    <published>2021-03-20T17:08:38.289Z</published>
    <updated>2021-03-22T11:19:28.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-文件閱讀-part-2-The-Vue-Instance"><a href="#Vue-js-文件閱讀-part-2-The-Vue-Instance" class="headerlink" title="Vue.js 文件閱讀 part 2- The Vue Instance"></a>Vue.js 文件閱讀 part 2- The Vue Instance</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript-Vue-js"><a href="#tags-Javascript-Vue-js" class="headerlink" title="tags: Javascript, Vue.js"></a>tags: <code>Javascript, Vue.js</code></h6><h1 id="創造Vue實體-Creating-a-Vue-Instance"><a href="#創造Vue實體-Creating-a-Vue-Instance" class="headerlink" title="創造Vue實體 (Creating a Vue Instance)"></a>創造Vue實體 (Creating a Vue Instance)</h1><ul><li>所有的Vue app 都會從創造實例(Instance)開始</li><li>裡面的options處就是我們操作的地方，可以瀏覽<a href="https://vuejs.org/v2/api/#Options-Data"> API reference</a>來做操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// options</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>一個Vue app通常會有會有個root Vue instance由new Vue產生</li><li>伴隨著的是巢狀的樹組成的component，它具有可重複使用的特性</li><li>在ROOT下面的都是component的部分</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Root Instance</span><br><span class="line">└─ TodoList</span><br><span class="line">   ├─ TodoItem </span><br><span class="line">   │  ├─ TodoButtonDelete</span><br><span class="line">   │  └─ TodoButtonEdit</span><br><span class="line">   └─ TodoListFooter</span><br><span class="line">      ├─ TodosButtonClear</span><br><span class="line">      └─ TodoListStatistics</span><br></pre></td></tr></table></figure><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:#app,</span><br><span class="line">    data: &#123;</span><br><span class="line">    product: <span class="string">&quot;Socks&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; product &#125;&#125; &lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;    </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>app使用el連接到html檔案內部的id = “app”的div</li><li>連結app內的data: poduct到html上</li><li>藉由改變index.js 內 product的內容可以及時修改html內的的內容</li></ul><p>呈現在網頁上的結果<br><img src="https://i.imgur.com/Q0nZBMD.png"></p><p>藉著改變屬性也可以及時修改頁面內容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.product = <span class="string">&#x27;Coat&#x27;</span></span><br><span class="line"><span class="comment">//印出結果變成Coat</span></span><br><span class="line"></span><br><span class="line">app.product = <span class="string">&quot;Compass&quot;</span></span><br><span class="line"><span class="comment">//印出結果變成Compass</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ZtJ5TBm.png"></p><p><img src="https://i.imgur.com/tvzMv4N.png"></p><h1 id="資料與方法-Data-and-Methods"><a href="#資料與方法-Data-and-Methods" class="headerlink" title="資料與方法(Data and Methods)"></a>資料與方法(Data and Methods)</h1><h2 id="data"><a href="#data" class="headerlink" title="$data"></a>$data</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">            msg: <span class="string">&#x27;123123&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data,</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>這兩個是相同的結果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm.$data === data   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">data.msg === vm.msg  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>因此當我們操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.msg =<span class="number">456</span></span><br><span class="line">vm.msg = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>畫面也會如此響應</p><p>但是如果使用不存在的屬性時畫面則不會響，得使用不同的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.b = <span class="string">&#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure><p>但是如果你知道可能稍後會有屬性會使用到，但目前得空著或是還未存在，因此就必須設預設值</p><p>比方說要規畫一個todoList app可能會使用到的data:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  newTodoText: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  visitCount: <span class="number">0</span>,</span><br><span class="line">  hideCompletedTodos: <span class="literal">false</span>,</span><br><span class="line">  todos: [],</span><br><span class="line">  error: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h2><p>可以關閉reative，讓畫面不被響應</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">            msg: <span class="string">&#x27;hello Vue&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data,</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>在這個情況下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.msg =<span class="number">456</span></span><br><span class="line">vm.msg = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>畫面也不會有任何響應</p><p>並vm也會變成只能讀不能寫<br><img src="https://i.imgur.com/IBZOEP4.png"></p><h2 id="前綴API"><a href="#前綴API" class="headerlink" title="$前綴API"></a>$前綴API</h2><p>$這個符號代表Vue提供給我們的功能<br>如<br>$data,<br>$el,<br>$watch等等</p><p><a href="https://vuejs.org/v2/api/#Instance-Properties">Instance Properties</a></p><h1 id="生命週期裝置實例-Instance-Lifecycle-Hooks"><a href="#生命週期裝置實例-Instance-Lifecycle-Hooks" class="headerlink" title="生命週期裝置實例(Instance Lifecycle Hooks)"></a>生命週期裝置實例(Instance Lifecycle Hooks)</h1><p>到特定的時間就會呼叫特定的函式</p><p>每個Vue實體都會經歷一連串的初始化階段舉例:</p><ol><li>需要設置好data observation</li><li>編譯模板</li><li>把Vue實體推到DOM上</li><li>更新DOM當data被更新</li></ol><p>在這個階段過程中也會跑一些functions被稱為<strong>Lifecycle Hooks</strong>，讓使用者寫自己的程式碼在特定的階段使用</p><h2 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h2><p>當Vue實體已經被創造時，created這個函式可以被使用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// `this` points to the vm instance</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a is: &#x27;</span> + <span class="built_in">this</span>.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; &quot;a is: 1&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/kCZ5wYN.png"></p><p>在不同的階段還有其他的hooks會被呼叫例如:</p><p>所有的hook指向調用它的實體</p><ul><li>mounted</li><li>updated</li><li>destroyed</li></ul><h2 id="作者提醒"><a href="#作者提醒" class="headerlink" title="作者提醒"></a>作者提醒</h2><p>千萬不要使用箭頭函式在Vue實體，因為箭頭函示沒有this常常會導致報錯</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot read property of undefined </span><br><span class="line">Uncaught TypeError: this.myMethod is not a function</span><br></pre></td></tr></table></figure><p>使用一般的函式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            data: &#123;</span><br><span class="line">                a: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>才能印出 Vu實體<br><img src="https://i.imgur.com/utK0icf.png"></p><p>使用箭頭函式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            data: &#123;</span><br><span class="line">                a: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            created: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>只會印出外層的windows<br><img src="https://i.imgur.com/yZu3ut0.png"></p><h2 id="Lifecycle-Diagram"><a href="#Lifecycle-Diagram" class="headerlink" title="Lifecycle Diagram"></a>Lifecycle Diagram</h2><p>從上方那張圖可以得知hook如下:</p><p><strong>beforeCreate</strong><br>Vue實體初始化後立刻呼叫此函式，不過此時Vue實體還未創建所以其中的設定都還未能使用(如data observation, event, watcher setup)</p><p><strong>created</strong><br>Vue實例創建完成後立刻呼叫此函式，已設置 data, computed properties, methods, watch/event callbacks，但尚未開始mounting階段，且 $el 還不能在此階段使用。</p><p><strong>beforeMount</strong><br>在mounting階段開始前被調用：render function首次被調用。</p><p>mounted<br>選項物件中的el被新創建的vm.$el替換，並掛載到到 vm 上，並調用mounted這個鉤子。</p><p>beforeUpdate<br>數據被更新時會調用，發生在 Virtual DOM re-render 和 patch 之前(連結：Day4: Virtual DOM)，可以在此時更改狀態數據，並不會增加重新渲染的成本。</p><p>updated<br>由於數據更新導致 Virtual DOM re-render 和 patch 之後會調用updated這個鉤子。</p><p>不精確白話文為：由於updated被調用時，DOM 已經更新。所以在此時更新數據很可能會導致updated無限循環的被調用。</p><p>beforeDestroy<br>在 Vue Instance 被銷毀前被調用，因此 Vue Instance 在beforeDestroy中仍可運作。</p><p>不精確白話文為：Vue Instance 可以在此時做垂死前的掙扎。</p><p>destroyed<br>在 Vue Instance 被銷毀後被調用，此時 Vue Instance 所有東西會解除綁定，事件監聽也都會被移除，子實例也會被銷毀。</p><h1 id="模板語法-Template-Syntax"><a href="#模板語法-Template-Syntax" class="headerlink" title="模板語法(Template Syntax)"></a>模板語法(Template Syntax)</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-js-文件閱讀-part-2-The-Vue-Instance&quot;&gt;&lt;a href=&quot;#Vue-js-文件閱讀-part-2-The-Vue-Instance&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 文件閱讀 part 2- Th</summary>
      
    
    
    
    <category term="Vue2" scheme="http://example.com/categories/Vue2/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-文件閱讀 part 1- Introduction + Installation(5000字)</title>
    <link href="http://example.com/2021/03/21/Vue.js%20%E6%96%87%E4%BB%B6%E9%96%B1%E8%AE%80%20part%201-%20Introduction%20+%20Installation/"/>
    <id>http://example.com/2021/03/21/Vue.js%20%E6%96%87%E4%BB%B6%E9%96%B1%E8%AE%80%20part%201-%20Introduction%20+%20Installation/</id>
    <published>2021-03-20T17:01:51.967Z</published>
    <updated>2021-03-22T11:19:29.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-文件閱讀-part-1-Introduction-Installation"><a href="#Vue-js-文件閱讀-part-1-Introduction-Installation" class="headerlink" title="Vue.js 文件閱讀 part 1- Introduction + Installation"></a>Vue.js 文件閱讀 part 1- Introduction + Installation</h1><hr><h2 id="tags-Javascript-relate"><a href="#tags-Javascript-relate" class="headerlink" title="tags: Javascript relate"></a>tags: Javascript relate</h2><h6 id="tags-Javascript-Vue-js"><a href="#tags-Javascript-Vue-js" class="headerlink" title="tags: Javascript, Vue.js"></a>tags: <code>Javascript, Vue.js</code></h6><h1 id="簡介-Introduction"><a href="#簡介-Introduction" class="headerlink" title="簡介(Introduction)"></a>簡介(Introduction)</h1><h2 id="Vue-js是什麼"><a href="#Vue-js是什麼" class="headerlink" title="Vue.js是什麼?"></a>Vue.js是什麼?</h2><ul><li>一個用來搭建使用者介面的框架<blockquote><p>框架(Framework)：由包含各種功能與開發規則的函數庫組成。我們可以利用其提供的功能加速開發，不必從零開始；而其開發規則通常是經過驗證的良好開發方法，只要follow它，就可以避免很多問題與錯誤。因此框架通常有著加速開發並易於維護的特性。</p></blockquote></li><li>在MVVM的架構下以視圖(view layer)為核心的網頁介面(Web UI)開發方法</li><li>容易上手並且容易整合進其他的資料庫或是其他的現存的專案</li><li>可以完美的強化單頁應用程式是(SPA)藉著一些<a href="https://vuejs.org/v2/guide/single-file-components.html">現代工具</a>以及<a href="https://github.com/vuejs/awesome-vue#components--libraries">輔助使用的資料庫</a></li></ul><p><a href="https://www.vuemastery.com/courses/intro-to-vue-js/vue-instance/">影片學習 - Intro to Vue 2</a></p><script async src="//jsfiddle.net/chiehLiu/80nLrhmp/embed/"></script><h1 id="安裝使用-Getting-Started"><a href="#安裝使用-Getting-Started" class="headerlink" title="安裝使用(Getting Started)"></a>安裝使用(Getting Started)</h1><blockquote><p>這份官方手冊需要有HTML, CSS, and JavaScript基本知識必較容易讀懂<br>有其他框架使用經驗也有幫助</p></blockquote><h2 id="相容性指示-Compatibility-Note"><a href="#相容性指示-Compatibility-Note" class="headerlink" title="相容性指示(Compatibility Note)"></a>相容性指示(Compatibility Note)</h2><ul><li>Vue不支援IE8甚至更低的版本</li><li>因為Vue使用ECMAScript 5 features但IE8不支援</li></ul><p><img src="https://i.imgur.com/TWcuTRw.png"></p><h2 id="語意化的版本控制"><a href="#語意化的版本控制" class="headerlink" title="語意化的版本控制"></a>語意化的版本控制</h2><p>簡單來說就讓版本名稱具有意義好辨識並且達成共識，避免相容性出現問題</p><p><a href="https://semver.org/lang/zh-TW/">語意化版本</a></p><h2 id="最新版本釋出"><a href="#最新版本釋出" class="headerlink" title="最新版本釋出"></a>最新版本釋出</h2><p><a href="https://github.com/vuejs/vue/releases">最新版本 Github</a></p><h2 id="Vue-開發工具-Vue-Devtools"><a href="#Vue-開發工具-Vue-Devtools" class="headerlink" title="Vue 開發工具(Vue Devtools)"></a>Vue 開發工具(Vue Devtools)</h2><p>相當推薦使用在一個使用者友善介面下，可以更好的檢視你的作品以及幫忙debug</p><p><a href="https://github.com/vuejs/vue-devtools#vue-devtools">Vue Devtools Github</a></p><h2 id="使用-lt-script-gt-引入使用Vue"><a href="#使用-lt-script-gt-引入使用Vue" class="headerlink" title="使用&lt;script&gt;引入使用Vue"></a>使用<code>&lt;script&gt;</code>引入使用Vue</h2><p>建議開發的時候引入Development Version才不會省略掉一些常見的錯誤訊息</p><p><img src="https://i.imgur.com/Wsi9NjJ.png"></p><h2 id="內容傳遞網路-CDN-Content-delivery-network"><a href="#內容傳遞網路-CDN-Content-delivery-network" class="headerlink" title="內容傳遞網路 (CDN - Content delivery network)"></a>內容傳遞網路 (CDN - Content delivery network)</h2><p>作為原型或是學習使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.12&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>要用在產品身上則推薦使用特定的版本，因為最新版本可能尚未完善</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.12&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>使用原生ES Module相容的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;module&quot;&gt;</span><br><span class="line">  import Vue from &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.12&#x2F;dist&#x2F;vue.esm.browser.js&#39;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>可以從此處瀏覽原始碼</p><p><a href="https://cdn.jsdelivr.net/npm/vue/">NPM package 原始碼</a></p><p><a href="https://unpkg.com/vue@2.6.12/dist/vue.js">unpkg</a></p><p><a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.js">cdnjs (最新版本有可能會比較慢登上這邊)</a></p><h3 id="小提醒"><a href="#小提醒" class="headerlink" title="小提醒"></a>小提醒</h3><p>在你要發布的網站上面可以使用<code>vue.min.js</code>取代<code>vue.j</code>可以優化檔案大小以及執行速度</p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>當要使用在大型規模的app時推薦使用NPM，因為可以跟<a href="https://webpack.js.org/">Webpack</a> or <a href="http://browserify.org/">Browserify</a>相容的很好，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># latest stable</span><br><span class="line">$ npm install vue</span><br></pre></td></tr></table></figure><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><p>使用官方CLI需要一些node.js的相關知識</p><p><a href="https://cli.vuejs.org/">Vue CLI 官網</a></p><p><a href="https://www.vuemastery.com/courses/real-world-vue-js/vue-cli/">CLI 影片教學</a></p><h2 id="Explanation-of-Different-Builds"><a href="#Explanation-of-Different-Builds" class="headerlink" title="Explanation of Different Builds"></a>Explanation of Different Builds</h2><p>在<a href="https://cdn.jsdelivr.net/npm/vue/">NPM package 原始碼</a> dist/處有很多不同的builds下方是他們的不同之處:</p><table><thead><tr><th></th><th>UMD</th><th>CommonJS</th><th>ES Module (for bundlers)</th><th>ES Module (for browsers)</th></tr></thead><tbody><tr><td><strong>Full</strong></td><td>vue.js</td><td>vue.common.js</td><td>vue.esm.js</td><td>vue.esm.browser.js</td></tr><tr><td><strong>Runtime-only</strong></td><td>vue.runtime.js</td><td>vue.runtime.common.js</td><td>vue.runtime.esm.js</td><td>-</td></tr><tr><td><strong>Full (production)</strong></td><td>vue.min.js</td><td>-</td><td>-</td><td>vue.esm.browser.min.js</td></tr><tr><td><strong>Runtime-only (production)</strong></td><td>vue.runtime.min.js</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><h3 id="名詞解釋-Term"><a href="#名詞解釋-Term" class="headerlink" title="名詞解釋(Term)"></a>名詞解釋(Term)</h3><ul><li><p>Full: 包含Compiler, Runtime</p></li><li><p>Compiler: 負責編譯模板字版進去JS呈現相關的函式</p></li><li><p>Runtime: 負責Vue instances, 呈現以及修補 virtual DOM(基本上處理Compiler以下的事情)</p></li><li><p>UMD: UMD相關的builds可以直接使用在瀏覽器下藉著<code>&lt;script&gt;</code>tag<br>UMD (Universal Module Definition)，就是一種javascript通用模塊定義規範，讓你的模塊能在javascript所有運行環境中發揮作用。</p></li><li><p>CommonJS: 給browserify or webpack使用</p></li><li><p>ES Module: </p></li></ul><p>2.6Vue版本後才開始提供下面兩種builds</p><ol><li>ESM for bundlers: 給webpack 2 or Rollup使用</li><li>ESM for browsers (2.6+ only): 直接引入現代的瀏覽器使用<code>&lt;script type=&quot;module&quot;&gt;</code></li></ol><h1 id="宣告式渲染-Declarative-Rendering"><a href="#宣告式渲染-Declarative-Rendering" class="headerlink" title="宣告式渲染(Declarative Rendering)"></a>宣告式渲染(Declarative Rendering)</h1><blockquote><p>Vue.js的核心藉著好理解的模板語法讓使用者把資料呈現到DOM上面</p></blockquote><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">// 抓取哪邊的DOM</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Hello Vue!&#x27;</span> <span class="comment">// 此處是要呈現的內容</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出 Hello Vue!</span></span><br><span class="line"></span><br><span class="line">app.message = <span class="string">&#x27;I have changed the data!&#x27;</span></span><br><span class="line"><span class="comment">// 輸出 I have changed the data</span></span><br></pre></td></tr></table></figure><p><a href="https://scrimba.com/scrim/cQ3QVcr?pl=pXKqta">影片說明Hello Vue!</a></p><ul><li>資料以及DOM已經做了連結並且是隨時反應的<br>ex. app.message修改內容後輸出內容也會即時更改</li><li>不需要再跟HTML互動，直接在Vue instance就可以操作DOM</li></ul><h2 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h2><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-2&quot;&gt;</span><br><span class="line">  &lt;span v-bind:title&#x3D;&quot;message&quot;&gt;</span><br><span class="line">    Hover your mouse over me for a few seconds</span><br><span class="line">    to see my dynamically bound title!</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-2&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;You loaded this page on &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ItiTipU.gif"></p><p>當hover的時候在當前的string會顯示 字串+載入日期時間</p><ul><li><code>v-bind</code></li></ul><p>這個有v前墜屬性被稱做指示(directive)，是Vue提供使用的，而這個v-bind的用法在於讓這個title的屬性隨著message屬性作同步修在Vue instance上面</p><p>所以當我使用下面的方法時，title的屬性也會及時更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app2.message = <span class="string">&#x27;some new message&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="條件式以及迴圈-Conditionals-and-Loops"><a href="#條件式以及迴圈-Conditionals-and-Loops" class="headerlink" title="條件式以及迴圈(Conditionals and Loops)"></a>條件式以及迴圈(Conditionals and Loops)</h1><h2 id="條件式"><a href="#條件式" class="headerlink" title="條件式"></a>條件式</h2><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-3&quot;&gt;</span><br><span class="line">  &lt;span v-if&#x3D;&quot;seen&quot;&gt;Now you see me&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-3&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    seen: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>v-if</code></li></ul><p>可以理解成 v-if後方的文字必須為true(然而是否為true則要去看js程式碼如何操作)，才會讓span內的文字被看見</p><p><img src="https://i.imgur.com/SjH0Sk5.png">   </p><p>因此當判斷式內容改成flase時，就看不見文字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app-<span class="number">3.</span>seen = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h2><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-4&quot;&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;todo in todos&quot;&gt;</span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ol&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app4 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-4&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Build something awesome&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>v-for</code></li></ul><p>可以用來製作清單類型的呈現</p><p><img src="https://i.imgur.com/AimG2bx.png"></p><p>如果想要再加入新的清單可以這樣做</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app4.todos.push(&#123; <span class="attr">text</span>: <span class="string">&#x27;New item&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h1 id="處理使用者的輸入-Handling-User-Input"><a href="#處理使用者的輸入-Handling-User-Input" class="headerlink" title="處理使用者的輸入(Handling User Input)"></a>處理使用者的輸入(Handling User Input)</h1><h2 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h2><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;reverseMessage&quot;&gt;Reverse Message&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reverseMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message = <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>v-on:click</code></li></ul><p>跟使用者互動藉由v-on 指示來連接事件監聽click並觸發函式來處理</p><p>點擊按鈕後把文字順序反過來</p><p><img src="https://i.imgur.com/ETYNgvk.png"></p><p><img src="https://i.imgur.com/pEqBa79.png"></p><h1 id="建構組件-Composing-with-Components"><a href="#建構組件-Composing-with-Components" class="headerlink" title="建構組件(Composing with Components)"></a>建構組件(Composing with Components)</h1><p>為了建構大型專案藉著拆分成不同的小組件的優點</p><ul><li>可重複利用</li><li>是獨立的組件</li><li>容量小</li></ul><p><img src="https://i.imgur.com/tbekM4J.png"></p><h2 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h2><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義一個新的組件 todo-item</span></span><br><span class="line">Vue.component(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;li&gt;This is a todo&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(...)</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;todo-item&gt;&lt;&#x2F;todo-item&gt;</span><br><span class="line">        &lt;todo-item&gt;&lt;&#x2F;todo-item&gt;</span><br><span class="line">    &lt;&#x2F;ol&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>首先在js先撰寫組件todo-item後就可以在html裡面直接使用</p><h2 id="範例二-1"><a href="#範例二-1" class="headerlink" title="範例二"></a>範例二</h2><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;todo&#x27;</span>],</span><br><span class="line">  template: <span class="string">&#x27;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app7 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-7&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    groceryList: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">&#x27;Vegetables&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;Cheese&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;Whatever else humans are supposed to eat&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-7&quot;&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;todo-item</span><br><span class="line">      v-for&#x3D;&quot;item in groceryList&quot;</span><br><span class="line">      v-bind:todo&#x3D;&quot;item&quot;</span><br><span class="line">      v-bind:key&#x3D;&quot;item.id&quot;</span><br><span class="line">    &gt;&lt;&#x2F;todo-item&gt;</span><br><span class="line">  &lt;&#x2F;ol&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ul><li>首先於component處新增<code>porp</code>是一個可以客製化的屬性並命名todo</li><li>介下來使用<code>v-bind</code>讓文字可以被動態的傳入DOM同時傳入key的部分會在後面章節作解釋</li><li>並且使用<code>v-for</code>製作清單列表</li></ul><p><img src="https://i.imgur.com/OmEZP4f.png"></p><hr><p>在大型專案中把內部的app做拆分是必要的，讓開發過程容易管理，下面程式碼是個範例說明比較多組件且複雜的html長相</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;app-nav&gt;&lt;&#x2F;app-nav&gt;</span><br><span class="line">  &lt;app-view&gt;</span><br><span class="line">    &lt;app-sidebar&gt;&lt;&#x2F;app-sidebar&gt;</span><br><span class="line">    &lt;app-content&gt;&lt;&#x2F;app-content&gt;</span><br><span class="line">  &lt;&#x2F;app-view&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h1 id="與自定義元素的關係-Relation-to-Custom-Elements"><a href="#與自定義元素的關係-Relation-to-Custom-Elements" class="headerlink" title="與自定義元素的關係(Relation to Custom Elements)"></a>與自定義元素的關係(Relation to Custom Elements)</h1><ul><li><p>Vue的組件非常類似於<a href="https://developers.google.com/web/fundamentals/web-components">Custom Elements</a></p></li><li><p>舉例說明<br>Vue組件執行<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/slot">Slot API</a> 以及 <a href="https://v3.vuejs.org/api/special-attributes.html#is">is</a> 特殊屬性</p></li></ul><blockquote><p>Slot是存在web component内部的占位符，用户可以通過slot屬性在web component的内部插入自定義的標記文本。</p></blockquote><ul><li>不同之處</li></ul><ol><li>Web Components規範已經完成通過但是依舊沒有被所有瀏覽器支援<br>(目前 Safari 10.1+、Chrome 54+ 和 Firefox 63+ 原生支持 Web Components)</li><li>Vue 组件不需要任何 polyfill，並且支援所有瀏覽器 (IE9以下不支援)，必要時Vue组件也可以包裝於原生自定義元素之内</li></ol><blockquote><p>polyfill代指為舊瀏覽器實現或模擬現有版本已實現之功能的程式碼片段</p></blockquote><ol start="3"><li>Vue 组件提供了Custom Elements沒有的功能，跨组件數據流、自定義事件溝通以及bulid整合工具。</li></ol><ul><li>Vue 並沒有使用Custom Elements，不過在應用以及發布Custom Elements上還是有很好的<a href="https://custom-elements-everywhere.com/#vue">互通性</a>，Vue CLI 也支持 Vue 组件建構成為原生的Custom Elements</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-js-文件閱讀-part-1-Introduction-Installation&quot;&gt;&lt;a href=&quot;#Vue-js-文件閱讀-part-1-Introduction-Installation&quot; class=&quot;headerlink&quot; title=&quot;Vue.</summary>
      
    
    
    
    <category term="Vue2" scheme="http://example.com/categories/Vue2/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JS-語言基礎 06 陣列介紹</title>
    <link href="http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2006%20%E9%99%A3%E5%88%97%E4%BB%8B%E7%B4%B9/"/>
    <id>http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2006%20%E9%99%A3%E5%88%97%E4%BB%8B%E7%B4%B9/</id>
    <published>2021-03-20T16:39:04.079Z</published>
    <updated>2021-03-21T18:22:42.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-語言基礎-06-陣列介紹"><a href="#JS-語言基礎-06-陣列介紹" class="headerlink" title="JS 語言基礎 06 陣列介紹"></a>JS 語言基礎 06 陣列介紹</h2><p>陣列是一種資料結構(Array)</p><ul><li>物件是鍵值對(key-value pairs)</li><li>陣列是依照索引排序(index)的資料結構</li><li>不推薦陣列的內容字串跟數字混用不然會比較不好操作</li></ul><p>通常長這樣:<br><img src="https://i.imgur.com/s76qbA0.png"></p><p>索引的部分(index):</p><p>0,1,2的部分</p><p><img src="https://i.imgur.com/RCsgGVv.png"></p><p>擷取其值[]:</p><p><img src="https://i.imgur.com/2AJBh4f.png"></p><p>取陣列的長度大小 length:</p><p><img src="https://i.imgur.com/OTqScAn.png"></p><h3 id="陣列基本操作-pop-與-push"><a href="#陣列基本操作-pop-與-push" class="headerlink" title="陣列基本操作 pop 與 push"></a>陣列基本操作 pop 與 push</h3><p>pop 把最後一個元素去掉</p><p><img src="https://i.imgur.com/mK8tWm5.png"></p><p>push 把一個值加到最後</p><p><img src="https://i.imgur.com/ik9vRMy.png"></p><h3 id="陣列基本操作-替換元素-與-取得最後一個元素"><a href="#陣列基本操作-替換元素-與-取得最後一個元素" class="headerlink" title="陣列基本操作 替換元素 與 取得最後一個元素"></a>陣列基本操作 替換元素 與 取得最後一個元素</h3><p>替換元素:</p><p>帶入index後直接輸入要替換的值</p><p><img src="https://i.imgur.com/M6EV9jy.png"></p><p>取得最後一個元素的值:</p><p>使用length取得陣列長度後減一就是最後一個值的index搂</p><p><img src="https://i.imgur.com/8SDCdzk.png"></p><h3 id="陣列操作-indexOf-取得元素的索引"><a href="#陣列操作-indexOf-取得元素的索引" class="headerlink" title="陣列操作 indexOf 取得元素的索引"></a>陣列操作 indexOf 取得元素的索引</h3><p>很直接使用(.indexOf)</p><p><img src="https://i.imgur.com/axNFBsm.png"></p><h3 id="陣列的基本操作-切片slice-與-方法這麼多到底要怎麼記"><a href="#陣列的基本操作-切片slice-與-方法這麼多到底要怎麼記" class="headerlink" title="陣列的基本操作 切片slice 與 方法這麼多到底要怎麼記"></a>陣列的基本操作 切片slice 與 方法這麼多到底要怎麼記</h3><p>切片slice</p><p><code>陣列.slice(起始點,終點)</code></p><p>切出來的值會包含起始點不包含終點</p><p><img src="https://i.imgur.com/4AlzU5O.png"></p><p><img src="https://i.imgur.com/2xclorT.png"></p><p>方法不死背 多巡查詢使用</p><h2 id="JS-語言基礎-06-陣列的進階方法"><a href="#JS-語言基礎-06-陣列的進階方法" class="headerlink" title="JS 語言基礎 06 陣列的進階方法"></a>JS 語言基礎 06 陣列的進階方法</h2><h3 id="6-1-用-map-方法來把陣列中的資料，改成你想要的樣子"><a href="#6-1-用-map-方法來把陣列中的資料，改成你想要的樣子" class="headerlink" title="6.1 用 map() 方法來把陣列中的資料，改成你想要的樣子"></a>6.1 用 map() 方法來把陣列中的資料，改成你想要的樣子</h3><p><code>Array.prototype.map()</code></p><p>這邊的意思是每個陣列都會有這方map()方法<br>他可以針對陣列中的內容做操作並且產生一個新的陣列</p><ul><li>做數字運算</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</span><br><span class="line"><span class="keyword">const</span> result2 = a1.map(<span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * a</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result2); <span class="comment">//</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/7K17cLP.png"></p><ul><li>做字串串接</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dogs = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> result = dogs.map(<span class="function">(<span class="params">dog</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> dog + <span class="string">&quot;dog is fury&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/rGJrID4.png"></p><h3 id="6-2-如何使用-for-迴圈實作-map"><a href="#6-2-如何使用-for-迴圈實作-map" class="headerlink" title="6.2 如何使用 for 迴圈實作 map()"></a>6.2 如何使用 for 迴圈實作 map()</h3><p>比較複雜一些需要用到比較多邏輯的部分不像map簡潔，但可以得到一樣的結果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dogs = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDemo</span>(<span class="params">dogs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dogs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = dogs[i] + <span class="string">&quot;dog is fury&quot;</span>;</span><br><span class="line">        result.push(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>並且作呼叫印出的結果會跟使用map一樣<br><img src="https://i.imgur.com/4Rhsfzg.png"></p><h3 id="6-3-用-forEach-讓陣列中的元素一個一個出來面對"><a href="#6-3-用-forEach-讓陣列中的元素一個一個出來面對" class="headerlink" title="6.3 用 forEach() 讓陣列中的元素一個一個出來面對"></a>6.3 用 forEach() 讓陣列中的元素一個一個出來面對</h3><p>逐個印出值並且無法做出return</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> forEachResult = a1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(el);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/G9oDqoS.png"></p><h4 id="跟map做比較"><a href="#跟map做比較" class="headerlink" title="跟map做比較"></a>跟map做比較</h4><p>map會返回值可以做return<br>forEach不會返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> forEachResult = a1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> el + <span class="string">&quot;is good&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mapResult = a1.map(<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> el + <span class="string">&quot;is good&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/nTE6jns.png"></p><h4 id="用for來寫forEach"><a href="#用for來寫forEach" class="headerlink" title="用for來寫forEach"></a>用for來寫forEach</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a1.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a1[i] + <span class="string">&quot;is good&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一樣可以印出結果<br><img src="https://i.imgur.com/ufvZ70H.png"></p><h3 id="6-4-使用-filter-找出陣列中符合條件的元素-element"><a href="#6-4-使用-filter-找出陣列中符合條件的元素-element" class="headerlink" title="6.4 使用 filter() 找出陣列中符合條件的元素(element)"></a>6.4 使用 filter() 找出陣列中符合條件的元素(element)</h3><p>使用條件做篩選並把選中的內容放進新的陣列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">as</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">newa = <span class="keyword">as</span>.filter(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/wVu73h2.png"></p><h4 id="用物件做操作"><a href="#用物件做操作" class="headerlink" title="用物件做操作"></a>用物件做操作</h4><p>篩選出大於25歲小於123歲的物件排進新的陣列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bs = [&#123;</span><br><span class="line">        name: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">        age: <span class="number">36</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;hoe&#x27;</span>,</span><br><span class="line">        age: <span class="number">123</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;dif&#x27;</span>,</span><br><span class="line">        age: <span class="number">43</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;aer&#x27;</span>,</span><br><span class="line">        age: <span class="number">25</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">newa = bs.filter(<span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b.age &gt; <span class="number">25</span> &amp;&amp; b.age &lt; <span class="number">123</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/3UNrsks.png"></p><h3 id="6-5-Array-陣列的-find-方法，找到第一筆符合條件的資料"><a href="#6-5-Array-陣列的-find-方法，找到第一筆符合條件的資料" class="headerlink" title="6.5 Array 陣列的 find() 方法，找到第一筆符合條件的資料"></a>6.5 Array 陣列的 find() 方法，找到第一筆符合條件的資料</h3><ul><li>Array 陣列的find()方法，找到第一筆符合條件的資料只印出一個找到的值</li><li>filter()方法則是過濾符合的條件(每一筆)並組成新陣列</li></ul><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">55</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">2345</span>, <span class="number">55</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> find = a1.find(<span class="function">(<span class="params">found</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> found === <span class="number">12</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(find);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/y9gnABv.png"></p><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">55</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">2345</span>, <span class="number">55</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> find = a1.filter(<span class="function">(<span class="params">found</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> found === <span class="number">12</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(find);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/uxgc2CL.png"></p><h3 id="6-6-為什麼查詢-Array-的方法時，需要找的是-Array-prototype-的方法"><a href="#6-6-為什麼查詢-Array-的方法時，需要找的是-Array-prototype-的方法" class="headerlink" title="6.6 為什麼查詢 Array 的方法時，需要找的是 Array.prototype 的方法"></a>6.6 為什麼查詢 Array 的方法時，需要找的是 Array.prototype 的方法</h3><p>由下圖可以理解，在prototype後面加入的屬性是可以真的使用的</p><p><img src="https://i.imgur.com/ukGal9q.png"></p><h3 id="6-7-用-reduce-加總陣列結果"><a href="#6-7-用-reduce-加總陣列結果" class="headerlink" title="6.7 用 reduce() 加總陣列結果"></a>6.7 用 reduce() 加總陣列結果</h3><p>可以使用forEach達到一樣的效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">num.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result += n</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = num.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">result, current</span>) </span>&#123;</span><br><span class="line">    result += current;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/NVlaXr3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-語言基礎-06-陣列介紹&quot;&gt;&lt;a href=&quot;#JS-語言基礎-06-陣列介紹&quot; class=&quot;headerlink&quot; title=&quot;JS 語言基礎 06 陣列介紹&quot;&gt;&lt;/a&gt;JS 語言基礎 06 陣列介紹&lt;/h2&gt;&lt;p&gt;陣列是一種資料結構(Array)&lt;/</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-語言基礎 07 瀏覽器中的JS</title>
    <link href="http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2007%20%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B8%AD%E7%9A%84JS/"/>
    <id>http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2007%20%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B8%AD%E7%9A%84JS/</id>
    <published>2021-03-20T16:39:04.079Z</published>
    <updated>2021-03-21T18:22:46.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-語言基礎-07-瀏覽器中的JS"><a href="#JS-語言基礎-07-瀏覽器中的JS" class="headerlink" title="JS 語言基礎 07 瀏覽器中的JS"></a>JS 語言基礎 07 瀏覽器中的JS</h2><h3 id="DOM-與樹狀結構"><a href="#DOM-與樹狀結構" class="headerlink" title="DOM 與樹狀結構"></a>DOM 與樹狀結構</h3><p>甚麼是DOM</p><ul><li>Document Object Model 文件物件模型</li><li>HTML的格式須遵守W3C的規範</li><li>而遵守W3C的HTML檔案可以被解成城DOM樹(Tree)</li></ul><p>解釋DOM樹(Tree)<br><img src="https://i.imgur.com/UTb1iPm.png"></p><p>文件物件模型的意義:<br><img src="https://i.imgur.com/9QAkMzK.png"></p><h3 id="在瀏覽器觀察-DOM-Tree-與-document-物件"><a href="#在瀏覽器觀察-DOM-Tree-與-document-物件" class="headerlink" title="在瀏覽器觀察 DOM Tree 與 document 物件"></a>在瀏覽器觀察 DOM Tree 與 document 物件</h3><p>在開發者瀏覽器打上document後:</p><p>會顯現出上方文件物件模型的意義</p><p><img src="https://i.imgur.com/9QAkMzK.png"></p><p><img src="https://i.imgur.com/99I45nJ.png"></p><h3 id="什麼是-API"><a href="#什麼是-API" class="headerlink" title="什麼是 API"></a>什麼是 API</h3><ul><li>Application Programming Interface</li><li>應用程式 編程 介面</li><li>透過寫程式來跟網頁上的功能(像是email google MAP搜尋等等)溝通</li></ul><h3 id="瀏覽-document-物件-API-文件"><a href="#瀏覽-document-物件-API-文件" class="headerlink" title="瀏覽 document 物件 API 文件"></a>瀏覽 document 物件 API 文件</h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/document">document Web API</a></p><p><a href="https://www.w3schools.com/js/js_api_intro.asp">W3Cschool Web API</a></p><h3 id="BOM-與-window-物件"><a href="#BOM-與-window-物件" class="headerlink" title="BOM 與 window 物件"></a>BOM 與 window 物件</h3><ul><li>Browser Object Model 瀏覽器物件模型</li><li>就是 window 物件 就是整個瀏覽器所以其實不用打出來也可以有效果</li></ul><p><img src="https://i.imgur.com/6dViT6V.png"></p><p><img src="https://i.imgur.com/i6LTlLd.png"></p><h4 id="Location"><a href="#Location" class="headerlink" title="Location:"></a>Location:</h4><p><img src="https://i.imgur.com/3rsiA8V.png"></p><h4 id="History-back-go"><a href="#History-back-go" class="headerlink" title="History back() , go()"></a>History back() , go()</h4><p>back()</p><p>可以直接回到上一頁</p><p>go()必須加數字在參數的地方</p><p>可以去下一頁</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-語言基礎-07-瀏覽器中的JS&quot;&gt;&lt;a href=&quot;#JS-語言基礎-07-瀏覽器中的JS&quot; class=&quot;headerlink&quot; title=&quot;JS 語言基礎 07 瀏覽器中的JS&quot;&gt;&lt;/a&gt;JS 語言基礎 07 瀏覽器中的JS&lt;/h2&gt;&lt;h3 id=&quot;D</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-語言基礎 08 ES6</title>
    <link href="http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2008%20ES6/"/>
    <id>http://example.com/2021/03/21/JS-JS%20%E8%AA%9E%E8%A8%80%E5%9F%BA%E7%A4%8E%2008%20ES6/</id>
    <published>2021-03-20T16:39:04.079Z</published>
    <updated>2021-03-21T18:22:50.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-語言基礎-08-ES6"><a href="#JS-語言基礎-08-ES6" class="headerlink" title="JS 語言基礎 08 ES6"></a>JS 語言基礎 08 ES6</h2><h3 id="01-let-與-const-作用域改變成大括號會怎麼樣"><a href="#01-let-與-const-作用域改變成大括號會怎麼樣" class="headerlink" title="01 let 與 const 作用域改變成大括號會怎麼樣"></a>01 let 與 const 作用域改變成大括號會怎麼樣</h3><p>let與const 對比舊時代的var</p><p>1.作用域的改變</p><ul><li>var=&gt; function</li><li>let,const =&gt;{}</li></ul><h4 id="Example1"><a href="#Example1" class="headerlink" title="Example1:"></a>Example1:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`迴圈跑第<span class="subst">$&#123;i&#125;</span>次`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><p>很明顯的地方是外面的var i = 0被裡面的迴圈汙染到所以傳回來的結果是10<br><img src="https://i.imgur.com/wexESY7.png"></p><p>所以改成let做操作時因為其作用域是{}因此沒有汙染到外面來</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`迴圈跑第<span class="subst">$&#123;i&#125;</span>次`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/za2DaSb.png"></p><h4 id="Example2"><a href="#Example2" class="headerlink" title="Example2:"></a>Example2:</h4><p>用在判斷式上面更明顯使用var來操作的話這邊的結果是會直接跑進判斷式中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><p>印出結果為5<br><img src="https://i.imgur.com/ocAUxF2.png"></p><p>全面改成使用let</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><p>印出結果就沒有被汙染瞜</p><p><img src="https://i.imgur.com/BCKG9mX.png"></p><h4 id="Example3"><a href="#Example3" class="headerlink" title="Example3:"></a>Example3:</h4><p>使用大括號的效果跟IFEE一樣</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IIFE立即函式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="keyword">let</span> x =<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="支援度"><a href="#支援度" class="headerlink" title="支援度"></a>支援度</h4><ul><li>chrome已經全面支援使用</li><li>但是IE部分還沒，所以舊的寫法還是需要了解</li><li>使用babel 做編譯 ES6 =&gt;ES5</li></ul><h3 id="02-const-常數與注意事項"><a href="#02-const-常數與注意事項" class="headerlink" title="02 const 常數與注意事項"></a>02 const 常數與注意事項</h3><p>const 定義了之後不可以改變的變數</p><p><img src="https://i.imgur.com/V3Z9eDz.png"></p><h4 id="重要例外"><a href="#重要例外" class="headerlink" title="重要例外"></a>重要例外</h4><p>當常數定義物件的時候裡面的值是可以改變的並不會報錯</p><p><img src="https://i.imgur.com/PkrU1Ti.png"></p><p>但是如果你在複寫一次物件就會出問題摟!<br><img src="https://i.imgur.com/B4TwpLl.png"></p><h3 id="03-解構賦值陣列與物件為什麼可以這樣寫"><a href="#03-解構賦值陣列與物件為什麼可以這樣寫" class="headerlink" title="03 解構賦值陣列與物件為什麼可以這樣寫"></a>03 解構賦值陣列與物件為什麼可以這樣寫</h3><h4 id="陣列的解構賦值"><a href="#陣列的解構賦值" class="headerlink" title="陣列的解構賦值"></a>陣列的解構賦值</h4><p><img src="https://i.imgur.com/gKme5TF.png"></p><p>解構賦值的其中一種用法:讓賦值變簡潔<br><img src="https://i.imgur.com/FdPG2N1.png"></p><h4 id="物件的的解構賦值"><a href="#物件的的解構賦值" class="headerlink" title="物件的的解構賦值"></a>物件的的解構賦值</h4><p>前面let的部分其實是縮寫</p><p><code>let&#123;a:a,b:a&#125;</code>是原本的樣子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a,b&#125; = &#123;<span class="attr">a</span>: <span class="number">111</span>,<span class="attr">b</span>: <span class="number">222</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a:&quot;</span> + a, <span class="string">&quot;b:&quot;</span> + b);</span><br></pre></td></tr></table></figure><h3 id="04-for-in-for-of-的區別"><a href="#04-for-in-for-of-的區別" class="headerlink" title="04 for in, for of 的區別"></a>04 for in, for of 的區別</h3><h4 id="for-of-用來迭代可以迭代的物件"><a href="#for-of-用來迭代可以迭代的物件" class="headerlink" title="for of 用來迭代可以迭代的物件"></a>for of 用來迭代可以迭代的物件</h4><blockquote><p>可以迭代的對象包含:<br>Array，Map，Set，String，TypedArray，arguments</p></blockquote><p><img src="https://i.imgur.com/A1qG3Jv.png"></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of">for of -MDN</a></p><h4 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h4><blockquote><p>迭代可以列舉的屬性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_props</span>(<span class="params">obj, objName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        result += objName + <span class="string">&quot;.&quot;</span> + prop + <span class="string">&quot; = &quot;</span> + obj[prop] + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前方的參數是要引入的object 後方是物件的名字</span></span><br><span class="line">alert(show_props(object, <span class="string">&quot;物件&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/2jQmrqW.png"></p><h3 id="05-Iterator-迭代器是什麼-如何使用"><a href="#05-Iterator-迭代器是什麼-如何使用" class="headerlink" title="05 Iterator 迭代器是什麼? 如何使用"></a>05 Iterator 迭代器是什麼? 如何使用</h3><h4 id="可迭代協議（iterable-protocol）"><a href="#可迭代協議（iterable-protocol）" class="headerlink" title="可迭代協議（iterable protocol）"></a>可迭代協議（iterable protocol）</h4><p>一個物件如果要被迭代他必須有這個屬性<code>[Symbol.iterator]</code></p><p>而當這個物件需要被迭代的時候這個屬性的不需要引入參數的函式(下方圖片)就會被呼叫來獲得被迭代的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myStings = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line">myStings[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myStings[<span class="built_in">Symbol</span>.iterator]());</span><br></pre></td></tr></table></figure><p>String Iterator<br><img src="https://i.imgur.com/Ofzt0LW.png"></p><h4 id="迭代器協議（iterator-protocol）"><a href="#迭代器協議（iterator-protocol）" class="headerlink" title="迭代器協議（iterator protocol）"></a>迭代器協議（iterator protocol）</h4><p>迭代器協議定義了一個標準的方式來產生迭代的有限或是無限的值並且都會回傳一個值，而next()就是一個迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myStings = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = myStings[<span class="built_in">Symbol</span>.iterator]();</span><br></pre></td></tr></table></figure><p>之後在chrome呼叫方法next()就可以迭代出字串摟</p><p><img src="https://i.imgur.com/7gelfsm.png"></p><h4 id="迭代array"><a href="#迭代array" class="headerlink" title="迭代array"></a>迭代array</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrayIterator = myArray[<span class="built_in">Symbol</span>.iterator]();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/x24qipJ.png"></p><h3 id="06-for-of-的使用方法"><a href="#06-for-of-的使用方法" class="headerlink" title="06 for of 的使用方法"></a>06 for of 的使用方法</h3><p>從上面解釋過迭代的原理後下方這邊的用法就清楚多了</p><h4 id="for-of-字串的迭代"><a href="#for-of-字串的迭代" class="headerlink" title="for of:字串的迭代"></a>for of:字串的迭代</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myStings = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> myStings) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/JhVcBmq.png"></p><h4 id="for-of-陣列的迭代"><a href="#for-of-陣列的迭代" class="headerlink" title="for of 陣列的迭代"></a>for of 陣列的迭代</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/zm9dNdj.png"></p><h3 id="07-樣板字面值Template-Iterator與字串字面值String-Iterator"><a href="#07-樣板字面值Template-Iterator與字串字面值String-Iterator" class="headerlink" title="07 樣板字面值Template Iterator與字串字面值String Iterator"></a>07 樣板字面值Template Iterator與字串字面值String Iterator</h3><ul><li>使用的符號不一樣使用(``)來包裹住文字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`123`</span>;</span><br></pre></td></tr></table></figure><ul><li>斷行</li></ul><p>Template Iterator可以直接空格下去不需要使用跳脫字元\n</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123 \n 123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`123</span></span><br><span class="line"><span class="string">123`</span>;</span><br></pre></td></tr></table></figure><ul><li>嵌入變數</li></ul><p>可以直接在字串串接中放入變數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;john&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><p>ES5的寫法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;john&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&quot;my name is &quot;</span> + name;</span><br></pre></td></tr></table></figure><h3 id="08-展開運算子-Spread-Operator"><a href="#08-展開運算子-Spread-Operator" class="headerlink" title="08 展開運算子 Spread Operator"></a>08 展開運算子 Spread Operator</h3><h4 id="印出其值"><a href="#印出其值" class="headerlink" title="印出其值"></a>印出其值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(...arr1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/zaP2dyN.png"></p><p>例子</p><p>數學方法Math.min()取最小值參數不能放入陣列這個時候就可以使用展開運算子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(arr1));</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/QRqoJvl.png"></p><p>這樣就可以正常使用搂!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(...arr1)); <span class="comment">// 印出最小值為 1 </span></span><br></pre></td></tr></table></figure><h4 id="陣列串接"><a href="#陣列串接" class="headerlink" title="陣列串接"></a>陣列串接</h4><p>把內容物有重疊的兩個陣列構成新的陣列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2];</span><br></pre></td></tr></table></figure><p>這樣的寫法會等於<code>arr1.concat(arr2)</code></p><p><img src="https://i.imgur.com/TPTXpLY.png"></p><h4 id="物件的串接"><a href="#物件的串接" class="headerlink" title="物件的串接"></a>物件的串接</h4><p>把內容物有重疊的屬性直接用o2取代掉，後方的新屬性會取代掉舊的屬性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123; <span class="attr">c</span>: <span class="number">100</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o3 = &#123; ...o1, ...o2 &#125;;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/4UgB52N.png"></p><h3 id="09-箭頭函式-1"><a href="#09-箭頭函式-1" class="headerlink" title="09 箭頭函式(1)"></a>09 箭頭函式(1)</h3><p>怎麼樣寫會有回傳值, 怎麼樣寫不會有回傳值</p><p>有回傳值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> function1 = <span class="function"><span class="params">x</span> =&gt;</span> x+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>無回傳值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> function1 = <span class="function"><span class="params">x</span> =&gt;</span> &#123;x+<span class="number">1</span>&#125; </span><br></pre></td></tr></table></figure><h3 id="箭頭函式-2"><a href="#箭頭函式-2" class="headerlink" title="箭頭函式(2)"></a>箭頭函式(2)</h3><p>call 與 this</p><p>這邊this的指向是window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reply = <span class="string">`Hi, <span class="subst">$&#123;<span class="built_in">this</span>.person&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">greet();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/PeZfz24.png"></p><p>如果我們想要改變this的指向可以使用<code>call()</code>這個方法讓this去呼叫到obj裡面的屬性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reply = <span class="string">`Hi, <span class="subst">$&#123;<span class="built_in">this</span>.person&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(reply);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">person</span>: <span class="string">&quot;BIll&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">greet.call(obj);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/UWNoqdP.png"></p><h3 id="箭頭函式-3"><a href="#箭頭函式-3" class="headerlink" title="箭頭函式(3)"></a>箭頭函式(3)</h3><p>this 綁定的對象不再是function本身</p><h4 id="使用ES5的函式寫法"><a href="#使用ES5的函式寫法" class="headerlink" title="使用ES5的函式寫法"></a>使用ES5的函式寫法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">person</span>: <span class="string">&quot;BIll&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reply = <span class="string">`Hi, <span class="subst">$&#123;<span class="built_in">this</span>.person&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(reply);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hi,&quot;</span>, <span class="built_in">this</span>.perosn);</span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet.call(obj);</span><br></pre></td></tr></table></figure><p>因為function 內部的作用域會是隔開地所以是未定義(undefined)<br><img src="https://i.imgur.com/Dl7tOZ1.png"></p><h4 id="使用ES6箭頭函式"><a href="#使用ES6箭頭函式" class="headerlink" title="使用ES6箭頭函式"></a>使用ES6箭頭函式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">person</span>: <span class="string">&quot;BIll&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reply = <span class="string">`Hi, <span class="subst">$&#123;<span class="built_in">this</span>.person&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(reply);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hi,&quot;</span>, <span class="built_in">this</span>.person);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet.call(obj);</span><br></pre></td></tr></table></figure><p>箭頭函式不會有作用域的隔閡所以不會影響到this，所以它是一樣吃到外面的obj<br><img src="https://i.imgur.com/4iyrpM9.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS-語言基礎-08-ES6&quot;&gt;&lt;a href=&quot;#JS-語言基礎-08-ES6&quot; class=&quot;headerlink&quot; title=&quot;JS 語言基礎 08 ES6&quot;&gt;&lt;/a&gt;JS 語言基礎 08 ES6&lt;/h2&gt;&lt;h3 id=&quot;01-let-與-const-作用</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
</feed>
