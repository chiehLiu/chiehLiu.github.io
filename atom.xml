<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chieh Liu&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-12T07:38:17.094Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Chieh Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS-原型鏈(Prototype Chain)</title>
    <link href="http://example.com/2021/04/12/JS-%E5%8E%9F%E5%9E%8B%E9%8F%88(Prototype%20Chain)/"/>
    <id>http://example.com/2021/04/12/JS-%E5%8E%9F%E5%9E%8B%E9%8F%88(Prototype%20Chain)/</id>
    <published>2021-04-12T07:33:12.000Z</published>
    <updated>2021-04-12T07:38:17.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型鏈-Prototype-Chain"><a href="#原型鏈-Prototype-Chain" class="headerlink" title="原型鏈(Prototype Chain)"></a>原型鏈(Prototype Chain)</h1><blockquote><p>JavaScript 物件是一「包」動態的屬性（也就是它自己的屬性）並擁有一個原型物件的鏈結，當物件試圖存取一個物件的屬性時，其不僅會尋找該物件，也會尋找該物件的原型、原型的原型……直到找到相符合的屬性，或是到達原型鏈的尾端(Object.prototype)。</p></blockquote><p>簡單來說:</p><p>當物件想要存取自身沒有的屬性時，他會一直往上找到為止就是原型鏈</p><h1 id="物件導向-Object-oriented-programming；OOP"><a href="#物件導向-Object-oriented-programming；OOP" class="headerlink" title="物件導向(Object-oriented programming；OOP)"></a>物件導向(Object-oriented programming；OOP)</h1><p>物件導向是一種程式設計模式，物件是其中的最基本單位，並且軟體是由無數的物件交互運作而成，而JS就支援這樣的模式並且原型鏈的原理必須從這邊理解</p><ul><li>類別(class)</li></ul><p>擁有 class, instance的概念，class會定義物件的屬性，instance則是由被定義的屬性產生的物件，Java, C++使用類似的概念</p><ul><li>原型(prototype)</li></ul><p>沒有類別跟實體的概念，創立的物件會以原型為範本來繼承屬性，如JS</p><h1 id="建構函式與實例-Constructor-amp-Instance"><a href="#建構函式與實例-Constructor-amp-Instance" class="headerlink" title="建構函式與實例 Constructor &amp; Instance"></a>建構函式與實例 Constructor &amp; Instance</h1><p>Car 其實只是一個普通的函式，但如果你用 new 運算子來呼叫它的話，JavaScript 就會將它視為建構函式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">wheel, door, fuel</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.wheel = wheel,</span><br><span class="line">  <span class="built_in">this</span>.door = door,</span><br><span class="line">  <span class="built_in">this</span>.fuel = fuel</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> truck = <span class="keyword">new</span> Car(<span class="number">6</span>, <span class="number">2</span>, <span class="string">&quot;柴油&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(truck) 的印出結果</span></span><br><span class="line">Car &#123;</span><br><span class="line">  door: <span class="number">2</span></span><br><span class="line">  fuel: <span class="string">&quot;柴油&quot;</span></span><br><span class="line">  wheel: <span class="number">6</span></span><br><span class="line">  __proto__: <span class="built_in">Object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你會發現 Car 確實依據我們傳入的參數把 truck 的相關屬性給設定好了，而且在前面標註了 Car，以此說明 truck 是 Car 的實例</p><h1 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型 prototype"></a>原型 prototype</h1><blockquote><p>prototype是一個隱藏的內建屬性，在JS中每個函式都會有，而建構函式也是函式，當然就也有 prototype</p></blockquote><p>這邊我們來印出<code>console.log(Car.prototype);</code>會得到</p><p><img src="https://i.imgur.com/p47pCPj.png"></p><p>印出兩個部分:</p><ul><li><code>constructor</code></li></ul><p>這邊就是建構函式的內容物</p><p><code>Car.prototype.constructor === Car</code> 會印出true</p><ul><li><code>__proto__</code></li></ul><p>在 JavaScript 裡，每個物件型別的變數都有 <code>__proto__</code></p><p>印出<code>console.log(truck.__proto__);</code></p><p>會得到跟Car.prototype一樣的結果<br><img src="https://i.imgur.com/VDZK9lD.png"></p><p>從這邊可以明白，truck作為Car的instance它繼承了Car的屬性，證明方法如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(truck.__proto__ === Car.prototype); <span class="comment">// true 它們兩個指向同一個物件</span></span><br></pre></td></tr></table></figure><h1 id="new-運算子"><a href="#new-運算子" class="headerlink" title="new 運算子"></a>new 運算子</h1><blockquote><p>new 背後做的事情不是很複雜但卻很重要，它將instance以及prototype之間建立了連結。</p></blockquote><p>創造instance時會發生:</p><ol><li>instance會初始化，並可以透過建構函式新增屬性</li><li>instance的<code>__proto__</code>跟建構函式的prototype是一樣的</li></ol><p>這邊透過函式使用this設定屬性非常奇怪，this.屬性這樣的方式做添加，不太合理，因為照理來說這樣會加到全域的屬性上面，所以關鍵出在new</p><p>其實一切的關鍵都在於 new，我們可以用函式來模擬 new 做的事情：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newObject</span>(<span class="params">Constructor, <span class="built_in">arguments</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();  <span class="comment">// 1. 建立新物件</span></span><br><span class="line">  o.__proto__ = Constructor.prototype;  <span class="comment">// 2. 重新指向原型</span></span><br><span class="line">  Constructor.apply(o, <span class="built_in">arguments</span>);  <span class="comment">// 3. 初始化物件</span></span><br><span class="line">  <span class="keyword">return</span> o; <span class="comment">// 4. 回傳新物件</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> truck = newObject(Car, [<span class="number">6</span>, <span class="number">2</span>, <span class="string">&quot;柴油&quot;</span>]);</span><br></pre></td></tr></table></figure><p>把new做的事情拆解出來:</p><ol><li>建立物件</li><li>把instance的<code>__proto__</code>指向Constructor.prototype</li><li>初始化物件 利用apply將this指派給instance，因為這樣this才可以添加屬性</li><li>回傳新物件</li></ol><h1 id="原型鏈-prototype-chain"><a href="#原型鏈-prototype-chain" class="headerlink" title="原型鏈 prototype chain"></a>原型鏈 prototype chain</h1><p>new 關鍵字會把instance的<code>__proto__</code>指向Constructor.prototype，然而在Consturctor.prototype內卻還有一個<code>__proto__</code></p><p>繼續使用上面的範例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Car.prototype.__proto__);</span><br></pre></td></tr></table></figure><p>印出結果會發現:</p><p>最後的constructor會指向Object這個constructor<br><img src="https://i.imgur.com/SkP0n4P.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Car.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>更重要的是物件之間的繼承關係，原來是一個接著一個不斷延續的，看起來就像條鎖鏈一樣。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">truck.__proto__ === truck.prtotype <span class="comment">// Car.prototype</span></span><br><span class="line">truck.__proto__.__proto__  === truck.prototype.__proto__<span class="comment">// Object.prototype</span></span><br><span class="line">truck.__proto__.__proto__.__proto__ === truck.prototype.prototy.__proto__ <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h1 id="原型-prototype-用法"><a href="#原型-prototype-用法" class="headerlink" title="原型 prototype 用法"></a>原型 prototype 用法</h1><ol><li>建構子Book來產出reading_1, reading_2兩個實體</li><li>其中有個共用的方法：setComments</li><li>對共用的方法實作prototype</li><li>在下方就可以直接取用setCommetns的方法</li><li>並且兩個的方法確定是同一個函式</li></ol><p>將 setComments 這個共用的方法放到 Book.prototype，就不用每次都幫實體建立一份，提出來放到 Book.prototype 也就是原型裡面即可，讓不同的實體reaind1,2都可以讀取到同樣的函式避免記憶體浪費</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">name, pNum</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name; <span class="comment">// 書名</span></span><br><span class="line">  <span class="built_in">this</span>.pNum = pNum; <span class="comment">// 頁數</span></span><br><span class="line">  <span class="built_in">this</span>.comment = <span class="literal">null</span>; <span class="comment">// 評等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Book.prototype.setComments = <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.comment = comment;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reading_1 = <span class="keyword">new</span> Book(<span class="string">&#x27;導讀，型別與文法&#x27;</span>, <span class="number">257</span>);</span><br><span class="line"><span class="keyword">var</span> reading_2 = <span class="keyword">new</span> Book(<span class="string">&#x27;範疇與閉包 / this 與物件原型&#x27;</span>, <span class="number">251</span>);</span><br><span class="line"></span><br><span class="line">reading_1.setComments(<span class="string">&#x27;好書！&#x27;</span>);</span><br><span class="line">reading_1.comment <span class="comment">// &quot;好書！&quot;</span></span><br><span class="line"></span><br><span class="line">reading_2.setComments(<span class="string">&#x27;超好書！&#x27;</span>);</span><br><span class="line">reading_2.comment <span class="comment">// &quot;超好書！&quot;</span></span><br><span class="line"></span><br><span class="line">reading_1.setComments === reading_2.setComments <span class="comment">// true，確認是同一個函式！</span></span><br></pre></td></tr></table></figure><h2 id="請勿修改原生原型"><a href="#請勿修改原生原型" class="headerlink" title="請勿修改原生原型"></a>請勿修改原生原型</h2><p>建議設定prototype設定在自己創造的函式上，不要修改原生的（例如：String.prototype），也不要無條件地擴充原生原型，不要使用不要使用原生原型當成變數的初始值，以避免無意間的修改</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原型鏈-Prototype-Chain&quot;&gt;&lt;a href=&quot;#原型鏈-Prototype-Chain&quot; class=&quot;headerlink&quot; title=&quot;原型鏈(Prototype Chain)&quot;&gt;&lt;/a&gt;原型鏈(Prototype Chain)&lt;/h1&gt;&lt;bl</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-this 是什麼</title>
    <link href="http://example.com/2021/04/11/JS-this%20%E6%98%AF%E4%BB%80%E9%BA%BC/"/>
    <id>http://example.com/2021/04/11/JS-this%20%E6%98%AF%E4%BB%80%E9%BA%BC/</id>
    <published>2021-04-11T15:33:12.000Z</published>
    <updated>2021-04-11T15:34:48.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this-是什麼"><a href="#this-是什麼" class="headerlink" title="this 是什麼"></a>this 是什麼</h1><p>在物件內this就會導向物件本身，比較簡單好懂</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">setName</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> myCar = <span class="keyword">new</span> Car()</span><br><span class="line">myCar.setName(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myCar.getName()) <span class="comment">// hello</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>function內 this的值則指向呼叫function的東西，在下方範例中也就是window本身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">hello()</span><br></pre></td></tr></table></figure><p>在這種情況下this的指向：</p><ol><li>嚴格模式底下就都是undefined1. 嚴格模式底下就都是undefined</li><li>非嚴格模式，瀏覽器底下是window</li><li>非嚴格模式，node.js 底下是global</li></ol><h1 id="更改-this-的值"><a href="#更改-this-的值" class="headerlink" title="更改 this 的值"></a>更改 this 的值</h1><h2 id="call跟apply"><a href="#call跟apply" class="headerlink" title="call跟apply"></a>call跟apply</h2><p>你第一個參數傳什麼，裡面 this 的值就會被其取代</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>, a, b)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">hello.call(<span class="string">&#x27;yo&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// yo 1 2</span></span><br><span class="line">hello.apply(<span class="string">&#x27;hihihi&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// hihihi 1 2</span></span><br></pre></td></tr></table></figure><p>就算使用物件讓this指向有明確的目標也會被取代</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> myCar = <span class="keyword">new</span> Car()</span><br><span class="line">myCar.hello() <span class="comment">// myCar instance</span></span><br><span class="line">myCar.hello.call(<span class="string">&#x27;yaaaa&#x27;</span>) <span class="comment">// yaaaa</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最後一種可以改變-this-的方法：bind"><a href="#最後一種可以改變-this-的方法：bind" class="headerlink" title="最後一種可以改變 this 的方法：bind"></a>最後一種可以改變 this 的方法：bind</h2><ul><li>把 hello 這個 function 用 my 來綁定，並且呼叫會輸出my</li><li>並且使用<code>.call()</code>來改變其值也不會改變</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> myHello = hello.bind(<span class="string">&#x27;my&#x27;</span>)</span><br><span class="line">myHello() <span class="comment">// my</span></span><br><span class="line">myHello.call(<span class="string">&#x27;call&#x27;</span>) <span class="comment">// my</span></span><br></pre></td></tr></table></figure><h1 id="直接創造的物件中的this"><a href="#直接創造的物件中的this" class="headerlink" title="直接創造的物件中的this"></a>直接創造的物件中的this</h1><p>沒有透過class或是new關鍵字因此記得</p><blockquote><p>this 的值跟作用域跟程式碼的位置在哪裡完全無關，只跟「你如何呼叫」有關</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">obj.hello() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>印出結果: 1 ， = obj本身的value = 呼叫的對象本身</p><h2 id="問題來了"><a href="#問題來了" class="headerlink" title="問題來了"></a>問題來了</h2><p>這邊的hey()是同一個函式卻跑出不同的結果？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">obj.hello() <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">const</span> hey = obj.hello</span><br><span class="line">hey() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>解法:</p><p>把所有的 function call，都轉成利用call的形式來看，以上面那個例子來說，會是這樣：</p><p>規則就是你在呼叫 function 以前是什麼東西，你就把它放到後面去</p><p><code>obj.hello()</code>  =&gt; <code>obj.hello.call(obj)</code> obj.value = 1<br><code>hey()</code> =&gt; <code>hey.call()</code> 空的就填入預設值window.value也就是undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">obj.hello() <span class="comment">// 1</span></span><br><span class="line">obj.hello.call(obj) <span class="comment">// 轉成 call</span></span><br><span class="line"><span class="keyword">const</span> hey = obj.hello</span><br><span class="line">hey() <span class="comment">// undefined</span></span><br><span class="line">hey.call() <span class="comment">// 轉成 call</span></span><br></pre></td></tr></table></figure><h1 id="箭頭函式中的this"><a href="#箭頭函式中的this" class="headerlink" title="箭頭函式中的this"></a>箭頭函式中的this</h1><blockquote><p>它本身並沒有 this，所以「在宣告它的地方的 this 是什麼，它的 this 就是什麼」</p></blockquote><p>箭頭函式被宣告的地方的this是什麼，箭頭函式的this就是一樣的東西:</p><p>所以範例處hello的this是obj那箭頭函式的this就是obj</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">            x: <span class="number">1</span>,</span><br><span class="line">            hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 這邊印出來的 this 是什麼，test 的 this 就是什麼</span></span><br><span class="line">                <span class="comment">// 就是我說的：</span></span><br><span class="line">                <span class="comment">// 在宣告它的地方的 this 是什麼，test 的 this 就是什麼</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">                <span class="keyword">const</span> test = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.x)</span><br><span class="line">                &#125;</span><br><span class="line">                test()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// obj.hello() // 1</span></span><br><span class="line">        <span class="keyword">const</span> hello = obj.hello</span><br><span class="line">        hello() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;this-是什麼&quot;&gt;&lt;a href=&quot;#this-是什麼&quot; class=&quot;headerlink&quot; title=&quot;this 是什麼&quot;&gt;&lt;/a&gt;this 是什麼&lt;/h1&gt;&lt;p&gt;在物件內this就會導向物件本身，比較簡單好懂&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-範圍鏈 (Scope Chain)</title>
    <link href="http://example.com/2021/04/11/JS-%E7%AF%84%E5%9C%8D%E9%8F%88%20(Scope%20Chain)/"/>
    <id>http://example.com/2021/04/11/JS-%E7%AF%84%E5%9C%8D%E9%8F%88%20(Scope%20Chain)/</id>
    <published>2021-04-11T15:33:12.000Z</published>
    <updated>2021-04-12T07:37:24.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="範圍鏈-Scope-Chain"><a href="#範圍鏈-Scope-Chain" class="headerlink" title="範圍鏈 Scope Chain"></a>範圍鏈 Scope Chain</h1><p>解析下方範例:</p><ol><li>呼叫outer(a)帶入參數a 進去outer()內部</li><li>看到outer()內部呼叫inner(b*3)</li><li>進入inner(c)內部，印出a,b,c</li><li>此時已知 c = 6因為 a=1, b=a<em>2=2, c=b</em>3=6</li><li>但是b,c必須往外找在inner()的外面找到b</li><li>在outer()外面找到a</li><li>印出 1, 2, 6</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b = a * <span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">  &#125;</span><br><span class="line">  inner(b * <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">outer(a);</span><br></pre></td></tr></table></figure><p>從上面範例可以看出在inner()內部是找不到a,b變數的，因為往外去尋找，而這個往外尋找的動作就稱為範圍鏈</p><h2 id="練習題"><a href="#練習題" class="headerlink" title="練習題"></a>練習題</h2><p>這邊result印出結果是什麼呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="string">&quot;global.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">&quot;local.&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> innerFunc = outer();</span><br><span class="line"><span class="keyword">var</span> result = innerFunc();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( result );    <span class="comment">//  ?</span></span><br></pre></td></tr></table></figure><ol><li>先看result等於innerFunc()</li><li>再看到innerFunc()等於outer()</li><li>看到outer()內，return inner()</li><li>看到inner()內，return msg</li><li>這邊因為inner內部找不到變數msg所以往外找找到了 = local.</li><li>故印出local.</li></ol><p>這題的考點是:</p><ol><li>外部環境的連結是在函式宣告當下就決定了而不是在乎叫的時候</li><li>所以inner的外層就是outer也就可以在這找到msg變數</li></ol><blockquote><p>當內部 (inner) 函式被回傳後，除了自己本身的程式碼外，也可以 穿越 取得了內部函式「當時環境」的變數值，記住了執行當時的環境，這就是「閉包」。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;範圍鏈-Scope-Chain&quot;&gt;&lt;a href=&quot;#範圍鏈-Scope-Chain&quot; class=&quot;headerlink&quot; title=&quot;範圍鏈 Scope Chain&quot;&gt;&lt;/a&gt;範圍鏈 Scope Chain&lt;/h1&gt;&lt;p&gt;解析下方範例:&lt;/p&gt;
&lt;ol&gt;
&lt;</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-閉包(Closure)</title>
    <link href="http://example.com/2021/04/11/JS-%E9%96%89%E5%8C%85(Closure)/"/>
    <id>http://example.com/2021/04/11/JS-%E9%96%89%E5%8C%85(Closure)/</id>
    <published>2021-04-11T15:32:12.000Z</published>
    <updated>2021-04-11T15:32:51.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="閉包-Closure"><a href="#閉包-Closure" class="headerlink" title="閉包(Closure)"></a>閉包(Closure)</h1><p>在理解閉包之前需要先理解</p><ul><li>自由變數(全域變數) </li><li>作用域鍊 scope chain</li><li>靜態作用域 static scope（lexical scope）</li><li>動態作用域 dynamic scope</li></ul><h1 id="作用域（Scope）"><a href="#作用域（Scope）" class="headerlink" title="作用域（Scope）"></a>作用域（Scope）</h1><blockquote><p>「作用域就是一個變數的生存範圍，一旦出了這個範圍，就無法存取到這個變數」</p></blockquote><h2 id="範例-區域變數"><a href="#範例-區域變數" class="headerlink" title="範例 - 區域變數"></a>範例 - 區域變數</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 印出結果:  Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>這裡因為a的作用域存在於function test裡面所以無法被印出</p><h3 id="把區域變數變成全域變數"><a href="#把區域變數變成全域變數" class="headerlink" title="把區域變數變成全域變數"></a>把區域變數變成全域變數</h3><p>JS 裡有一種狀況會自動產生全域變數，那就是賦值給未宣告的變數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            n = <span class="number">10</span>; <span class="comment">//n直接轉變成全域變數</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        test()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(n + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        test2();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.n); <span class="comment">// 從這段可以明白n是全域變數</span></span><br><span class="line"><span class="comment">// hello , 10, 11, 10</span></span><br></pre></td></tr></table></figure><h2 id="範例-全域變數"><a href="#範例-全域變數" class="headerlink" title="範例 - 全域變數"></a>範例 - 全域變數</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> I_am_global = <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(I_am_global) </span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"><span class="comment">// 印出結果:123</span></span><br></pre></td></tr></table></figure><p>這邊的變數會寫在global裡面稱為全域變數任何地方都可以存取到它</p><h2 id="小練習"><a href="#小練習" class="headerlink" title="小練習"></a>小練習</h2><p>這邊test()會印出100或是200?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// 100 or 200?</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">200</span></span><br><span class="line">  echo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>很混淆對嗎?</p><p>但是只要明白:</p><ol><li>當函式內部找不到變數使用時會往外部找</li><li>這邊的練習echo的外部就是global並不是test()</li><li>因此答案是100</li></ol><h1 id="靜態作用域（static-scope）"><a href="#靜態作用域（static-scope）" class="headerlink" title="靜態作用域（static scope）"></a>靜態作用域（static scope）</h1><blockquote><p>代表作用域跟這個 function 在哪裡被「呼叫」一點關係都沒有，你用肉眼看程式碼的結構就可以看出來它的作用域是什麼，而且是不會變的。</p></blockquote><p>以小練習的範例說明的話:</p><ol><li>在test裡面另外宣告了a 並且呼叫了它</li><li>但是因為靜態作用域的影響 function 被宣告時就被決定了它的外部環境也就是全域變數</li><li>所以執行階段的出現的a 變數(test內)並沒有影響其值</li><li>但是如果JS採用的是動態作用域的話印出結果就會是200</li></ol><h1 id="閉包（Closure）"><a href="#閉包（Closure）" class="headerlink" title="閉包（Closure）"></a>閉包（Closure）</h1><h2 id="範例說明閉包"><a href="#範例說明閉包" class="headerlink" title="範例說明閉包"></a>範例說明閉包</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> my_balance = <span class="number">999</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deduct</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  my_balance -= (n &gt; <span class="number">10</span> ? <span class="number">10</span> : n) <span class="comment">// 超過 10 塊只扣 10 塊</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">deduct(<span class="number">13</span>) <span class="comment">// 只被扣 10 塊</span></span><br><span class="line">my_balance -= <span class="number">999</span> <span class="comment">// 還是被扣了 999 塊</span></span><br></pre></td></tr></table></figure><p>就算我們函式操作好每次扣的金額，但是因為變數在全域範圍，因此任何人都可以取用這個時候就可以使用閉包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWallet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> my_balance = <span class="number">999</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    deduct: <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">      my_balance -= (n &gt; <span class="number">10</span> ? <span class="number">10</span> : n) <span class="comment">// 超過 10 塊只扣 10 塊</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> wallet = getWallet()</span><br><span class="line">wallet.deduct(<span class="number">13</span>) <span class="comment">// 只被扣 10 塊</span></span><br><span class="line">my_balance -= <span class="number">999</span> <span class="comment">// Uncaught ReferenceError: my_balance is not defined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這邊透過return的方式把函式包在另一個函式內部的物件內，透過這樣的方式想要修改變數my_balance就會失敗搂！這樣的使用方式就是<strong>閉包</strong></p><h2 id="範例說明閉包二"><a href="#範例說明閉包二" class="headerlink" title="範例說明閉包二"></a>範例說明閉包二</h2><p>假設html有五個按鈕</p><p>點擊按鈕後會得出甚麼結果?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">            btn[i].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(i)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>結果是都是5，並不是預期中0,1,2,3,4</p><p>原因如下:</p><ol><li>事件會從stack被丟入web API 做處理</li><li>所以這邊console.log(i)就已經先印出0~4了</li><li>迴圈跑到5的時候跳出迴圈這時候事件的部分也從event loop回來接受i的資料</li><li>因此印出的內容都是5</li></ol><p>解決方式:</p><p>使用let代替var，每次跑回圈都會產生新的作用域，因此alert出來就會是想要的值了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;=<span class="number">4</span>; i++) &#123;</span><br><span class="line">  btn[i].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(i)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;閉包-Closure&quot;&gt;&lt;a href=&quot;#閉包-Closure&quot; class=&quot;headerlink&quot; title=&quot;閉包(Closure)&quot;&gt;&lt;/a&gt;閉包(Closure)&lt;/h1&gt;&lt;p&gt;在理解閉包之前需要先理解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自由變數(全域變數)</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-提升(Hoisting)</title>
    <link href="http://example.com/2021/04/07/JS-%E6%8F%90%E5%8D%87(Hoisting)/"/>
    <id>http://example.com/2021/04/07/JS-%E6%8F%90%E5%8D%87(Hoisting)/</id>
    <published>2021-04-07T15:16:12.000Z</published>
    <updated>2021-04-11T15:41:59.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本的Hoisting行為"><a href="#基本的Hoisting行為" class="headerlink" title="基本的Hoisting行為"></a>基本的Hoisting行為</h2><p>Hoisting 的行為可以分為兩種:</p><ol><li>變數提升</li><li>函式提升</li></ol><ul><li>變數提升:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//印出結果:undefined</span></span><br></pre></td></tr></table></figure><p>從上面印出結果可以發現，還未宣告的x竟然印出結果是undefined，而不是 not defined就是Hoisting的作用之一</p><ul><li>函式提升:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">logx();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logx</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 印出結果:1</span></span><br></pre></td></tr></table></figure><p>在宣告函式之前就呼叫函式卻可以正常輸出結果也是Hoisting的效果</p><h2 id="什麼是Hoisting"><a href="#什麼是Hoisting" class="headerlink" title="什麼是Hoisting"></a>什麼是Hoisting</h2><p>當你完全沒有宣告變數就印出時</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(v)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>會得到變數沒有定義的錯誤<br><img src="https://i.imgur.com/THEUqr0.png"></p><p>雖然程式是一行一行的讀取但是在JS裡面卻可以這樣寫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(v);</span><br><span class="line"><span class="keyword">var</span> v</span><br></pre></td></tr></table></figure><p>得出結果是undefined，竟然沒有報錯，依照理解這邊應該也會報錯才對，這樣的現象就是Hositing<br><img src="https://i.imgur.com/Eihaubm.png"></p><p>第二行的 變數v 因為某些原因被提升到了最開頭，因此你可以把目前的程式碼想像成這樣:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v</span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br></pre></td></tr></table></figure><p>這部分必須由JS引擎的行為來解釋，它並不是真的移動變數v到頂端！</p><h2 id="hoisting-只會提升宣告而非賦值"><a href="#hoisting-只會提升宣告而非賦值" class="headerlink" title="hoisting 只會提升宣告而非賦值"></a>hoisting 只會提升宣告而非賦值</h2><p>可以把 <code>var v = 5</code>理解成</p><ol><li>宣告 v</li><li>v = 5</li></ol><p>而Hoisting只會提升第一階段也就是宣告的部分</p><h3 id="範例解釋-一"><a href="#範例解釋-一" class="headerlink" title="範例解釋 一"></a>範例解釋 一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(v);</span><br><span class="line"><span class="keyword">var</span> v = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 印出結果 是 undfined並不是5</span></span><br></pre></td></tr></table></figure><p>提升後可以想像成這樣:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v;</span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br><span class="line">v = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 印出結果 是 undfined並不是5</span></span><br></pre></td></tr></table></figure><h3 id="範例解釋-二"><a href="#範例解釋-二" class="headerlink" title="範例解釋 二"></a>範例解釋 二</h3><p>這個輸出的內容會是什麼？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">  <span class="keyword">var</span> v = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>因為傳進來的參數讓 v = 10所以可以這樣理解:</p><ol><li>var v = 10</li><li>var v 是因為下面的var v = 3的變數提升上來</li><li>這邊雖然因為變數提升上來了var v但是因為沒有重新賦值給v所以還是保持10這個結果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> v = <span class="number">10</span></span><br><span class="line">  <span class="keyword">var</span> v</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">  <span class="keyword">var</span> v = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 印出結果為 10</span></span><br></pre></td></tr></table></figure><h2 id="Hoisting函式優先級高於變數"><a href="#Hoisting函式優先級高於變數" class="headerlink" title="Hoisting函式優先級高於變數"></a>Hoisting函式優先級高於變數</h2><p>這邊印出的結果是[Function: a]，誠如最上面所解釋的Hoisting也支援函式宣告，並且可以從下方範例理解，函式的優先級高於變數，因此輸出的結果是函式本身而不是undfined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a) </span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 印出結果: [Function: a]</span></span><br></pre></td></tr></table></figure><h2 id="Hoisting重點"><a href="#Hoisting重點" class="headerlink" title="Hoisting重點"></a>Hoisting重點</h2><ol><li>變數以及函式都會有提升發生</li><li>函式提升的優先級高於變數</li><li>要注意參數在函式內部的參與會給變數賦值</li><li>Hoisting只會提升宣告，不會提升賦值</li></ol><h1 id="let-跟-const-與-hoisting"><a href="#let-跟-const-與-hoisting" class="headerlink" title="let 跟 const 與 hoisting"></a>let 跟 const 與 hoisting</h1><blockquote><p>let 與 const 也有 hoisting 但沒有初始化為 undefined，而且在賦值之前試圖取值會發生錯誤(TDZ)。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a) </span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="comment">// ReferenceError: Cannot access &#x27;a&#x27; before initialization</span></span><br></pre></td></tr></table></figure><blockquote><p>In ECMAScript 2015, let bindings are not subject to Variable Hoisting, which means that let declarations do not move to the top of the current execution context. Referencing the variable in the block before the initialization results in a ReferenceError (contrary to a variable declared with var, which will just have the undefined value). The variable is in a “temporal dead zone” from the start of the block until the initialization is processed.</p></blockquote><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_and_errors_with_let">MDN</a></p><h1 id="為什麼我們需要-hoisting？"><a href="#為什麼我們需要-hoisting？" class="headerlink" title="為什麼我們需要 hoisting？"></a>為什麼我們需要 hoisting？</h1><ul><li>為了解決function 的相互呼叫</li></ul><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><ol><li>呼叫函式帶入參數10 loop(10)</li><li>進入函式loop內，10&gt;1 故 logEvenOrOdd(n=10-1)帶入9</li><li>呼叫logEvenOrOdd(9)   - <strong>這邊就是相互呼叫如果沒有變數提升是做不到的！</strong></li><li>印出 9, 9除以2的餘數為1故為true 顯示’Odd’</li><li>重新呼叫一次loop(n)</li><li>反覆行為</li><li>.</li><li>.</li><li>.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                logEvenOrOdd(--n)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">logEvenOrOdd</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(n, n % <span class="number">2</span> ? <span class="string">&#x27;Odd&#x27;</span> : <span class="string">&#x27;Even&#x27;</span>)</span><br><span class="line">            loop(n)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        loop(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>印出結果:</p><p><img src="https://i.imgur.com/HiwFsJW.png"></p><h1 id="Hoisting-到底是怎麼運作的？"><a href="#Hoisting-到底是怎麼運作的？" class="headerlink" title="Hoisting 到底是怎麼運作的？"></a>Hoisting 到底是怎麼運作的？</h1><h2 id="先簡單介紹一下執行背景-Execution-Contexts"><a href="#先簡單介紹一下執行背景-Execution-Contexts" class="headerlink" title="先簡單介紹一下執行背景 (Execution Contexts)"></a>先簡單介紹一下執行背景 (Execution Contexts)</h2><ul><li>是一段別人寫好的程式來驗證以及執行使用者的程式碼</li><li>管理程式碼執行的先後順序(也就是stack執行堆)</li><li>管理的內容不只是使用者撰寫的還有更多</li></ul><h2 id="Hoisting運作"><a href="#Hoisting運作" class="headerlink" title="Hoisting運作"></a>Hoisting運作</h2><p>簡單來說執行函式的時候就會創造執行背景，並且會依序做三件事前在函式執行之前:</p><p>Variable Object存在於EC環境內在裡面宣告的變數跟函式都會被加進 VO 裡面</p><ol><li>把參數放到 Variable Object 裡面並設定好值，傳什麼進來就是什麼，沒有值的設成 undefined(這部分也就是變數的預設值為undefined的原因)</li><li>把 function 宣告放到 Variable Object 裡，如果已經有同名的就覆蓋掉(這邊解釋function優先級高於變數的原因)</li><li>把變數宣告放到 Variable Object 裡，如果已經有同名的則忽略(變數提升只會提升宣告而不提升賦值的原因)</li></ol><h2 id="再理解一次Hoisting"><a href="#再理解一次Hoisting" class="headerlink" title="再理解一次Hoisting"></a>再理解一次Hoisting</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">  <span class="keyword">var</span> v = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ol><li>第一個階段是進入 EC</li><li>建立 VO<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  v: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>因為VO內部已經有V這個屬性了因此忽略 v = 3，所以不添增VO的內容</li><li>第二階段執行程式碼 印出結果: 10</li></ol><h1 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章:"></a>參考文章:</h1><p><a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting/#post-comment-wrapper">我知道你懂 hoisting，可是你了解到多深？ by Huli</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本的Hoisting行為&quot;&gt;&lt;a href=&quot;#基本的Hoisting行為&quot; class=&quot;headerlink&quot; title=&quot;基本的Hoisting行為&quot;&gt;&lt;/a&gt;基本的Hoisting行為&lt;/h2&gt;&lt;p&gt;Hoisting 的行為可以分為兩種:&lt;/p&gt;
&lt;o</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-事件的三大階段</title>
    <link href="http://example.com/2021/04/07/JS-%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%B8%89%E5%A4%A7%E9%9A%8E%E6%AE%B5/"/>
    <id>http://example.com/2021/04/07/JS-%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%B8%89%E5%A4%A7%E9%9A%8E%E6%AE%B5/</id>
    <published>2021-04-07T15:13:12.000Z</published>
    <updated>2021-04-07T15:14:28.564Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/2QlX4Py.png"></p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>為了解釋事件的三大階段，使用下面三個方框</p><p>紅: box-1<br>綠: box-2<br>黃: box-3</p><p><img src="https://i.imgur.com/UIMKOcK.png"></p><p>使用事件監聽每一個方框，當點擊時每個方框時會印出哪個box被點擊了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box-1&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box-2&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> box3 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box-3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        box1.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;box1 has been clicked&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        box2.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;box2 has been clicked&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        box3.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;box3 has been clicked&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>印出結果:</p><ul><li><p>當點擊紅框框顯示出<br>box-1 has been clicked</p></li><li><p>當點擊綠框框顯示出<br>box-1 has been clicked<br>box-2 has been clicked</p></li><li><p>當點擊黃框框顯示出<br>box-1 has been clicked<br>box-2 has been clicked<br>box-3 has been clicked</p></li></ul><h2 id="捕捉階段-Capture-Phase"><a href="#捕捉階段-Capture-Phase" class="headerlink" title="捕捉階段 Capture Phase"></a>捕捉階段 Capture Phase</h2><p>紅色線條的階段是事件捕捉階段，在這個階段會依序從Window往下找直到目標為止</p><h2 id="目標階段-Target-Phase"><a href="#目標階段-Target-Phase" class="headerlink" title="目標階段 Target Phase"></a>目標階段 Target Phase</h2><p>發現監聽目標準備要發泡回去</p><h2 id="冒泡階段-Bubbling-Phase"><a href="#冒泡階段-Bubbling-Phase" class="headerlink" title="冒泡階段 Bubbling Phase"></a>冒泡階段 Bubbling Phase</h2><p>從監聽目標開始發泡回去Windows，我們範例這邊就是抓取這段作說明解釋:</p><p>當點擊黃框框會造成三個事件都觸發是因為黃色是目標階段往父母層的綠以及紅也都被觸發了所以他們都被印出內容</p><h3 id="如何停止冒泡階段"><a href="#如何停止冒泡階段" class="headerlink" title="如何停止冒泡階段"></a>如何停止冒泡階段</h3><p>使用<code>stopPropagation()</code>就可以讓這樣污染的情況停止</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">box3.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            e.stopPropagation();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;box3 has been clicked&#x27;</span>);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h3 id="preventDefault-有用處嗎"><a href="#preventDefault-有用處嗎" class="headerlink" title="preventDefault()有用處嗎?"></a>preventDefault()有用處嗎?</h3><p><code>preventDefault()</code>只能停止預設的行為，對於停止冒泡還是得使用<code>stopPropagation()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">box3.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            <span class="comment">// e.stopPropagation();</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;box3 has been clicked&#x27;</span>);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>點擊box-3還是會顯示三個事件的結果<br><img src="https://i.imgur.com/jmNs2nI.png"></p><h1 id="事件委派-Event-delegation"><a href="#事件委派-Event-delegation" class="headerlink" title="事件委派 Event delegation"></a>事件委派 Event delegation</h1><p>用下方的無順序列表來示範事件委派:</p><p>想要點擊個別的li時(也就是111, 222, 333)會印出其內容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;li-1&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;li-2&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;li-3&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/rFBQQHt.png"></p><p>比較笨的寫法就是全部上事件監聽絕對沒錯，可是當有一萬個li就不可能這樣實現這時候就可以<strong>使用事件委派 Event delegation</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">li1.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e.target);</span><br><span class="line">        &#125;)</span><br><span class="line">        li2.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e.currentTarget);</span><br><span class="line">        &#125;)</span><br><span class="line">        li3.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e.target.innerText);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>使用事件的委派技巧使用li的父母層也就是list直接抓取li就算li數量再多都不用擔心瞜!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">list.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target.innerText);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Target-currentTarget-的區別"><a href="#Target-currentTarget-的區別" class="headerlink" title="Target, currentTarget 的區別"></a>Target, currentTarget 的區別</h2><ul><li>currentTarget<br>會印出當前事件附屬於哪個元素或是觸發事件監聽的元素</li></ul><p>比較特別的是如果有父母層存在會先印出父母層(沒有的話則印出當下印出觸發事件監聽的元素)</p><ol><li>會印出事件的父母層</li><li>當下印出觸發事件監聽的元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e.currentTarget);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>target</li></ul><ol><li>當下印出觸發事件監聽的元素<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e.currentTarget);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/2QlX4Py.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;範例&quot;&gt;&lt;a href=&quot;#範例&quot; class=&quot;headerlink&quot; title=&quot;範例&quot;&gt;&lt;/a&gt;範例&lt;/h2&gt;&lt;p&gt;為了解釋事件的三大階段，使用下面三個方</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>web development-網頁開發前端筆記(集合筆記)</title>
    <link href="http://example.com/2021/04/02/[%E7%AD%86%E8%A8%98]%E7%B6%B2%E9%A0%81%E9%96%8B%E7%99%BC%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    <id>http://example.com/2021/04/02/[%E7%AD%86%E8%A8%98]%E7%B6%B2%E9%A0%81%E9%96%8B%E7%99%BC%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/</id>
    <published>2021-04-02T02:17:17.000Z</published>
    <updated>2021-04-04T14:05:00.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端相關"><a href="#前端相關" class="headerlink" title="前端相關"></a>前端相關</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ol><li><a href="https://hackmd.io/2opOTVd0R5CN_FN6juq2xg?view#JS%E5%B9%BC%E5%B9%BC%E7%8F%AD">JS 幼幼班</a></li><li><a href="https://hackmd.io/CERrvEVcT8i7dkZ7CT8hbg">網頁前端工程入門 By 彭彭</a></li><li><a href="https://hackmd.io/zkmbbFwMSIKxs2lU-RFBCQ">JavaScript Crash Course For Beginners</a></li><li><a href="https://hackmd.io/RIW5a7jBQP2v3wNCXm-wXw">JavaScript DOM Crash Course</a></li><li><a href="https://hackmd.io/e_OHLOuORaamBMPt9mONeA?view">JavaScript OOP Crash Course (ES5 &amp; ES6)</a></li><li><a href="https://hackmd.io/UwrfbMhASlaWWPOXNiO_1Q">JavaScript Higher Order Functions &amp; Arrays</a></li><li><a href="https://hackmd.io/oF3bzKm8RSSj9WPRB95Qvg">正則表達式 Regular Expression</a></li><li><a href="https://hackmd.io/uRVcqXjaQsiwtWPwnmxBLQ">AJAX Crash Course</a></li><li><a href="https://hackmd.io/TMUQJ4uaT-2-e303X0jXrA">Fetch API Introduction</a></li><li><a href="https://hackmd.io/toOFnYhGTjKZXVf5X8LatA">Async JS Crash Course</a></li><li><a href="https://hackmd.io/GRZtwBzPSqmfiY0UwlLSCA">The Wired Part Of Javascript</a></li></ol><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><ol><li><a href="https://hackmd.io/14qnzqLrRUavCc-J8_xCkQ">JS 幼幼班 - jQuery 篇</a></li></ol><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><ol><li><a href="https://hackmd.io/UELM8ZDyR8mHvEX7__nhlg">HTML 簡介</a></li><li><a href="https://hackmd.io/Y-bUYMHRQNWtRzFvbUX5Dg">HTML 語意化(Sematic)</a></li><li><a href="https://hackmd.io/O8wpWwlfQTqOylxe8vrNxw">HTML 元素的結構</a></li><li><a href="https://hackmd.io/MMuISZ-wQcOq2VvVCry8Xg">HTML freecodecamp 課程完課證明</a></li></ol><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ol><li><a href="https://hackmd.io/K7CR5fLkQ066-oK_IQgxqQ">CSS for beginner</a></li><li><a href="https://hackmd.io/hCN6IksjQO6-7LBCztCZnw">CSS for Intermediate</a></li><li><a href="https://hackmd.io/R9LSIVpfT-i587m3T5JCFA">CSS 版面設置 Display</a></li><li><a href="https://hackmd.io/kO9RST_hS32rO1MCqk_Q-A">CSS box-sizing</a></li><li><a href="https://hackmd.io/ZTvb6HDISFGtjsaTpkkU9g">CSS min-width,max-width</a></li><li><a href="https://hackmd.io/9vA7grfCS6Gx65BxSnARdg">CSS position:Relative</a></li><li><a href="https://hackmd.io/765LP4oQSYWVuKZJyWFHPA">CSS position:absolute</a></li><li><a href="https://hackmd.io/rzOA1npySQ-5cbn49JDaAg">CSS position:fixed</a></li><li><a href="https://hackmd.io/6F0UlEVoRZKcD9XcFo1YYw">CSS overflow</a></li><li><a href="https://hackmd.io/up0aStAmT_WoIxBJFkK5sA">CSS Flexbox</a></li><li><a href="https://hackmd.io/GzHtf4BBTjqRqT0InSU2PA">CSS Grids</a></li><li><a href="https://hackmd.io/G96vmzDxRWaTeUjH1xDITw">CSS freecodecamp 課程完課證明</a></li></ol><h3 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h3><ol><li><a href="https://hackmd.io/1gxuvokhRT6eXk-iqPmYYg">SASS The Complete SASS Course</a></li></ol><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ol><li><a href="https://hackmd.io/MiWSvLn4ReCT4Q75Ljn1uA">Git &amp; GitHub Crash Course For Beginners</a></li><li><a href="https://hackmd.io/9L79vrkUSWmus8qnufocOQ">PR (Pull Request)</a></li><li><a href="https://hackmd.io/nxhMBsiLSzCqAleezk4dHQ">Github Pages</a></li><li><a href="https://hackmd.io/UyD9qkzkRviyGO9Bpw9tVg">Github 下載雲端專案到本機</a></li><li><a href="https://hackmd.io/ntertA6hRjO4M7g5-Ip4rQ">Git Branch</a></li></ol><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><ol><li><a href="https://hackmd.io/nHKa7Z9sTtymkt6XASGxcA">Hexo 部落格架設</a></li></ol><h3 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h3><ol><li><a href="https://hackmd.io/csXtjcARRWmb9AS3mKC1oQ">WSL 安裝 (windows)</a></li></ol><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ol><li><a href="https://hackmd.io/II-91mo-SpuB42VRmzjKVg">Markdown 語法簡介</a></li></ol><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><ol><li><a href="https://hackmd.io/4EhXP4VqQS-2XL516HK_6w">Command Line Windows 簡介</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端相關&quot;&gt;&lt;a href=&quot;#前端相關&quot; class=&quot;headerlink&quot; title=&quot;前端相關&quot;&gt;&lt;/a&gt;前端相關&lt;/h2&gt;&lt;h3 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="總筆記" scheme="http://example.com/categories/%E7%B8%BD%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="jQuery" scheme="http://example.com/tags/jQuery/"/>
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
    <category term="SASS" scheme="http://example.com/tags/SASS/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="WSL" scheme="http://example.com/tags/WSL/"/>
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Crash Course 2021</title>
    <link href="http://example.com/2021/03/28/Vue-Crash%20Course%202021/"/>
    <id>http://example.com/2021/03/28/Vue-Crash%20Course%202021/</id>
    <published>2021-03-28T03:27:20.000Z</published>
    <updated>2021-04-04T16:29:52.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><h2 id="What-is-Vue"><a href="#What-is-Vue" class="headerlink" title="What is Vue?"></a>What is Vue?</h2><ul><li>是一個前端JS框架主要為了建構USER以及網頁頁面</li><li>常常使用在SPA(single-page-application)在客戶端使用</li><li>可以使用在全端的app藉著HTTP requests 送到後端</li><li>可以跑在伺服器端使用SSR框架像是Nuxt(非常類似於Next 之於 React)</li></ul><h2 id="Why-use-Vue"><a href="#Why-use-Vue" class="headerlink" title="Why use Vue?"></a>Why use Vue?</h2><ul><li>創造動態的前端 app&amp;網頁</li><li>有比較簡單的學習曲線(比較像是結構化的JS)</li><li>容易跟其他專案做整合</li><li>快速且檔案較小</li><li>Virtual DOM(只會更新頁面上需要更新的部分而不是整頁重整)</li><li>非常受歡迎且在崛起中</li><li>擁有良好的社群資源</li></ul><h2 id="What-should-you-know-first"><a href="#What-should-you-know-first" class="headerlink" title="What should you know first?"></a>What should you know first?</h2><ul><li>JS基礎</li><li>Async Programming(promises)</li><li>Array Methods(forEach, map, filter,etc)</li><li>Fetch API/ HTTP Requests</li><li>NPM(Node Package Manger)</li></ul><h2 id="UI-Components"><a href="#UI-Components" class="headerlink" title="UI Components"></a>UI Components</h2><p><img src="https://i.imgur.com/69RLxhm.png"></p><p>這個作品是本課程最後會完成的UI部分:</p><ul><li>橘色部分是: header</li><li>連接著藍色部分是: button</li></ul><p>它們都是可以重複使用的，可以使用prop呈現文字或是顏色</p><ul><li><p>綠色部分是: 新增任務的區域也就是form的區域</p></li><li><p>紅色部分是: 任務呈現區</p></li><li><p>紅色內部的水藍色也都是組件: 包含每一個任務</p></li><li><p>紫色部分: 連接到about page</p><h2 id="Basic-Layout-of-Component"><a href="#Basic-Layout-of-Component" class="headerlink" title="Basic Layout of Component"></a>Basic Layout of Component</h2></li></ul><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>你的輸出以及HTML的位置<br>變數或是表達式使用宣告式渲染 </p><p><img src="https://i.imgur.com/HQ7Cerg.png"></p><h3 id="JS-part"><a href="#JS-part" class="headerlink" title="JS part"></a>JS part</h3><p>邏輯呈現<br>此處可以宣告props、特定的資料並且連到到相應的組件<br>也可以使用function<br>也可以連接到cycle methods</p><p><img src="https://i.imgur.com/VYRh2uC.png"></p><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><p>這邊的範例使用了scope</p><p>代表內部的修飾只會出現在這一個header，其他header都不會支援到</p><p><img src="https://i.imgur.com/GIyEYiP.png"></p><h3 id="嵌入Component"><a href="#嵌入Component" class="headerlink" title="嵌入Component"></a>嵌入Component</h3><p>傳入props的方法就像是html裡面的屬性方式很像</p><p>也就是導入script部分的title，那個title就會使用在template裡面的<code>&lt;h1&gt;</code>裡</p><p><img src="https://i.imgur.com/pe8XJeO.png"></p><h2 id="Working-with-State-Data"><a href="#Working-with-State-Data" class="headerlink" title="Working with State/ Data"></a>Working with State/ Data</h2><ul><li>組件會擁有自己的狀態(state)，這將會決定組件本身的行為以及甚麼樣的資料會被呈現</li><li>有一些狀態(state)會在本地端發生，然而會有一些發生在global以及app端此時他們會分享複數的組件</li><li>如果你有很多的app等級的狀態時可以使用VueX是狀態管理模式(像是Redux 之於 React)</li></ul><h2 id="Option-API-vs-Composition-API"><a href="#Option-API-vs-Composition-API" class="headerlink" title="Option API vs. Composition API"></a>Option API vs. Composition API</h2><ul><li>Vue3擁有composition API目標在於讓code更易讀且可以重複使用尤其在大型app專案下</li><li>這篇筆記不會包含compositoin API的介紹只要會專注使用傳統的option API(也就是使用在Vue2,3都有)</li></ul><h2 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h2><ul><li>Vue.js的基本工具</li><li>是CLI的介面來操作vue apps</li><li>擁有Dev server</li><li>擁有自己的圖形化使用者介面(GUI)</li><li>整合testing, TypeScript, ESLint &amp; more</li></ul><h1 id="Let’s-Learn-Vue-JS"><a href="#Let’s-Learn-Vue-JS" class="headerlink" title="Let’s Learn Vue JS!"></a>Let’s Learn Vue JS!</h1><h2 id="使用Vue-CDN"><a href="#使用Vue-CDN" class="headerlink" title="使用Vue CDN"></a>使用Vue CDN</h2><p><a href="https://v3.vuejs.org/guide/installation.html#vue-devtools">Vue 官網 嵌入CDN</a></p><p>這個指令<code>@next</code>可以嵌入最新版本的Vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入HTML的位置跟方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Random User Generator<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3.0.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3.0.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">    template: <span class="string">&#x27;&lt;h1&gt; Hello World! &lt;/h1&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/lLbSCcp.png"></p><ul><li>在HTML的幾乎只要設定好id後就不用動作</li><li>主要處理在JS</li><li>使用Vue.createApp 內處理template<code>&#39;&lt;h1&gt; Hello World! &lt;/h1&gt;&#39;</code></li><li>使用mount選取(‘#app)並且把template的內容鑲嵌進去HTML裡面</li></ul><h2 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h2><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3.0.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">    template: <span class="string">&#x27;&lt;h1&gt; Hello &#123;&#123;firstName&#125;&#125; &lt;/h1&gt;&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            firstName: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/vvovy0W.png"></p><ul><li>讓文字可以動態呈現使用<code>&#123;&#123;&#125;&#125;</code>雙大括號</li><li>並且內部包裹住data()函式return的物件名稱firstName(特別注意data是函式)</li><li>最後使用mount推上HTML</li></ul><h2 id="範例三"><a href="#範例三" class="headerlink" title="範例三"></a>範例三</h2><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> Hello &#123;&#123;firstName&#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3.0.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            firstName: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/vvovy0W.png"></p><ul><li>把template移動到html內會有一樣的效果</li></ul><h3 id="移動template到-lt-div-gt-app外面"><a href="#移動template到-lt-div-gt-app外面" class="headerlink" title="移動template到&lt;div&gt;app外面"></a>移動template到<code>&lt;div&gt;app</code>外面</h3><p>則沒有任何效果只會是純字串</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> Hello &#123;&#123;firstName&#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> Hello &#123;&#123;firstName&#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3.0.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/9JosyV4.png"></p><h1 id="製作一個-user-製造器"><a href="#製作一個-user-製造器" class="headerlink" title="製作一個 user 製造器"></a>製作一個 user 製造器</h1><h2 id="成品"><a href="#成品" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/wxZUUip.gif"></p><p><a href="">成品網址</a></p><h2 id="成品功能"><a href="#成品功能" class="headerlink" title="成品功能:"></a>成品功能:</h2><ol><li>點擊get random user後會出現隨機的人</li><li>包括 全名 大頭貼 email</li><li>男女使用的邊框顏色會切換(男生藍色、女生粉紅)</li></ol><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h2 id="html程式碼"><a href="#html程式碼" class="headerlink" title="html程式碼:"></a>html程式碼:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      &lt;img</span><br><span class="line">        :class=&quot;gender&quot;</span><br><span class="line">        v-bind:src=&quot;picture&quot;</span><br><span class="line">        :alt=&quot;`$&#123;firstName&#125; $&#123;lastName&#125;`&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;firstName&#125;&#125;&#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Email:&#123;&#123;email&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;getUser()&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>Get random User<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3.0.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h2><p>在本篇不是重點不過有興趣可以參照以下網址</p><p><a href="https://codepen.io/bradtraversy/pen/LYbzJjK">CSS part</a></p><h2 id="JS"><a href="#JS" class="headerlink" title="JS:"></a>JS:</h2><ul><li><code>&lt;template&gt;</code></li></ul><ol><li>主要使用在整體頁面的動態文字呈現h1,h3的部分</li></ol><ul><li><code>v-bind</code></li></ul><ol><li>可以在HTML上面做縮寫 冒號後面接上要動態顯示的內容 (ex. :class，需要動態顯示class名稱 )</li><li>使用在動態屬性的呈現上面 <code>&lt;img&gt;</code>的屬性以及<code>&lt;button&gt;</code>的屬性</li></ol><ul><li><p><code>v-on</code><br>監聽點擊事件，當點擊時觸發getUser函式</p></li><li><p><code>getUser()</code></p></li><li><p>使用非同步函式取得<code>fetch(&#39;https://randomuser.me/api/&#39;)</code>後</p></li><li><p>解構取得的results : {results} 並且取用內部資料去填入<code>data()</code>return的結果呈現在HTML上<br><img src="https://i.imgur.com/nnWxdK9.png"></p></li><li><p>藉由取得gender的動態文字來修改邊框顏色</p></li></ul><p><img src="https://i.imgur.com/Ap1zcaE.png"></p><p><img src="https://i.imgur.com/5BYKvej.png"></p><p><img src="https://i.imgur.com/3yxQti2.png"></p><h2 id="JS完整程式碼"><a href="#JS完整程式碼" class="headerlink" title="JS完整程式碼:"></a>JS完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            firstName: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">            lastName: <span class="string">&#x27;Doe&#x27;</span>,</span><br><span class="line">            email: <span class="string">&#x27;john@gmail.com&#x27;</span>,</span><br><span class="line">            gender: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">            picture: <span class="string">&#x27;https://randomuser.me/api/portraits/men/10.jpg&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="title">getUser</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">&#x27;https://randomuser.me/api/&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> &#123;</span><br><span class="line">                results</span><br><span class="line">            &#125; = <span class="keyword">await</span> res.json()</span><br><span class="line">            <span class="built_in">console</span>.log(results);</span><br><span class="line">            <span class="built_in">this</span>.firstName = results[<span class="number">0</span>].name.first,</span><br><span class="line">                <span class="built_in">this</span>.lastName = results[<span class="number">0</span>].name.last,</span><br><span class="line">                <span class="built_in">this</span>.email = results[<span class="number">0</span>].email,</span><br><span class="line">                <span class="built_in">this</span>.gender = results[<span class="number">0</span>].gender</span><br><span class="line">            <span class="built_in">this</span>.picture = results[<span class="number">0</span>].picture.large</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="Vue-CLI-1"><a href="#Vue-CLI-1" class="headerlink" title="Vue CLI"></a>Vue CLI</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>終端機輸入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue&#x2F;cli</span><br></pre></td></tr></table></figure><p>確認是否安裝成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><p>更新內容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm update -g @vue&#x2F;cli</span><br><span class="line"></span><br><span class="line"># OR</span><br><span class="line">yarn global upgrade --latest @vue&#x2F;cli</span><br></pre></td></tr></table></figure><h2 id="使用-GUI"><a href="#使用-GUI" class="headerlink" title="使用 GUI"></a>使用 GUI</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>會開啟app 即可使用但沒辦法自定義一些細節<br><img src="https://i.imgur.com/5fKIQ4G.png"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 名稱自訂(這邊我輸入vue-crash-2021)</span><br></pre></td></tr></table></figure><p>會出現一些問題需要回答:</p><p>這邊作者選擇Maunally select features<br><img src="https://i.imgur.com/jW0ghVg.png"></p><p>可以視專案需求做選擇<br><img src="https://i.imgur.com/vVCw2Mk.png"></p><p>下一步選擇vue.js的版本<br><img src="https://i.imgur.com/YFRho9t.png"></p><p>下一步選擇 In dedicated config files<br><img src="https://i.imgur.com/xb3SfHX.png"></p><p>下一步會詢問是否儲存設定建議選擇N 畢竟每次專案設定不同看需求而定</p><p>接下來我們進入資料夾 cd vue-crash-2021會發現需要的資料都已經載入</p><p><img src="https://i.imgur.com/hyCcMPd.png"></p><p>下一步使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/eXlTVHv.png"></p><p>就可以成功叫出來瞜!<br><img src="https://i.imgur.com/fnsycfI.png"></p><hr><h4 id="方法二內容物介紹"><a href="#方法二內容物介紹" class="headerlink" title="方法二內容物介紹"></a>方法二內容物介紹</h4><p>index.html</p><ul><li>就是剛剛看到個landing page</li><li>並且紅框處app的功能都會呈現在裡面</li></ul><p><img src="https://i.imgur.com/y7rBHbP.png"></p><p>main.js</p><ul><li>這邊是匯集程式碼的地方</li><li>會有import在裡面</li><li>會有App來源的位置</li><li>並且把App的內容呈現到DOM上</li></ul><p><img src="https://i.imgur.com/9zGMsqS.png"></p><p>App.vue</p><p>這個部分就跟上面簡介處介紹的一樣<a href="#Basic-Layout-of-Component">Basic-Layout-of-Component</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img alt=<span class="string">&quot;Vue logo&quot;</span> src=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span><br><span class="line">  &lt;HelloWorld msg=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="作者推薦"><a href="#作者推薦" class="headerlink" title="作者推薦"></a>作者推薦</h1><p>setting 修改讓emmet能在vue使用<br><img src="https://i.imgur.com/BcFcHQx.png"></p><p>安裝highlight 套件 才不會程式碼都沒有顏色區別<br><img src="https://i.imgur.com/DIJOz4g.png"></p><h1 id="製作一個-任務追蹤器"><a href="#製作一個-任務追蹤器" class="headerlink" title="製作一個 任務追蹤器"></a>製作一個 任務追蹤器</h1><h2 id="成品-1"><a href="#成品-1" class="headerlink" title="成品:"></a>成品:</h2><p><a href="">成品網址</a></p><h2 id="成品功能-1"><a href="#成品功能-1" class="headerlink" title="成品功能:"></a>成品功能:</h2><h2 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h2><h2 id="html程式碼-1"><a href="#html程式碼-1" class="headerlink" title="html程式碼:"></a>html程式碼:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS:"></a>CSS:</h2><h2 id="CSS完整程式碼"><a href="#CSS完整程式碼" class="headerlink" title="CSS完整程式碼"></a>CSS完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JS-1"><a href="#JS-1" class="headerlink" title="JS:"></a>JS:</h2><h2 id="變數設置"><a href="#變數設置" class="headerlink" title="變數設置"></a>變數設置</h2><h2 id="functions"><a href="#functions" class="headerlink" title="functions:"></a>functions:</h2><h2 id="JS完整程式碼-1"><a href="#JS完整程式碼-1" class="headerlink" title="JS完整程式碼:"></a>JS完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;簡介&quot;&gt;&lt;a href=&quot;#簡介&quot; class=&quot;headerlink&quot; title=&quot;簡介&quot;&gt;&lt;/a&gt;簡介&lt;/h1&gt;&lt;h2 id=&quot;What-is-Vue&quot;&gt;&lt;a href=&quot;#What-is-Vue&quot; class=&quot;headerlink&quot; title=&quot;Wha</summary>
      
    
    
    
    <category term="Vue3" scheme="http://example.com/categories/Vue3/"/>
    
    
    <category term="Vue3" scheme="http://example.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Vue-文件閱讀 part 2- The Vue Instance(5000字)</title>
    <link href="http://example.com/2021/03/24/Vue.js%20%E6%96%87%E4%BB%B6%E9%96%B1%E8%AE%80%20part%202-%20The%20Vue%20Instance/"/>
    <id>http://example.com/2021/03/24/Vue.js%20%E6%96%87%E4%BB%B6%E9%96%B1%E8%AE%80%20part%202-%20The%20Vue%20Instance/</id>
    <published>2021-03-24T04:27:12.000Z</published>
    <updated>2021-04-04T16:29:28.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="創造Vue實體-Creating-a-Vue-Instance"><a href="#創造Vue實體-Creating-a-Vue-Instance" class="headerlink" title="創造Vue實體 (Creating a Vue Instance)"></a>創造Vue實體 (Creating a Vue Instance)</h1><ul><li>所有的Vue app 都會從創造實例(Instance)開始</li><li>裡面的options處就是我們操作的地方，可以瀏覽<a href="https://vuejs.org/v2/api/#Options-Data"> API reference</a>來做操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// options</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>一個Vue app通常會有會有個root Vue instance由new Vue產生</li><li>伴隨著的是巢狀的樹組成的component，它具有可重複使用的特性</li><li>在ROOT下面的都是component的部分</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Root Instance</span><br><span class="line">└─ TodoList</span><br><span class="line">   ├─ TodoItem </span><br><span class="line">   │  ├─ TodoButtonDelete</span><br><span class="line">   │  └─ TodoButtonEdit</span><br><span class="line">   └─ TodoListFooter</span><br><span class="line">      ├─ TodosButtonClear</span><br><span class="line">      └─ TodoListStatistics</span><br></pre></td></tr></table></figure><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:#app,</span><br><span class="line">    data: &#123;</span><br><span class="line">    product: <span class="string">&quot;Socks&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; product &#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>app使用el連接到html檔案內部的id = “app”的div</li><li>連結app內的data: poduct到html上</li><li>藉由改變index.js 內 product的內容可以及時修改html內的的內容</li></ul><p>呈現在網頁上的結果<br><img src="https://i.imgur.com/Q0nZBMD.png"></p><p>藉著改變屬性也可以及時修改頁面內容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.product = <span class="string">&#x27;Coat&#x27;</span></span><br><span class="line"><span class="comment">//印出結果變成Coat</span></span><br><span class="line"></span><br><span class="line">app.product = <span class="string">&quot;Compass&quot;</span></span><br><span class="line"><span class="comment">//印出結果變成Compass</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ZtJ5TBm.png"></p><p><img src="https://i.imgur.com/tvzMv4N.png"></p><h1 id="資料與方法-Data-and-Methods"><a href="#資料與方法-Data-and-Methods" class="headerlink" title="資料與方法(Data and Methods)"></a>資料與方法(Data and Methods)</h1><h2 id="data"><a href="#data" class="headerlink" title="$data"></a>$data</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">            msg: <span class="string">&#x27;123123&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data,</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>這兩個是相同的結果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm.$data === data   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">data.msg === vm.msg  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>因此當我們操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.msg =<span class="number">456</span></span><br><span class="line">vm.msg = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>畫面也會如此響應</p><p>但是如果使用不存在的屬性時畫面則不會響，得使用不同的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.b = <span class="string">&#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure><p>但是如果你知道可能稍後會有屬性會使用到，但目前得空著或是還未存在，因此就必須設預設值</p><p>比方說要規畫一個todoList app可能會使用到的data:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  newTodoText: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  visitCount: <span class="number">0</span>,</span><br><span class="line">  hideCompletedTodos: <span class="literal">false</span>,</span><br><span class="line">  todos: [],</span><br><span class="line">  error: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h2><p>可以關閉reative，讓畫面不被響應</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">            msg: <span class="string">&#x27;hello Vue&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">            data,</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>在這個情況下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.msg =<span class="number">456</span></span><br><span class="line">vm.msg = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>畫面也不會有任何響應</p><p>並vm也會變成只能讀不能寫<br><img src="https://i.imgur.com/IBZOEP4.png"></p><h2 id="前綴API"><a href="#前綴API" class="headerlink" title="$前綴API"></a>$前綴API</h2><p>$這個符號代表Vue提供給我們的功能<br>如<br>$data,<br>$el,<br>$watch等等</p><p><a href="https://vuejs.org/v2/api/#Instance-Properties">Instance Properties</a></p><h1 id="生命週期裝置實例-Instance-Lifecycle-Hooks"><a href="#生命週期裝置實例-Instance-Lifecycle-Hooks" class="headerlink" title="生命週期裝置實例(Instance Lifecycle Hooks)"></a>生命週期裝置實例(Instance Lifecycle Hooks)</h1><p>到特定的時間就會呼叫特定的函式</p><p>每個Vue實體都會經歷一連串的初始化階段舉例:</p><ol><li>需要設置好data observation</li><li>編譯模板</li><li>把Vue實體推到DOM上</li><li>更新DOM當data被更新</li></ol><p>在這個階段過程中也會跑一些functions被稱為<strong>Lifecycle Hooks</strong>，讓使用者寫自己的程式碼在特定的階段使用</p><h2 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h2><p>當Vue實體已經被創造時，created這個函式可以被使用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// `this` points to the vm instance</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a is: &#x27;</span> + <span class="built_in">this</span>.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; &quot;a is: 1&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/kCZ5wYN.png"></p><p>在不同的階段還有其他的hooks會被呼叫例如:</p><p>所有的hook指向調用它的實體</p><ul><li>mounted</li><li>updated</li><li>destroyed</li></ul><h2 id="作者提醒"><a href="#作者提醒" class="headerlink" title="作者提醒"></a>作者提醒</h2><p>千萬不要使用箭頭函式在Vue實體，因為箭頭函示沒有this常常會導致報錯</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot read property of undefined </span><br><span class="line">Uncaught TypeError: this.myMethod is not a function</span><br></pre></td></tr></table></figure><p>使用一般的函式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            data: &#123;</span><br><span class="line">                a: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>才能印出 Vu實體<br><img src="https://i.imgur.com/utK0icf.png"></p><p>使用箭頭函式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            data: &#123;</span><br><span class="line">                a: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            created: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>只會印出外層的windows<br><img src="https://i.imgur.com/yZu3ut0.png"></p><h2 id="Lifecycle-Diagram"><a href="#Lifecycle-Diagram" class="headerlink" title="Lifecycle Diagram"></a>Lifecycle Diagram</h2><p>從上方那張圖可以得知hook如下:</p><p><strong>beforeCreate</strong><br>Vue實體初始化後立刻呼叫此函式，不過此時Vue實體還未創建所以其中的設定都還未能使用(如data observation, event, watcher setup)</p><p><strong>created</strong><br>Vue實例創建完成後立刻呼叫此函式，已設置 data, computed properties, methods, watch/event callbacks，但尚未開始mounting階段，且 $el 還不能在此階段使用。</p><p><strong>beforeMount</strong><br>在mounting階段開始前被調用：render function首次被調用。</p><p>mounted<br>選項物件中的el被新創建的vm.$el替換，並掛載到到 vm 上，並調用mounted這個鉤子。</p><p>beforeUpdate<br>數據被更新時會調用，發生在 Virtual DOM re-render 和 patch 之前(連結：Day4: Virtual DOM)，可以在此時更改狀態數據，並不會增加重新渲染的成本。</p><p>updated<br>由於數據更新導致 Virtual DOM re-render 和 patch 之後會調用updated這個鉤子。</p><p>不精確白話文為：由於updated被調用時，DOM 已經更新。所以在此時更新數據很可能會導致updated無限循環的被調用。</p><p>beforeDestroy<br>在 Vue Instance 被銷毀前被調用，因此 Vue Instance 在beforeDestroy中仍可運作。</p><p>不精確白話文為：Vue Instance 可以在此時做垂死前的掙扎。</p><p>destroyed<br>在 Vue Instance 被銷毀後被調用，此時 Vue Instance 所有東西會解除綁定，事件監聽也都會被移除，子實例也會被銷毀。</p><h1 id="模板語法-Template-Syntax"><a href="#模板語法-Template-Syntax" class="headerlink" title="模板語法(Template Syntax)"></a>模板語法(Template Syntax)</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;創造Vue實體-Creating-a-Vue-Instance&quot;&gt;&lt;a href=&quot;#創造Vue實體-Creating-a-Vue-Instance&quot; class=&quot;headerlink&quot; title=&quot;創造Vue實體 (Creating a Vue Instan</summary>
      
    
    
    
    <category term="Vue2" scheme="http://example.com/categories/Vue2/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-文件閱讀 part 1- Introduction + Installation(5000字)</title>
    <link href="http://example.com/2021/03/22/Vue.js%20%E6%96%87%E4%BB%B6%E9%96%B1%E8%AE%80%20part%201-%20Introduction%20+%20Installation/"/>
    <id>http://example.com/2021/03/22/Vue.js%20%E6%96%87%E4%BB%B6%E9%96%B1%E8%AE%80%20part%201-%20Introduction%20+%20Installation/</id>
    <published>2021-03-22T12:27:12.000Z</published>
    <updated>2021-04-04T16:29:35.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="簡介-Introduction"><a href="#簡介-Introduction" class="headerlink" title="簡介(Introduction)"></a>簡介(Introduction)</h1><h2 id="Vue-js是什麼"><a href="#Vue-js是什麼" class="headerlink" title="Vue.js是什麼?"></a>Vue.js是什麼?</h2><ul><li>一個用來搭建使用者介面的框架<blockquote><p>框架(Framework)：由包含各種功能與開發規則的函數庫組成。我們可以利用其提供的功能加速開發，不必從零開始；而其開發規則通常是經過驗證的良好開發方法，只要follow它，就可以避免很多問題與錯誤。因此框架通常有著加速開發並易於維護的特性。</p></blockquote></li><li>在MVVM的架構下以視圖(view layer)為核心的網頁介面(Web UI)開發方法</li><li>容易上手並且容易整合進其他的資料庫或是其他的現存的專案</li><li>可以完美的強化單頁應用程式是(SPA)藉著一些<a href="https://vuejs.org/v2/guide/single-file-components.html">現代工具</a>以及<a href="https://github.com/vuejs/awesome-vue#components--libraries">輔助使用的資料庫</a></li></ul><p><a href="https://www.vuemastery.com/courses/intro-to-vue-js/vue-instance/">影片學習 - Intro to Vue 2</a></p><script async src="//jsfiddle.net/chiehLiu/80nLrhmp/embed/"></script><h1 id="安裝使用-Getting-Started"><a href="#安裝使用-Getting-Started" class="headerlink" title="安裝使用(Getting Started)"></a>安裝使用(Getting Started)</h1><blockquote><p>這份官方手冊需要有HTML, CSS, and JavaScript基本知識必較容易讀懂<br>有其他框架使用經驗也有幫助</p></blockquote><h2 id="相容性指示-Compatibility-Note"><a href="#相容性指示-Compatibility-Note" class="headerlink" title="相容性指示(Compatibility Note)"></a>相容性指示(Compatibility Note)</h2><ul><li>Vue不支援IE8甚至更低的版本</li><li>因為Vue使用ECMAScript 5 features但IE8不支援</li></ul><p><img src="https://i.imgur.com/TWcuTRw.png"></p><h2 id="語意化的版本控制"><a href="#語意化的版本控制" class="headerlink" title="語意化的版本控制"></a>語意化的版本控制</h2><p>簡單來說就讓版本名稱具有意義好辨識並且達成共識，避免相容性出現問題</p><p><a href="https://semver.org/lang/zh-TW/">語意化版本</a></p><h2 id="最新版本釋出"><a href="#最新版本釋出" class="headerlink" title="最新版本釋出"></a>最新版本釋出</h2><p><a href="https://github.com/vuejs/vue/releases">最新版本 Github</a></p><h2 id="Vue-開發工具-Vue-Devtools"><a href="#Vue-開發工具-Vue-Devtools" class="headerlink" title="Vue 開發工具(Vue Devtools)"></a>Vue 開發工具(Vue Devtools)</h2><p>相當推薦使用在一個使用者友善介面下，可以更好的檢視你的作品以及幫忙debug</p><p><a href="https://github.com/vuejs/vue-devtools#vue-devtools">Vue Devtools Github</a></p><h2 id="使用-lt-script-gt-引入使用Vue"><a href="#使用-lt-script-gt-引入使用Vue" class="headerlink" title="使用&lt;script&gt;引入使用Vue"></a>使用<code>&lt;script&gt;</code>引入使用Vue</h2><p>建議開發的時候引入Development Version才不會省略掉一些常見的錯誤訊息</p><p><img src="https://i.imgur.com/Wsi9NjJ.png"></p><h2 id="內容傳遞網路-CDN-Content-delivery-network"><a href="#內容傳遞網路-CDN-Content-delivery-network" class="headerlink" title="內容傳遞網路 (CDN - Content delivery network)"></a>內容傳遞網路 (CDN - Content delivery network)</h2><p>作為原型或是學習使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要用在產品身上則推薦使用特定的版本，因為最新版本可能尚未完善</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用原生ES Module相容的版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.esm.browser.js&#x27;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以從此處瀏覽原始碼</p><p><a href="https://cdn.jsdelivr.net/npm/vue/">NPM package 原始碼</a></p><p><a href="https://unpkg.com/vue@2.6.12/dist/vue.js">unpkg</a></p><p><a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.js">cdnjs (最新版本有可能會比較慢登上這邊)</a></p><h3 id="小提醒"><a href="#小提醒" class="headerlink" title="小提醒"></a>小提醒</h3><p>在你要發布的網站上面可以使用<code>vue.min.js</code>取代<code>vue.j</code>可以優化檔案大小以及執行速度</p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>當要使用在大型規模的app時推薦使用NPM，因為可以跟<a href="https://webpack.js.org/">Webpack</a> or <a href="http://browserify.org/">Browserify</a>相容的很好，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># latest stable</span><br><span class="line">$ npm install vue</span><br></pre></td></tr></table></figure><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><p>使用官方CLI需要一些node.js的相關知識</p><p><a href="https://cli.vuejs.org/">Vue CLI 官網</a></p><p><a href="https://www.vuemastery.com/courses/real-world-vue-js/vue-cli/">CLI 影片教學</a></p><h2 id="Explanation-of-Different-Builds"><a href="#Explanation-of-Different-Builds" class="headerlink" title="Explanation of Different Builds"></a>Explanation of Different Builds</h2><p>在<a href="https://cdn.jsdelivr.net/npm/vue/">NPM package 原始碼</a> dist/處有很多不同的builds下方是他們的不同之處:</p><table><thead><tr><th></th><th>UMD</th><th>CommonJS</th><th>ES Module (for bundlers)</th><th>ES Module (for browsers)</th></tr></thead><tbody><tr><td><strong>Full</strong></td><td>vue.js</td><td>vue.common.js</td><td>vue.esm.js</td><td>vue.esm.browser.js</td></tr><tr><td><strong>Runtime-only</strong></td><td>vue.runtime.js</td><td>vue.runtime.common.js</td><td>vue.runtime.esm.js</td><td>-</td></tr><tr><td><strong>Full (production)</strong></td><td>vue.min.js</td><td>-</td><td>-</td><td>vue.esm.browser.min.js</td></tr><tr><td><strong>Runtime-only (production)</strong></td><td>vue.runtime.min.js</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><h3 id="名詞解釋-Term"><a href="#名詞解釋-Term" class="headerlink" title="名詞解釋(Term)"></a>名詞解釋(Term)</h3><ul><li><p>Full: 包含Compiler, Runtime</p></li><li><p>Compiler: 負責編譯模板字版進去JS呈現相關的函式</p></li><li><p>Runtime: 負責Vue instances, 呈現以及修補 virtual DOM(基本上處理Compiler以下的事情)</p></li><li><p>UMD: UMD相關的builds可以直接使用在瀏覽器下藉著<code>&lt;script&gt;</code>tag<br>UMD (Universal Module Definition)，就是一種javascript通用模塊定義規範，讓你的模塊能在javascript所有運行環境中發揮作用。</p></li><li><p>CommonJS: 給browserify or webpack使用</p></li><li><p>ES Module: </p></li></ul><p>2.6Vue版本後才開始提供下面兩種builds</p><ol><li>ESM for bundlers: 給webpack 2 or Rollup使用</li><li>ESM for browsers (2.6+ only): 直接引入現代的瀏覽器使用<code>&lt;script type=&quot;module&quot;&gt;</code></li></ol><h1 id="宣告式渲染-Declarative-Rendering"><a href="#宣告式渲染-Declarative-Rendering" class="headerlink" title="宣告式渲染(Declarative Rendering)"></a>宣告式渲染(Declarative Rendering)</h1><blockquote><p>Vue.js的核心藉著好理解的模板語法讓使用者把資料呈現到DOM上面</p></blockquote><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">// 抓取哪邊的DOM</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Hello Vue!&#x27;</span> <span class="comment">// 此處是要呈現的內容</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出 Hello Vue!</span></span><br><span class="line"></span><br><span class="line">app.message = <span class="string">&#x27;I have changed the data!&#x27;</span></span><br><span class="line"><span class="comment">// 輸出 I have changed the data</span></span><br></pre></td></tr></table></figure><p><a href="https://scrimba.com/scrim/cQ3QVcr?pl=pXKqta">影片說明Hello Vue!</a></p><ul><li>資料以及DOM已經做了連結並且是隨時反應的<br>ex. app.message修改內容後輸出內容也會即時更改</li><li>不需要再跟HTML互動，直接在Vue instance就可以操作DOM</li></ul><h2 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h2><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    Hover your mouse over me for a few seconds</span><br><span class="line">    to see my dynamically bound title!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-2&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;You loaded this page on &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ItiTipU.gif"></p><p>當hover的時候在當前的string會顯示 字串+載入日期時間</p><ul><li><code>v-bind</code></li></ul><p>這個有v前墜屬性被稱做指示(directive)，是Vue提供使用的，而這個v-bind的用法在於讓這個title的屬性隨著message屬性作同步修在Vue instance上面</p><p>所以當我使用下面的方法時，title的屬性也會及時更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app2.message = <span class="string">&#x27;some new message&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="條件式以及迴圈-Conditionals-and-Loops"><a href="#條件式以及迴圈-Conditionals-and-Loops" class="headerlink" title="條件式以及迴圈(Conditionals and Loops)"></a>條件式以及迴圈(Conditionals and Loops)</h1><h2 id="條件式"><a href="#條件式" class="headerlink" title="條件式"></a>條件式</h2><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>Now you see me<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-3&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    seen: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>v-if</code></li></ul><p>可以理解成 v-if後方的文字必須為true(然而是否為true則要去看js程式碼如何操作)，才會讓span內的文字被看見</p><p><img src="https://i.imgur.com/SjH0Sk5.png">   </p><p>因此當判斷式內容改成flase時，就看不見文字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app-<span class="number">3.</span>seen = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h2><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app4 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-4&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;Build something awesome&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>v-for</code></li></ul><p>可以用來製作清單類型的呈現</p><p><img src="https://i.imgur.com/AimG2bx.png"></p><p>如果想要再加入新的清單可以這樣做</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app4.todos.push(&#123; <span class="attr">text</span>: <span class="string">&#x27;New item&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h1 id="處理使用者的輸入-Handling-User-Input"><a href="#處理使用者的輸入-Handling-User-Input" class="headerlink" title="處理使用者的輸入(Handling User Input)"></a>處理使用者的輸入(Handling User Input)</h1><h2 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h2><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;reverseMessage&quot;</span>&gt;</span>Reverse Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reverseMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message = <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>v-on:click</code></li></ul><p>跟使用者互動藉由v-on 指示來連接事件監聽click並觸發函式來處理</p><p>點擊按鈕後把文字順序反過來</p><p><img src="https://i.imgur.com/ETYNgvk.png"></p><p><img src="https://i.imgur.com/pEqBa79.png"></p><h1 id="建構組件-Composing-with-Components"><a href="#建構組件-Composing-with-Components" class="headerlink" title="建構組件(Composing with Components)"></a>建構組件(Composing with Components)</h1><p>為了建構大型專案藉著拆分成不同的小組件的優點</p><ul><li>可重複利用</li><li>是獨立的組件</li><li>容量小</li></ul><p><img src="https://i.imgur.com/tbekM4J.png"></p><h2 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h2><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義一個新的組件 todo-item</span></span><br><span class="line">Vue.component(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;li&gt;This is a todo&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(...)</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先在js先撰寫組件todo-item後就可以在html裡面直接使用</p><h2 id="範例二-1"><a href="#範例二-1" class="headerlink" title="範例二"></a>範例二</h2><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;todo&#x27;</span>],</span><br><span class="line">  template: <span class="string">&#x27;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app7 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app-7&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    groceryList: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">&#x27;Vegetables&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;Cheese&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;Whatever else humans are supposed to eat&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-7&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    &lt;todo-item</span><br><span class="line">      v-for=&quot;item in groceryList&quot;</span><br><span class="line">      v-bind:todo=&quot;item&quot;</span><br><span class="line">      v-bind:key=&quot;item.id&quot;</span><br><span class="line">    &gt;<span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>首先於component處新增<code>porp</code>是一個可以客製化的屬性並命名todo</li><li>介下來使用<code>v-bind</code>讓文字可以被動態的傳入DOM同時傳入key的部分會在後面章節作解釋</li><li>並且使用<code>v-for</code>製作清單列表</li></ul><p><img src="https://i.imgur.com/OmEZP4f.png"></p><hr><p>在大型專案中把內部的app做拆分是必要的，讓開發過程容易管理，下面程式碼是個範例說明比較多組件且複雜的html長相</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-nav</span>&gt;</span><span class="tag">&lt;/<span class="name">app-nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-sidebar</span>&gt;</span><span class="tag">&lt;/<span class="name">app-sidebar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-content</span>&gt;</span><span class="tag">&lt;/<span class="name">app-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">app-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="與自定義元素的關係-Relation-to-Custom-Elements"><a href="#與自定義元素的關係-Relation-to-Custom-Elements" class="headerlink" title="與自定義元素的關係(Relation to Custom Elements)"></a>與自定義元素的關係(Relation to Custom Elements)</h1><ul><li><p>Vue的組件非常類似於<a href="https://developers.google.com/web/fundamentals/web-components">Custom Elements</a></p></li><li><p>舉例說明<br>Vue組件執行<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/slot">Slot API</a> 以及 <a href="https://v3.vuejs.org/api/special-attributes.html#is">is</a> 特殊屬性</p></li></ul><blockquote><p>Slot是存在web component内部的占位符，用户可以通過slot屬性在web component的内部插入自定義的標記文本。</p></blockquote><ul><li>不同之處</li></ul><ol><li>Web Components規範已經完成通過但是依舊沒有被所有瀏覽器支援<br>(目前 Safari 10.1+、Chrome 54+ 和 Firefox 63+ 原生支持 Web Components)</li><li>Vue 组件不需要任何 polyfill，並且支援所有瀏覽器 (IE9以下不支援)，必要時Vue组件也可以包裝於原生自定義元素之内</li></ol><blockquote><p>polyfill代指為舊瀏覽器實現或模擬現有版本已實現之功能的程式碼片段</p></blockquote><ol start="3"><li>Vue 组件提供了Custom Elements沒有的功能，跨组件數據流、自定義事件溝通以及bulid整合工具。</li></ol><ul><li>Vue 並沒有使用Custom Elements，不過在應用以及發布Custom Elements上還是有很好的<a href="https://custom-elements-everywhere.com/#vue">互通性</a>，Vue CLI 也支持 Vue 组件建構成為原生的Custom Elements</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;簡介-Introduction&quot;&gt;&lt;a href=&quot;#簡介-Introduction&quot; class=&quot;headerlink&quot; title=&quot;簡介(Introduction)&quot;&gt;&lt;/a&gt;簡介(Introduction)&lt;/h1&gt;&lt;h2 id=&quot;Vue-js是什麼&quot;&gt;</summary>
      
    
    
    
    <category term="Vue2" scheme="http://example.com/categories/Vue2/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Vue2 Tutorial Part 1</title>
    <link href="http://example.com/2021/03/22/Vue-Vue2%20Tutorial%20Part1/"/>
    <id>http://example.com/2021/03/22/Vue-Vue2%20Tutorial%20Part1/</id>
    <published>2021-03-22T12:27:12.000Z</published>
    <updated>2021-04-21T16:23:46.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-JS-2-Tutorial-part-1"><a href="#Vue-JS-2-Tutorial-part-1" class="headerlink" title="Vue JS 2 Tutorial part 1"></a>Vue JS 2 Tutorial part 1</h1><h6 id="tags-Javascript-Vue-js"><a href="#tags-Javascript-Vue-js" class="headerlink" title="tags: Javascript, Vue.js"></a>tags: <code>Javascript, Vue.js</code></h6><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="What-is-Vue-js"><a href="#What-is-Vue-js" class="headerlink" title="What is Vue.js"></a>What is Vue.js</h2><ul><li>前端框架</li><li>可以創造以JS引擎為主的網頁APP</li><li>在瀏覽器中使用</li><li>不需要為了重整頁面，跑伺服器端</li></ul><h2 id="Why-Vue-js"><a href="#Why-Vue-js" class="headerlink" title="Why Vue.js"></a>Why Vue.js</h2><ul><li>非常輕量</li><li>高執行期表現</li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>建議把script放在body tag內</p><p><a href="https://vuejs.org/v2/guide/installation.html">CDN 連結</a></p><p><img src="https://i.imgur.com/sIy07l3.png"></p><h2 id="Before-You-Start"><a href="#Before-You-Start" class="headerlink" title="Before You Start"></a>Before You Start</h2><p>前置知識:</p><p>JavaScript<br>HTML(&amp;CSS)</p><h1 id="Vue-Instance"><a href="#Vue-Instance" class="headerlink" title="Vue Instance"></a>Vue Instance</h1><p>Vue實體做的事情:</p><ol><li>控制整個app功能或是部分元件的功能</li><li>儲存不同的功能在option裡面像是data, methods</li><li>控制template並呈現在DOM上</li></ol><p>我們使用在html上面的tag並不會直接被使用，而是Vue.js會創造一個template並且是JS的格式並連接我們想要呈現的data並且結果會以html程式碼的方式呈現最後呈現到HTML DOM上面</p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 這個部分就是Vue實體</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">&#x27;Shaun&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/Bk8iiR0.png"></p><h1 id="Data-amp-Methods"><a href="#Data-amp-Methods" class="headerlink" title="Data &amp; Methods"></a>Data &amp; Methods</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">&#x27;Shaun&#x27;</span>,</span><br><span class="line">        job: <span class="string">&#x27;Ninja&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        greet: <span class="function"><span class="keyword">function</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Good&#x27;</span> + time + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;greet(&#39; afternoon&#39;)&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;name: &#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;job: &#123;&#123;job&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>data的操作不需要做<code>this.data.name</code></p><p>而是可以直接取得name或是job</p><p><code>this.name</code><br><code>this.job</code></p><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><ol><li>可以在內部定義函式，並且return 的內容可以包含data</li><li>使用this取得Vue實體後並操作返回的內容</li><li>呼叫的方式<code>&lt;h1&gt;&#123;&#123;greet()&#125;&#125;&lt;/h1&gt;</code>並可以在內部輸入參數</li></ol><ul><li>需要注意的點</li></ul><p>位於Vue實體外面的雙大括號是無法操作的要注意！</p><h1 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h1><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>把資料綁定上特定的html tag讓其可以讀取Vue實體內部的改動</p><p>新增一個website的data內容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">&#x27;Shaun&#x27;</span>,</span><br><span class="line">        job: <span class="string">&#x27;Ninja&#x27;</span>,</span><br><span class="line">        website: <span class="string">&#x27;http://www.google.com&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        greet: <span class="function"><span class="keyword">function</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Good&#x27;</span> + time + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>如果要綁定tag的屬性的話則必須使用v-bind:並且在要使用的data要使用雙引號包裹住</li><li>也可以使用縮寫 :href 這樣使用也可以喔<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Data Binding&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;a v-bind:href&#x3D;&quot;website&quot;&gt;Google&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ul><p>就可以綁訂在a tag上面的屬性搂!(但不只是href可以綁定其他屬性也可以)<br><img src="https://i.imgur.com/KbyOIf1.png"></p><ul><li>這邊示範綁訂在input的value屬性上面並且呈現出data裡面的name的值呈現在DOM上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Data Binding&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;a v-bind:href&#x3D;&quot;website&quot;&gt;Google&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-bind:value&#x3D;&quot;name&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>印出結果會把Shaun 放在value的位置<br><img src="https://i.imgur.com/LqFofet.png"></p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p>如果想要綁定完整的html tag上去DOM上面可以使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;vue-app&quot;</span>&gt;</span><br><span class="line">        &lt;p v-html=<span class="string">&quot;websiteTag&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        websiteTag: <span class="string">&#x27;&lt;a href= &quot;http://www.google.com&quot;&gt;GOOGLEWEBSITE&lt;/a&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>印出結果就會讓a tag 出現在 p tag內部</p><p><img src="https://i.imgur.com/jMKsNA5.png"><br><img src="https://i.imgur.com/Kp9dzFX.png"></p><h1 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h1><h2 id="v-on-click"><a href="#v-on-click" class="headerlink" title="v-on:click"></a>v-on:click</h2><p>使用v-on可以綁定事件，範例處我們使用click當範例:</p><ul><li>當點擊add按鈕，年齡會加一</li><li>當點擊substract按鈕，年齡會減一</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Events&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;add&quot;&gt;Add a Year&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;substract&quot;&gt;Subtract a Year&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p&gt;My age is &#123;&#123;age&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        age: <span class="number">25</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.age++;</span><br><span class="line">        &#125;,</span><br><span class="line">        substract: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.age--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ypn2jza.gif"></p><h3 id="作者提醒"><a href="#作者提醒" class="headerlink" title="作者提醒"></a>作者提醒</h3><ul><li>要特別注意寫在當v-on在呼叫函式的時候，<code>add()</code>，不需要加上括號!!(但要使用參數時，一樣可以使用括號)</li><li>但是使用在tempalte內部的 <code>test()</code> 則要使用括號</li></ul><h2 id="v-on-dblclick"><a href="#v-on-dblclick" class="headerlink" title="v-on:dblclick"></a>v-on:dblclick</h2><ul><li>雙擊按鈕會年齡加10/減10</li></ul><p>這邊不需要再加入新的方法，因此我們修改方法內容加入以參數的方式讓年齡依我們想要的年份更動</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;vue-app&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;Events&lt;/h1&gt;</span><br><span class="line">        &lt;button v-on:click=<span class="string">&quot;add(1)&quot;</span>&gt;Add a Year&lt;/button&gt;</span><br><span class="line">        &lt;button v-on:click=<span class="string">&quot;substract(1)&quot;</span>&gt;Subtract a Year&lt;/button&gt;</span><br><span class="line">        &lt;button v-on:dblclick=<span class="string">&quot;add(10)&quot;</span>&gt;Add a Year&lt;/button&gt;</span><br><span class="line">        &lt;button v-on:dblclick=<span class="string">&quot;substract(10)&quot;</span>&gt;Subtract a Year&lt;/button&gt;</span><br><span class="line">        &lt;p&gt;My age is &#123;&#123;age&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        age: <span class="number">25</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        add: function (inc) &#123;</span><br><span class="line">            <span class="keyword">this</span>.age += inc;</span><br><span class="line">        &#125;,</span><br><span class="line">        substract: function (dec) &#123;</span><br><span class="line">            <span class="keyword">this</span>.age -= dec;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="v-on-mousemove"><a href="#v-on-mousemove" class="headerlink" title="v-on:mousemove"></a>v-on:mousemove</h2><ul><li>可以使用mouse相關的event屬性</li><li>這邊的範例使用offsetX,Y用來取的框內的座標</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot; v-on:mousemove&#x3D;&quot;updateXY&quot;&gt;&#123;&#123;x&#125;&#125;,&#123;&#123;y&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        x: <span class="number">0</span>,</span><br><span class="line">        y: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        updateXY: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.x = event.offsetX;</span><br><span class="line">            <span class="built_in">this</span>.y = event.offsetY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>當<code>console.log(event)</code>可以看到所以mouse相關的屬性可以使用<br><img src="https://i.imgur.com/3lB9wVQ.png"></p><p>輸出滑鼠所在位置座標<br><img src="https://i.imgur.com/pSFM4R2.png"></p><h1 id="Event-Modifiers"><a href="#Event-Modifiers" class="headerlink" title="Event Modifiers"></a>Event Modifiers</h1><p><a href="https://vuejs.org/v2/guide/events.html#Event-Modifiers">官方文件參考</a></p><p><img src="https://i.imgur.com/X1A1HL1.png"></p><h2 id="once"><a href="#once" class="headerlink" title="once"></a>once</h2><ul><li>讓這邊的點擊事件只能觸發一次</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;vue-app&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;Events&lt;/h1&gt;</span><br><span class="line">        &lt;button v-on:click.once=<span class="string">&quot;add(1)&quot;</span>&gt;Add a Year&lt;/button&gt;</span><br><span class="line">        &lt;p&gt;My age is:&#123;&#123;age&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        age: <span class="number">25</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span> (<span class="params">inc</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.age += inc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>點擊按鈕上升到26後就不會再觸發事件<br><img src="https://i.imgur.com/V7lvcr6.png"></p><h2 id="prevent"><a href="#prevent" class="headerlink" title="prevent"></a>prevent</h2><ul><li>避免預設行為發動</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Events&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;button v-on:click.once&#x3D;&quot;add(1)&quot;&gt;Add a Year&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p&gt;My age is:&#123;&#123;age&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;a v-on:click&#x3D;&quot;click&quot; href&#x3D;&quot;https:&#x2F;&#x2F;google.com&quot;&gt;google&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        age: <span class="number">25</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span> (<span class="params">inc</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.age += inc;</span><br><span class="line">        &#125;,</span><br><span class="line">        click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;It&#x27;s been clicked!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>當使用click點擊事件在a tag內部觸發順序如下:</li></ul><ol><li>觸發click事件，警告跳出It’s been clicked!</li><li>a tag的預設行為，事件網頁跳轉會發生</li></ol><ul><li>所以想要避免預設行為的發生可以使用prevent，頁面就不會跳轉到外部頁面搂!</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-on:click.prevent&#x3D;&quot;click&quot; href&#x3D;&quot;https:&#x2F;&#x2F;google.com&quot;&gt;google&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h1 id="Keyboard-Events"><a href="#Keyboard-Events" class="headerlink" title="Keyboard Events"></a>Keyboard Events</h1><p><a href="https://vuejs.org/v2/guide/events.html#Key-Codes">官方文件參考</a></p><p><img src="https://i.imgur.com/kreSfXZ.png"></p><h2 id="keyup"><a href="#keyup" class="headerlink" title="keyup"></a>keyup</h2><ul><li>當input被輸入鍵盤值時觸發事件內部的函式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Keyboard Events&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;label&gt;Name:&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-on:keyup&#x3D;&quot;logName&quot;&gt;</span><br><span class="line">        &lt;label&gt;Age:&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-on:keyup&#x3D;&quot;logAge&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        logName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;you entered your name&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        logAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;you entered your age&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/ZCV1Jou.png"></p><h2 id="enter"><a href="#enter" class="headerlink" title="enter"></a>enter</h2><p>當不需要每次輸入鍵盤值都觸發函式，可以使用enter，只有輸入鍵盤值enter時才會觸發函式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Keyboard Events&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;label&gt;Name:&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-on:keyup.enter&#x3D;&quot;logName&quot;&gt;</span><br><span class="line">        &lt;label&gt;Age:&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-on:keyup.enter&#x3D;&quot;logAge&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>必須輸入鍵盤值enter才會有觸發函式，甚至當input為空只輸入鍵盤值enter也會觸發函式<br><img src="https://i.imgur.com/vfPwOpa.png"></p><h2 id="alt"><a href="#alt" class="headerlink" title="alt"></a>alt</h2><p>使用方法跟enter一樣，但是需要搭配enter使用，必須按住alt + enter才會觸發函式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-on:keyup.alt.enter&#x3D;&quot;logName&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="Two-Way-Data-Binding"><a href="#Two-Way-Data-Binding" class="headerlink" title="Two-Way Data Binding"></a>Two-Way Data Binding</h1><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>使用此directive可以把input的內容輸入到:</p><ol><li>data內部對應的name,age</li><li>呈現到DOM上</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Keyboard Events&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;label&gt;Name:&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;label&gt;Age:&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;age&quot;&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;age&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        age: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        logName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;you entered your name&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        logAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;you entered your age&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>輸出結果<br><img src="https://i.imgur.com/u2zjwvm.gif"></p><h1 id="Computed-Properties"><a href="#Computed-Properties" class="headerlink" title="Computed Properties"></a>Computed Properties</h1><ul><li>可以辨識正在使用的函式(methods無法斷判)</li><li>只會跑當下需要跑的資料</li><li>大多數時候比使用methods更有效率</li></ul><h2 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h2><p><img src="https://i.imgur.com/OOwnMA3.png"></p><p>想要連動，當按下按鈕Add a A時，數字會連動變化<br>A - 1<br>Age + A = 21</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Computed Properties&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;a++&quot;&gt;Add a A&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;b++&quot;&gt;Add a B&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p&gt;A - &#123;&#123;a&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;B - &#123;&#123;b&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;Age + A &#x3D; &#123;&#123;addToA()&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;Age + B &#x3D; &#123;&#123;addToB()&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>這邊使用methods呈現</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        age: <span class="number">20</span>,</span><br><span class="line">        a: <span class="number">0</span>,</span><br><span class="line">        b: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        addToA: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;addToA&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.age;</span><br><span class="line">        &#125;,</span><br><span class="line">        addToB: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;addToB&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.b + <span class="built_in">this</span>.age;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但這時候會發現，雖然我只按了按鈕A卻兩個函式都觸發了</p><p><img src="https://i.imgur.com/Ngq3nB7.png"></p><p>因此我們可以使用computed這個property，把函式包起來，這樣一來Vue.js就會辨識正在使用的函式是哪一個瞜!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        age: <span class="number">20</span>,</span><br><span class="line">        a: <span class="number">0</span>,</span><br><span class="line">        b: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        addToA: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;addToA&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.age;</span><br><span class="line">        &#125;,</span><br><span class="line">        addToB: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;addToB&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.b + <span class="built_in">this</span>.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/6ubsAsj.png"></p><h1 id="Dynamic-CSS-Classes"><a href="#Dynamic-CSS-Classes" class="headerlink" title="Dynamic CSS Classes"></a>Dynamic CSS Classes</h1><h2 id="v-bind-class-簡易介紹版"><a href="#v-bind-class-簡易介紹版" class="headerlink" title="v-bind:class(簡易介紹版)"></a>v-bind:class(簡易介紹版)</h2><p>為了動態的處理CSS class</p><p><code>v-bind:class=&quot;&#123;class名稱 : data內部資料也就是ture/false&#125;&quot;</code></p><p>這邊範例使用點擊事件:</p><ol><li><p>當點擊div時會加上class avaliable</p></li><li><p>再次點擊div時會移除class avaliable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Dynamic CSS&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;Example 1&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;div v-on:click&#x3D;&quot;avaliable &#x3D; !avaliable&quot; v-bind:class&#x3D;&quot;&#123;avaliable:avaliable&#125;&quot;&gt;</span><br><span class="line">            &lt;span&gt;Ryu&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        avaliable: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>簡單的CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.avaliable</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nearby</span> <span class="selector-tag">span</span>:after &#123;</span><br><span class="line">    content: <span class="string">&quot;nearby&quot;</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣使用就可以開關class搂!</p><p><img src="https://i.imgur.com/bFbGv6H.gif"></p><h2 id="v-bind-class-真實使用版"><a href="#v-bind-class-真實使用版" class="headerlink" title="v-bind:class(真實使用版)"></a>v-bind:class(真實使用版)</h2><p>為了避免寫死在html內的template，真實專案中使用的方式會是能夠在JS檔案中做靈活修改的:</p><ul><li>使用呼叫函式的方式<code>&lt;div v-bind:class=&quot;compClasses&quot;&gt;</code></li><li>並在JS程式碼中輸入在computed內部</li><li>compClasses 會返回class所需要的內容，需要修改的話也在這邊執行</li><li>不需要寫死在html內的templat搂!</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Dynamic CSS&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;Example 2&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;nearby &#x3D; !nearby&quot;&gt;Toggle nearby&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;avaliable &#x3D; !avaliable&quot;&gt;Toggle avaliable&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;div v-bind:class&#x3D;&quot;compClasses&quot;&gt;</span><br><span class="line">            &lt;span&gt;Ryu&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        avaliable: <span class="literal">false</span>,</span><br><span class="line">        nearby: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        compClasses: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                avaliable: <span class="built_in">this</span>.avaliable,</span><br><span class="line">                nearby: <span class="built_in">this</span>.nearby</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>簡易CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.avaliable</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nearby</span> <span class="selector-tag">span</span>:after &#123;</span><br><span class="line">    content: <span class="string">&quot;nearby&quot;</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/YACJVvA.gif"></p><h1 id="Conditionals"><a href="#Conditionals" class="headerlink" title="Conditionals"></a>Conditionals</h1><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>當<code>v-if=&quot;內容&quot;</code>，內容處布林值為true時會顯示內容，false則否</p><p>使用<code>v-on:click=&quot;error = !error&quot;</code>達到開關的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Conditionals&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;error &#x3D; !error&quot;&gt;Toggle Error&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button v-on:click&#x3D;&quot;sucess &#x3D; !sucess&quot;&gt;Toggle Sucess&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;p v-if&#x3D;&quot;error&quot;&gt;There has been an error&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        error: <span class="literal">false</span>,</span><br><span class="line">        sucess: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>印出結果，當點擊按鈕時下方p tag內文字會出現<br><img src="https://i.imgur.com/1L73zlW.png"></p><h2 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-if&#x3D;&quot;error&quot;&gt;There has been an error&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p v-else-if&#x3D;&quot;sucess&quot;&gt;There has been an sucess&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>當出現v-if以及v-else-if時，只要v-if的狀態是true，那麼就不會顯示else-if的部分跟JS的判斷式一樣</p><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>做的事情跟v-if幾乎一樣但是差別在於:</p><p>當內容布林值顯示為false時</p><ul><li>v-if<br>會把元素完全移除掉</li></ul><p><img src="https://i.imgur.com/DPGj6Ut.png"></p><ul><li>v-show<br>只會呈現display:none</li></ul><p><img src="https://i.imgur.com/3WNQH7C.png"></p><h1 id="Looping-with-v-for"><a href="#Looping-with-v-for" class="headerlink" title="Looping with v-for"></a>Looping with v-for</h1><h2 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h2><p>逐一印出data內容，範例以ul表單為例:</p><p><code>v-for=&quot;chracter in characters&quot;</code></p><ul><li>這個部分的chracter可以名稱自訂</li><li>characters這個部分就需要對照data內部</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Looping through lists&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;chracter in characters&quot;&gt;&#123;&#123;chracter&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        characters: [<span class="string">&#x27;Mario&#x27;</span>, <span class="string">&#x27;Luigi&#x27;</span>, <span class="string">&#x27;Yoshi&#x27;</span>, <span class="string">&#x27;Bowser&#x27;</span>]</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/NmkvMCC.png"></p><h2 id="物件"><a href="#物件" class="headerlink" title="物件"></a>物件</h2><p>可以使用 (.)的方式去取得物件的屬性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;ninja in ninjas&quot;&gt;</span><br><span class="line">                &#123;&#123;ninja.name&#125;&#125; - &#123;&#123;ninja.age&#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        ninjas: [&#123;</span><br><span class="line">                name: <span class="string">&#x27;Ryu&#x27;</span>,</span><br><span class="line">                age: <span class="number">25</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&#x27;Yoshi&#x27;</span>,</span><br><span class="line">                age: <span class="number">35</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&#x27;Ken&#x27;</span>,</span><br><span class="line">                age: <span class="number">55</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/y6FfHFH.png"></p><h2 id="輸出index"><a href="#輸出index" class="headerlink" title="輸出index"></a>輸出index</h2><p>把index嵌入template中即可</p><p>使用在陣列或是物件的<code>v-for</code>都是可行的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(chracter, index) in characters</span><br><span class="line">(ninja, index) in ninjas</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;(chracter, index) in characters&quot;&gt;&#123;&#123;index&#125;&#125; . &#123;&#123;chracter&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;(ninja, index) in ninjas&quot;&gt;</span><br><span class="line">                &#123;&#123;index&#125;&#125; . &#123;&#123;ninja.name&#125;&#125; - &#123;&#123;ninja.age&#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/4g2N7Zv.png"></p><h2 id="使用li以外的容器包裹住v-for的內容"><a href="#使用li以外的容器包裹住v-for的內容" class="headerlink" title="使用li以外的容器包裹住v-for的內容"></a>使用li以外的容器包裹住v-for的內容</h2><h3 id="用div包裹住h3-p"><a href="#用div包裹住h3-p" class="headerlink" title="用div包裹住h3,p"></a>用div包裹住h3,p</h3><p>使用div一樣可以做出li一樣的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;(ninja, index) in ninjas&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123;index&#125;&#125;. &#123;&#123;ninja.name&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;ninja.age&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/IGhcAv5.png"></p><h3 id="如果只想要內容物的h3-p-tag"><a href="#如果只想要內容物的h3-p-tag" class="headerlink" title="如果只想要內容物的h3,p tag"></a>如果只想要內容物的h3,p tag</h3><p>可以改用template tag就不會輸出到DOM上面，而只有包在裡面的內容會被輸出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-for&#x3D;&quot;(ninja, index) in ninjas&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123;index&#125;&#125;. &#123;&#123;ninja.name&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;ninja.age&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/RMsiKQL.png"></p><h2 id="直接印出key-value而不用透過"><a href="#直接印出key-value而不用透過" class="headerlink" title="直接印出key,value而不用透過(.)"></a>直接印出key,value而不用透過(.)</h2><ol><li>第一次的v-for就正常發揮</li><li>第二次的v-for則是印出每一個ninja的key,value</li><li>把第二次的結果呈現在DOM上</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-for&#x3D;&quot;ninja in ninjas&quot;&gt;</span><br><span class="line">            &lt;div v-for&#x3D;&quot;(val,key) in ninja&quot;&gt;</span><br><span class="line">                &lt;p&gt;&#123;&#123;key&#125;&#125; - &#123;&#123;val&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>印出結果所有的 key-value pair<br><img src="https://i.imgur.com/Mzus47P.png"></p><h1 id="Simple-Punchbag-Game"><a href="#Simple-Punchbag-Game" class="headerlink" title="Simple Punchbag Game"></a>Simple Punchbag Game</h1><h2 id="成品"><a href="#成品" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/ID11yOe.png"></p><p><a href="https://chiehliu.github.io/git-projects/Vue.js-Ninja/index.html">成品網址</a></p><h2 id="成品功能"><a href="#成品功能" class="headerlink" title="成品功能:"></a>成品功能:</h2><ol><li>點擊Punch會讓沙包的血條扣寫扣到底時沙包會破掉</li><li>點擊Restart會隨時把沙包的狀態更新回100%血量</li></ol><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ul><li><p>bag image<br>使用v-bind綁定class當ended為true時，會給div加class=burst，就會更換成破掉的沙袋</p></li><li><p>bag health<br>使用v-bind綁定<code>style&quot;&#123; width: health + &#39;%&#39;&#125;&quot;</code>讓血量可以隨health的數量移動</p></li><li><p>game controls</p></li></ul><ol><li>使用v-on:click綁定兩個按並分別觸發punch, restart</li><li>Punch的部分特別使用v-show當內容為true時會秀出(沙袋還沒破)，破的時候按鈕消失(內容變成false)</li></ol><h3 id="html程式碼"><a href="#html程式碼" class="headerlink" title="html程式碼:"></a>html程式碼:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!-- bag image --&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;bag&quot; v-bind:class&#x3D;&quot;&#123;burst: ended&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- bag health  --&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;bag-health&quot;&gt;</span><br><span class="line">            &lt;div v-bind:style&#x3D;&quot;&#123; width: health + &#39;%&#39;&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!-- game controls --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div id&#x3D;&quot;controls&quot;&gt;</span><br><span class="line">            &lt;button v-on:click&#x3D;&quot;punch&quot; v-show&#x3D;&quot;!ended&quot;&gt;Punch&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;button v-on:click&#x3D;&quot;restart&quot;&gt;Restart&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h2><h3 id="CSS完整程式碼"><a href="#CSS完整程式碼" class="headerlink" title="CSS完整程式碼"></a>CSS完整程式碼</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#bag</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/bag.png</span>) center no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#bag</span><span class="selector-class">.burst</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/bag-burst.png</span>) center no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#bag-health</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#bag-health</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: crimson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#controls</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS"><a href="#JS" class="headerlink" title="JS:"></a>JS:</h2><h3 id="vue-app"><a href="#vue-app" class="headerlink" title="vue-app"></a>vue-app</h3><ul><li><p>el: 抓取整個外框</p></li><li><p>data:<br>設置</p></li></ul><ol><li>health: 100</li><li>ended: false 預設式false，因為要血條歸零才會顯示true</li></ol><ul><li>methods:</li></ul><p>punch: </p><ol><li>使用this抓取#vue-app實體後讓其health -= 10也就是每執行一次扣10點</li><li>設置if判斷如果health等於或小於零則讓ended為true</li></ol><p>restart:</p><ol><li>使用this抓取#vue-app實體後讓其health重新賦值100</li><li>並且把ended回復成false</li></ol><h3 id="JS完整程式碼"><a href="#JS完整程式碼" class="headerlink" title="JS完整程式碼:"></a>JS完整程式碼:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        health: <span class="number">100</span>,</span><br><span class="line">        ended: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        punch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.health -= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.health &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.ended = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        restart: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.health = <span class="number">100</span>;</span><br><span class="line">            <span class="built_in">this</span>.ended = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Multiple-Vue-Instances"><a href="#Multiple-Vue-Instances" class="headerlink" title="Multiple Vue Instances"></a>Multiple Vue Instances</h1><h2 id="範例-創造多個Vue實體"><a href="#範例-創造多個Vue實體" class="headerlink" title="範例 創造多個Vue實體"></a>範例 創造多個Vue實體</h2><ul><li>創造兩個vue實體 app-one, app-two</li><li>並在兩個實體中</li><li>都使用<code>&lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</code> <code>&lt;p&gt;&#123;&#123; greet &#125;&#125;&lt;/p&gt;</code></li><li>印出結果沒有重複，分別印出各自的 title以及 greet</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Mutiple Vue Instances&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;vue-app-one&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue-app-two&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> one = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app-one&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        title: <span class="string">&#x27;Vue App One&#x27;</span></span><br><span class="line">    ,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        greet: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Hello from app one&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> two = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app-two&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        title: <span class="string">&#x27;Vue App Two&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        greet: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Hello yo all from app two&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/lcl8NIs.png"></p><h2 id="範例二-多個Vue實體交互作用"><a href="#範例二-多個Vue實體交互作用" class="headerlink" title="範例二 - 多個Vue實體交互作用"></a>範例二 - 多個Vue實體交互作用</h2><ol><li>創建一個按鈕在APP TWO，讓點擊時卻可以修改到APP ONE的title</li><li>綁定v-on:click在按鈕上並觸函式changeTitle</li><li>函式內容使用 APP ONE的變數名稱one並且使用其屬性title做修改內容然後返回其值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Mutiple Vue Instances&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;vue-app-one&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; greet &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue-app-two&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; greet &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;changeTitle&quot;&gt;Change App One title&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> one = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app-one&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        title: <span class="string">&#x27;Vue App One&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        greet: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Hello from app one&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> two = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app-two&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        title: <span class="string">&#x27;Vue App Two&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeTitle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            one.title = <span class="string">&#x27;Title changed&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        greet: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Hello yo all from app two&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>印出結果</p><p>APP ONE的title順利被更改</p><p><img src="https://i.imgur.com/zhawXtl.png"></p><h3 id="範例三-使用變數修改Vue實體"><a href="#範例三-使用變數修改Vue實體" class="headerlink" title="範例三 - 使用變數修改Vue實體"></a>範例三 - 使用變數修改Vue實體</h3><p>因為Vue實體有綁定變數因此可以直接呼叫並使用其屬性做修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">two.title = <span class="string">&#x27;change from outside&#x27;</span>;</span><br></pre></td></tr></table></figure><p>印出結果</p><p>APP TWO的title也確實被修改</p><p><img src="https://i.imgur.com/gQ1UuDi.png"></p><h1 id="Intro-to-Components"><a href="#Intro-to-Components" class="headerlink" title="Intro to Components"></a>Intro to Components</h1><blockquote><p>Components是指一段程式碼或是template可以被重複使用在不同的Vue實體中</p></blockquote><p>使用component的方式:</p><p>在component內部’’輸入名稱，後方物件可以添加屬姓使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;輸入名稱&#x27;</span>,&#123;</span><br><span class="line">    template:<span class="string">&#x27;&lt;p&gt;Hey there, I am a re-usable component&lt;/p&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="範例-使用component在不同的Vue實體中"><a href="#範例-使用component在不同的Vue實體中" class="headerlink" title="範例 - 使用component在不同的Vue實體中"></a>範例 - 使用component在不同的Vue實體中</h2><ul><li>使用在html內部時要呼叫component名稱</li><li>內容被印出時則不會顯示componet名稱只顯示其內容</li></ul><p><img src="https://i.imgur.com/zeBSkzy.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Intro to Components&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;vue-app-one&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Vue app one&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;greeting&gt;&lt;&#x2F;greeting&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue-app-two&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Vue app two&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;greeting&gt;&lt;&#x2F;greeting&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;greeting&#x27;</span>, &#123;</span><br><span class="line">    template: <span class="string">&#x27;&lt;p&gt;Hey there, I am a re-usable component&lt;/p&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app-one&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app-two&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>印出結果</p><p>在兩個Vue實體中都印出component內容</p><p><img src="https://i.imgur.com/4H6ydEz.png"></p><h2 id="範例-使用data以及methods在component內"><a href="#範例-使用data以及methods在component內" class="headerlink" title="範例 使用data以及methods在component內"></a>範例 使用data以及methods在component內</h2><ul><li>data 必須連接函式，當呼叫時才會修改內容，避免修改component內容時所有的Vue實體都同時更改了(因為每次使用data這邊會回傳一個新的物件 by reference的內容就會不同就不會同步修改彼此內容)</li></ul><p>(Vue實體因為只有自己使用所以不需要這樣操作)</p><ul><li>methods 的用法跟一般的Vue實體一樣用物件的方式撰寫</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Intro to Components&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;vue-app-one&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Vue app one&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;greeting&gt;&lt;&#x2F;greeting&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue-app-two&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Vue app two&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;greeting&gt;&lt;&#x2F;greeting&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;greeting&#x27;</span>, &#123;</span><br><span class="line">    template: <span class="string">`&lt;p&gt;Hey there, I am &#123;&#123;name&#125;&#125; &lt;button v-on:click=&quot;changeName&quot;&gt;Change name&lt;/button&gt;&lt;/p&gt;`</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name: <span class="string">&#x27;Yoshi&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = <span class="string">&#x27;Mario&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app-one&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app-two&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>當點擊按鈕Yoshi就變成了Mario並且只影響呼叫的Vue實體不會影響其他實體</p><p><img src="https://i.imgur.com/2O1LlyF.png"></p><h2 id="特殊範例-示範使用-使用data進行全部修改"><a href="#特殊範例-示範使用-使用data進行全部修改" class="headerlink" title="特殊範例(示範使用) 使用data進行全部修改"></a>特殊範例(示範使用) 使用data進行全部修改</h2><p>這邊作者為了解釋component的data沒有使用物件，使用function的原因:</p><p>出在物件是傳址，所以這個範例讓物件導出去，地址就會是固定的，也因此兩個實體的內容會一起更改</p><ol><li>外部設置好 <code>data =&#123;name:&#39;Yoshi&#39;&#125;</code>(就不回傳新物件都回傳同一個變數)</li><li>並在data的部分直接return data(用這樣的方式取代原本的function)</li><li>印出結果會同步兩個實體</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Intro to Components&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;vue-app-one&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Vue app one&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;greeting&gt;&lt;&#x2F;greeting&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;vue-app-two&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Vue app two&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;greeting&gt;&lt;&#x2F;greeting&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Yoshi&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;greeting&#x27;</span>, &#123;</span><br><span class="line">    template: <span class="string">`&lt;p&gt;Hey there, I am &#123;&#123;name&#125;&#125; &lt;button v-on:click=&quot;changeName&quot;&gt;Change name&lt;/button&gt;&lt;/p&gt;`</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = <span class="string">&#x27;Mario&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app-one&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app-two&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>印出結果</p><p>雖然是在Vue app one呼叫卻會直接修改兩個實體的內容</p><p><img src="https://i.imgur.com/EBC95C5.gif"></p><h1 id="Referencing-with-refs"><a href="#Referencing-with-refs" class="headerlink" title="Referencing with $refs"></a>Referencing with $refs</h1><h2 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h2><ul><li>可以取得其屬性並使用</li></ul><p><img src="https://i.imgur.com/2bVNR9t.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Refs&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;input&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;readRefs&quot;&gt;Submit&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;p&gt;Your favorite food: &#123;&#123; output &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        output: <span class="string">&#x27;empty now&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        readRefs: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs);</span><br><span class="line">            <span class="built_in">this</span>.output = <span class="built_in">this</span>.$refs.input.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>印出結果:<br>取的input裡面的value屬性並且指派給output</p><p><img src="https://i.imgur.com/W72jFAN.png"></p><h2 id="當Vue實體中有兩個以上的-refs處理方式"><a href="#當Vue實體中有兩個以上的-refs處理方式" class="headerlink" title="當Vue實體中有兩個以上的$refs處理方式"></a>當Vue實體中有兩個以上的$refs處理方式</h2><ul><li>兩個以上屬性出現時必須先加上名字</li></ul><p>當我們印出this.$refs會得到實體內部的$refs並且兩個的屬性都可以使用<br><img src="https://i.imgur.com/5rm7tSg.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;vue-app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Refs&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;input&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;readRefs&quot;&gt;Submit&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;p&gt;Your favorite food: &#123;&#123; output &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div ref&#x3D;&quot;test&quot;&gt;hello&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vue-app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        output: <span class="string">&#x27;empty now&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        readRefs: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.test.innerText);</span><br><span class="line">            <span class="built_in">this</span>.output = <span class="built_in">this</span>.$refs.input.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是使用方式必須先把名稱加在前面，才會指定要印出哪一個</p><p><code>console.log(this.$refs.test.innerText);</code></p><p><img src="https://i.imgur.com/9tD0eMw.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-JS-2-Tutorial-part-1&quot;&gt;&lt;a href=&quot;#Vue-JS-2-Tutorial-part-1&quot; class=&quot;headerlink&quot; title=&quot;Vue JS 2 Tutorial part 1&quot;&gt;&lt;/a&gt;Vue JS 2 Tutor</summary>
      
    
    
    
    <category term="Vue2" scheme="http://example.com/categories/Vue2/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Vue2 Tutorial Part 2</title>
    <link href="http://example.com/2021/03/22/Vue-Vue2%20Tutorial%20Part%202/"/>
    <id>http://example.com/2021/03/22/Vue-Vue2%20Tutorial%20Part%202/</id>
    <published>2021-03-22T12:27:12.000Z</published>
    <updated>2021-04-21T16:24:38.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-JS-2-Tutorial-part-2"><a href="#Vue-JS-2-Tutorial-part-2" class="headerlink" title="Vue JS 2 Tutorial part 2"></a>Vue JS 2 Tutorial part 2</h1><h6 id="tags-Javascript-Vue-js"><a href="#tags-Javascript-Vue-js" class="headerlink" title="tags: Javascript, Vue.js"></a>tags: <code>Javascript, Vue.js</code></h6><h1 id="The-Vue-CLI"><a href="#The-Vue-CLI" class="headerlink" title="The Vue CLI"></a>The Vue CLI</h1><ul><li>創造一個可以使用webpack的開發環境</li><li>使用ES6</li><li>編譯並且讓檔案容量縮小成一個JS檔</li><li>使用single file template給網頁的不同app使用</li><li>在渲染到畫面上前，編譯所有的內容在本地端而不是在瀏覽器上</li><li>使用在即時更新的伺服器上</li></ul><p>使用方式:</p><ol><li><a href="https://nodejs.org/en/">安裝node.js</a></li><li>確認是否安裝成功輸入 node -v 出版本就是成功摟</li><li><code>npm install -g vue-cli</code></li><li><code>vue create &lt;project-name&gt;</code></li></ol><p>接下來會出現一些問題需要回答:</p><p>這邊作者選擇Maunally select features<br><img src="https://i.imgur.com/jW0ghVg.png"></p><p>可以視專案需求做選擇<br><img src="https://i.imgur.com/vVCw2Mk.png"></p><p>下一步選擇vue.js的版本<br><img src="https://i.imgur.com/YFRho9t.png"></p><p>下一步選擇 In dedicated config files<br><img src="https://i.imgur.com/xb3SfHX.png"></p><p>下一步會詢問是否儲存設定建議選擇N 畢竟每次專案設定不同看需求而定</p><p>接下來我們進入資料夾 cd vue-crash-2021會發現需要的資料都已經載入</p><p><img src="https://i.imgur.com/hyCcMPd.png"></p><p>下一步使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/eXlTVHv.png"></p><p>就可以成功叫出來瞜!<br><img src="https://i.imgur.com/fnsycfI.png"></p><h1 id="Vue-Files-amp-The-Root-Component"><a href="#Vue-Files-amp-The-Root-Component" class="headerlink" title="Vue Files &amp; The Root Component"></a>Vue Files &amp; The Root Component</h1><p>針對剛剛產生出來的vue-cli檔案做一些解析</p><h2 id="Vue-Files"><a href="#Vue-Files" class="headerlink" title="Vue Files"></a>Vue Files</h2><h3 id="assets"><a href="#assets" class="headerlink" title="assets"></a>assets</h3><ul><li>放置圖片Logo的區域</li><li>需要使用到的img都可以放置在這區</li></ul><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>控制所有的components的檔案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>從最基礎的檔案中可以看出它引入了:</p><ol><li>Vue(就是整個框架內容)</li><li>App</li></ol><p>App就是指這個部分的檔案，也就是The Root Component<br><img src="https://i.imgur.com/ypz1R8a.png"></p><p>並創造一個新的Vue實體:</p><p>抓取id=app這個元素並且把App.vue的內容渲染到元素上面位於index.html內</p><p><img src="https://i.imgur.com/hy0EJSM.png"></p><p>html內部抓取的div<br><img src="https://i.imgur.com/fP0zRQ7.png"></p><h2 id="The-Root-Component"><a href="#The-Root-Component" class="headerlink" title="The Root Component"></a>The Root Component</h2><p>也就是剛剛提到的App的部分</p><p>可以發現這樣的vue檔案其實就是vue components的延伸，但是拆分到不一樣的檔案</p><ul><li><p>script<br>這邊處理把內容輸出到main.js裡面</p></li><li><p>style<br>處理畫面</p></li></ul><h3 id="特別注意"><a href="#特別注意" class="headerlink" title="特別注意"></a>特別注意</h3><p>template內部只能用一個div包裹住全部的html如果有兩個會報錯</p><p><img src="https://i.imgur.com/sPJtlZO.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h2&gt;Essential Links&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;vuejs.org&quot; target&#x3D;&quot;_blank&quot;&gt;Core Docs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;forum.vuejs.org&quot; target&#x3D;&quot;_blank&quot;&gt;Forum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;chat.vuejs.org&quot; target&#x3D;&quot;_blank&quot;&gt;Community Chat&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;twitter.com&#x2F;vuejs&quot; target&#x3D;&quot;_blank&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;h2&gt;Ecosystem&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;router.vuejs.org&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;vue-router&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;vuex.vuejs.org&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;vuex&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;vue-loader.vuejs.org&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;vue-loader&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;vuejs&#x2F;awesome-vue&quot; target&#x3D;&quot;_blank&quot;&gt;awesome-vue&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;app&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;Welcome to Your Vue.js App&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1, h2 &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ul &#123;</span><br><span class="line">  list-style-type: none;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 0 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a &#123;</span><br><span class="line">  color: #42b983;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>使用App.vue的內容來渲染index.html內部的id=app的tag</p><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;greeting()&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title:<span class="string">&#x27;yout first vue file&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,<span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;heeeeeeee cowboy!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>印出內容:</p><p><img src="https://i.imgur.com/mmMmAZt.png"></p><h1 id="Nesting-Components"><a href="#Nesting-Components" class="headerlink" title="Nesting Components"></a>Nesting Components</h1><ul><li>創造components以及import它們、nest它們到其他的components</li></ul><p><img src="https://i.imgur.com/oFKUY5F.png"></p><h2 id="Nesting-Globally"><a href="#Nesting-Globally" class="headerlink" title="Nesting Globally"></a>Nesting Globally</h2><p>主要把import寫在main.js內部，並且所有的components都可以使用</p><ol><li>import 資料夾名稱 from 資料夾位置</li><li>並且components建立在這裡<code>Vue.component(&#39;ninjas&#39;, Ninjas);</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Ninjas <span class="keyword">from</span> <span class="string">&#x27;./Ninjas.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;ninjas&#x27;</span>, Ninjas);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在App.vue檔案內則要使用ninjas tag來使用這個components</p><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;ninjas&gt;&lt;/ninjas&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title:<span class="string">&#x27;New title for nesting components&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>把Ninja.vue這個components的內容成功渲染到頁面上</p><p><img src="https://i.imgur.com/U1zBixE.png"></p><h2 id="Nesting-locally"><a href="#Nesting-locally" class="headerlink" title="Nesting locally"></a>Nesting locally</h2><p>不會操作在main.js上面，而是在想要渲染的components上面操作</p><ol><li>把import的部分寫在App.vue內</li><li>把components的內容寫在App.vue內部script內</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;ninjas&gt;&lt;/ninjas&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Ninjas <span class="keyword">from</span> <span class="string">&#x27;./Ninjas.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">&#x27;ninjas&#x27;</span>: Ninjas</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title:<span class="string">&#x27;New title for nesting components&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="Component-CSS-scoped"><a href="#Component-CSS-scoped" class="headerlink" title="Component CSS (scoped)"></a>Component CSS (scoped)</h1><p>在style tag加上 scoped讓其CSS只會影響到檔案本身</p><ul><li>有socped的CSS會針對每個components的CSS新增一個屬性</li><li>避免複寫其他的components的CSS效果</li></ul><p><img src="https://i.imgur.com/a6nrbG6.png"></p><p>印出結果:</p><p>在App.vue寫的是h1 color:purple<br>在Ninjas.vue寫的是 h1 color:blue</p><p><img src="https://i.imgur.com/EaH9rPq.png"></p><h1 id="Nesting-Components-Examples"><a href="#Nesting-Components-Examples" class="headerlink" title="Nesting Components Examples"></a>Nesting Components Examples</h1><h2 id="成品"><a href="#成品" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/snxMPqK.png"></p><h2 id="成品功能"><a href="#成品功能" class="headerlink" title="成品功能:"></a>成品功能:</h2><ol><li>點擊人物名稱會顯示使用技能</li></ol><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>畫面呈顯處index.html</p><h3 id="html程式碼"><a href="#html程式碼" class="headerlink" title="html程式碼:"></a>html程式碼:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;vuejs-playist&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;&#x2F;dist&#x2F;build.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="vue-app"><a href="#vue-app" class="headerlink" title="vue-app"></a>vue-app</h2><ul><li>引入其他components的地點</li><li>使用components屬性添進進去templates內</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;app-header&gt;</span><br><span class="line">  &lt;/app-header&gt;</span><br><span class="line">  &lt;app-content&gt;&lt;/app-content&gt;</span><br><span class="line">  &lt;app-footer&gt;</span><br><span class="line">  &lt;/app-footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span><span class="string">&#x27;./components/Header.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span><span class="string">&#x27;./components/Footer.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span><span class="string">&#x27;./components/Content.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">&#x27;app-header&#x27;</span>:Header,</span><br><span class="line">    <span class="string">&#x27;app-footer&#x27;</span>:Footer,</span><br><span class="line">    <span class="string">&#x27;app-content&#x27;</span>:Content,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="Header-vue"><a href="#Header-vue" class="headerlink" title="Header.vue"></a>Header.vue</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        title:<span class="string">&#x27;nesting example&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">header&#123;</span><br><span class="line">    background:lightgreen;</span><br><span class="line">    padding:10px;</span><br><span class="line">&#125;</span><br><span class="line">h1&#123;</span><br><span class="line">    color:#222;</span><br><span class="line">    text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="Footer-vue"><a href="#Footer-vue" class="headerlink" title="Footer.vue"></a>Footer.vue</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;copyright&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/footer&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        copyright:<span class="string">&quot;Copyright 2021 Vue&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    footer&#123;</span><br><span class="line">        background:#222;</span><br><span class="line">        padding:6px;</span><br><span class="line">    &#125;</span><br><span class="line">    p&#123;</span><br><span class="line">        color:lightgreen;</span><br><span class="line">        text-align:center;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="Content-vue"><a href="#Content-vue" class="headerlink" title="Content.vue"></a>Content.vue</h2><p>使用:</p><ul><li>v-for 依序印出物件</li><li>v-on:click 讓其內容可以被toggle</li><li>v-show 當v-show為true時speciality會出現，不是則否</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;ninjas&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;ninja in ninjas&quot;</span> v-on:click=<span class="string">&quot;ninja.show = !ninja.show&quot;</span>&gt;</span><br><span class="line">            &lt;h2&gt;&#123;&#123;ninja.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;h3 v-show=<span class="string">&quot;ninja.show&quot;</span>&gt;&#123;&#123;ninja.speciality&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ninjas:[</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Ryu&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;Vue Components&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Crystal&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;HTML Wizardry&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Hitoshi&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;Click Events&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Tango&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;Conditionals&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Kami&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;Webpack&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Yoshi&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;Data Diggin&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  #ninjas&#123;</span><br><span class="line">      Width:<span class="number">100</span>%;</span><br><span class="line">      max-width:1200px;</span><br><span class="line">      margin:40px auto;</span><br><span class="line">      padding:<span class="number">0</span> 20px;</span><br><span class="line">      box-sizing:border-box;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ul&#123;</span><br><span class="line">      display:flex;</span><br><span class="line">      flex-wrap:wrap;</span><br><span class="line">      list-style-type:none;</span><br><span class="line">      padding:<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li&#123;</span><br><span class="line">      flex-grow:<span class="number">1</span>;</span><br><span class="line">      flex-basis:300px;</span><br><span class="line">      text-align:center;</span><br><span class="line">      padding:30px;</span><br><span class="line">      border:1px solid #222;</span><br><span class="line">      margin:10px</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h1><ul><li>從Root component 傳送資料給nesting components</li><li>使用情境是當需要不同的components需要相同的資訊時可以使用Props</li></ul><p><img src="https://i.imgur.com/kQZCG8H.png"></p><h2 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h2><p>把上面實作的範例做改寫:</p><ol><li>把ninjas的資料都搬回Root</li><li>在Content.vue寫接收 <code>props:[&#39;ninjas&#39;]</code></li><li>在App.vue 寫 輸出prop <code>&lt;app-content v-bind:ninjas=&quot;ninjas&quot;&gt;&lt;/app-content&gt;</code></li></ol><ul><li>App.vue</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;app-header&gt;</span><br><span class="line">  &lt;/app-header&gt;</span><br><span class="line">  &lt;app-content v-bind:ninjas=<span class="string">&quot;ninjas&quot;</span>&gt;&lt;/app-content&gt;</span><br><span class="line">  &lt;app-footer&gt;</span><br><span class="line">  &lt;/app-footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span><span class="string">&#x27;./components/Header.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span><span class="string">&#x27;./components/Footer.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span><span class="string">&#x27;./components/Content.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">&#x27;app-header&#x27;</span>:Header,</span><br><span class="line">    <span class="string">&#x27;app-footer&#x27;</span>:Footer,</span><br><span class="line">    <span class="string">&#x27;app-content&#x27;</span>:Content,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ninjas:[</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Ryu&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;Vue Components&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Crystal&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;HTML Wizardry&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Hitoshi&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;Click Events&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Tango&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;Conditionals&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Kami&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;Webpack&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;Yoshi&#x27;</span>,<span class="attr">speciality</span>:<span class="string">&#x27;Data Diggin&#x27;</span>, <span class="attr">show</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>Content.vue</li></ul><ol><li>可以從template內部發現不需要修改，prop像是components的方式一樣使用</li><li>使用在scirpt 內部的methods的部分也是一樣可以直接調用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    test:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.ninjas</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;ninjas&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;ninja in ninjas&quot;</span> v-on:click=<span class="string">&quot;ninja.show = !ninja.show&quot;</span>&gt;</span><br><span class="line">            &lt;h2&gt;&#123;&#123;ninja.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;h3 v-show=<span class="string">&quot;ninja.show&quot;</span>&gt;&#123;&#123;ninja.speciality&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  props:[<span class="string">&#x27;ninjas&#x27;</span>],</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Validation"><a href="#Validation" class="headerlink" title="Validation"></a>Validation</h2><ul><li>當收到props時我們必須確認是我們需要的資料型別(String, Array…)，這邊就可以使用Validation</li><li>required則用來確認是否Root components成功傳送props過來</li><li>使用在接收props的檔案</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      ninjas: &#123;</span><br><span class="line">        type: <span class="built_in">Array</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Primitive-vs-Reference-Types"><a href="#Primitive-vs-Reference-Types" class="headerlink" title="Primitive vs Reference Types"></a>Primitive vs Reference Types</h1><h2 id="Primitive"><a href="#Primitive" class="headerlink" title="Primitive"></a>Primitive</h2><p>Number, String, Boolean, </p><p>如果修改了Primivtive的資料則只會影響當下檔案的內容而不會影響到Root component，這是因為 by Primitive的性質</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Object, Array</p><p>如果修改 Reference的資料Root跟使用的component都會一起改變，這是因為 by Reference的性質</p><h2 id="範例說明兩者區別"><a href="#範例說明兩者區別" class="headerlink" title="範例說明兩者區別"></a>範例說明兩者區別</h2><h3 id="Reference-會全部一起改變"><a href="#Reference-會全部一起改變" class="headerlink" title="Reference 會全部一起改變"></a>Reference 會全部一起改變</h3><ol><li>在Content.vue設置一個method刪除Content的內容</li><li>在App.vue多設置一對app-content讓內容呈現兩個</li><li>按下刪除按鈕會發現兩邊都會一起刪除內容</li></ol><p>Content.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        deleteContent:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.ninjas.pop()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;app-header&gt;</span><br><span class="line">  &lt;/app-header&gt;</span><br><span class="line">  &lt;app-content v-bind:ninjas=<span class="string">&quot;ninjas&quot;</span>&gt;&lt;/app-content&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">  &lt;app-content v-bind:ninjas=<span class="string">&quot;ninjas&quot;</span>&gt;&lt;/app-content&gt;</span><br><span class="line">  &lt;app-footer&gt;</span><br><span class="line">  &lt;/app-footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>因為by Reference操作的是同一個物件，任何改動都是同步的</p><p><img src="https://i.imgur.com/XIAf4fw.png"></p><h3 id="Primitive-只會改變當前檔案"><a href="#Primitive-只會改變當前檔案" class="headerlink" title="Primitive 只會改變當前檔案"></a>Primitive 只會改變當前檔案</h3><ul><li>設置App.vue的內容 title:”Vue contnet” prop到header, footer內</li><li>改變App.vue的內容會讓header, footer內容跟著改變</li></ul><p>重點來了:</p><ol><li>當我們在接受prop的檔案修改Primitive時，其他檔案不會像Reference一樣改變，而是保持原樣</li><li>在Header.vue使用methods changeTitle 當點擊header時修改其title為Vue Wizards</li><li>header修改了，此時的footer保持原樣</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">    &lt;h1 v-on:click=<span class="string">&quot;changeTitle&quot;</span>&gt;&#123;&#123;title&#125;&#125;&lt;<span class="regexp">/h1&gt;&lt;/</span>header&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        changeTitle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.title =<span class="string">&quot;Vue Wizards&quot;</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>因為這邊props傳送的是Primitive，當修改本地檔案時，不會影響其他檔案內容</p><p><img src="https://i.imgur.com/0Mo9sw9.png"></p><h1 id="Events-child-to-parent"><a href="#Events-child-to-parent" class="headerlink" title="Events (child to parent)"></a>Events (child to parent)</h1><ul><li>props是把資料從Root 傳到其他 components</li><li>Events則是把資料從其他 components傳回 Root</li></ul><p><img src="https://i.imgur.com/5DTgLjZ.png"></p><h2 id="範例-使用Event回傳修改Root進而透過prop修改其他components"><a href="#範例-使用Event回傳修改Root進而透過prop修改其他components" class="headerlink" title="範例-使用Event回傳修改Root進而透過prop修改其他components"></a>範例-使用Event回傳修改Root進而透過prop修改其他components</h2><ul><li>首先在Header.vue的部分做修改並送出資料:</li></ul><ol><li>使用 v-on:click觸發changeTitle來修改title內容</li><li>function changeTitle的內容使用<code>this.$emit(&#39;changeTitle&#39;, &quot;Vue Wizards&quot;)</code>來把資料回傳回去Root</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">    &lt;h1 v-on:click=<span class="string">&quot;changeTitle&quot;</span>&gt;&#123;&#123;title&#125;&#125;&lt;<span class="regexp">/h1&gt;&lt;/</span>header&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        changeTitle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;changeTitle&#x27;</span>, <span class="string">&quot;Vue Wizards&quot;</span>)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>在App.vue做接收Event的動作:</li></ul><ol><li>使用<code>v-on:changeTitle=&quot;updateTitle($event)&quot;</code>接受Header.vue的資料</li><li>並使用其內容”Vue Wizards”修改Title</li><li>methods的部分使用參數就是<code>$event</code>也就是”Vue Wizards”(名稱可以自訂)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;app-header v-bind:title=<span class="string">&quot;title&quot;</span> v-on:changeTitle=<span class="string">&quot;updateTitle($event)&quot;</span>&gt;&lt;/app-header&gt;</span><br><span class="line">  &lt;app-content v-bind:ninjas=<span class="string">&quot;ninjas&quot;</span>&gt;&lt;/app-content&gt;</span><br><span class="line">  &lt;app-footer v-bind:title=<span class="string">&quot;title&quot;</span>&gt;&lt;/app-footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">     updateTitle:<span class="function"><span class="keyword">function</span>(<span class="params">updatedTitle</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.title = updatedTitle;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="The-Event-Bus"><a href="#The-Event-Bus" class="headerlink" title="The Event Bus"></a>The Event Bus</h1><ul><li><p>在Event的部分是我們操作過從其他components傳送資料回去Root再由Root改變其他components</p></li><li><p>而Event Bus做的事情則簡化這個過程:</p></li></ul><ol><li>創造一個新的Vue實體</li><li>並且import到想要操作的componets內</li><li>這樣就可以彼此溝通而不需要傳回Root再傳出來</li></ol><h2 id="範例說明Events-Bus"><a href="#範例說明Events-Bus" class="headerlink" title="範例說明Events Bus"></a>範例說明Events Bus</h2><ul><li>通常使用在想要改變 siblings或是任何其他的componets但不想經過Root來更動時</li></ul><ol><li>在main.js創造其Vue實體並且輸出</li></ol><p><code>export const bus = new Vue();</code></p><ol start="2"><li>在Header.vue(想要改變的檔案):</li></ol><p>引入bus也就是Bus Event的實體</p><p><code>import &#123;bus&#125; from &#39;../main&#39;;</code></p><p>這邊的methods處則不使用$emit把資料傳回Root</p><p>而是使用<code>this.title = &#39;Vue Wizards&#39;</code><br>直接修改Header.vue的title</p><p>並且使用引入的bus做$emit資料出去給想要修改內容的其他components，並設定名稱titlechanged以及內容”Vue Wizards”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        changeTitle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.title = <span class="string">&#x27;Vue Wizards&#x27;</span>;</span><br><span class="line">            bus.$emit(<span class="string">&#x27;titleChanged&#x27;</span>,<span class="string">&quot;Vue Wizards&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Footer.vue做接收</li></ol><p>引入bus也就是Bus Event的實體</p><p><code>import &#123;bus&#125; from &#39;../main&#39;;</code></p><p>使用life cycle hook: created 當實體被創建時會馬上觸發此函式</p><p>接收來自Header.vue的資料也就是titleChanged使用<code>$on()</code><br>並使用callback函式處理修改title成Header.vue傳送來的資料也就是”Vue Wizards”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    bus.$on(<span class="string">&#x27;titleChanged&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.title = data;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>通過Event Bus 的傳遞就不須經過Root而是透過Vue實體Bus來傳遞兩者的資料</p></li><li><p>需要注意的點是</p></li></ol><p>你可以在Header.vue檔案中發現</p><ul><li>除了傳送資料的函式$emit之外，他還有使用<code>this.title = &#39;Vue Wizards&#39;;</code>修改當前自己目前的資料</li><li>這個部份如果沒有處理則只會改變Footer.vue的title</li><li>原因在於我們只有監聽Footer.vue的event而Header.vue的部分就必須這樣自己做修改</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        changeTitle:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// this.$emit(&#x27;changeTitle&#x27;, &quot;Vue Wizards&quot;)</span></span><br><span class="line">            <span class="built_in">this</span>.title = <span class="string">&#x27;Vue Wizards&#x27;</span>;</span><br><span class="line">            bus.$emit(<span class="string">&#x27;titleChanged&#x27;</span>,<span class="string">&quot;Vue Wizards&quot;</span>);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Life-cycle-Hooks"><a href="#Life-cycle-Hooks" class="headerlink" title="Life-cycle Hooks"></a>Life-cycle Hooks</h1><p><strong>beforeCreate</strong><br>Vue實體初始化後立刻呼叫此函式，不過此時Vue實體還未創建所以其中的設定都還未能使用(如data observation, event, watcher setup)</p><p><strong>created</strong><br>Vue實例創建完成後立刻呼叫此函式，已設置 data, computed properties, methods, watch/event callbacks，但尚未開始mounting階段，且 $el 還不能在此階段使用。</p><p><strong>beforeMount</strong><br>在mounting階段開始前被調用：render function首次被調用。</p><p><strong>mounted</strong><br>選項物件中的el被新創建的vm.$el替換，並掛載到到 vm 上，並調用mounted這個鉤子。</p><p><strong>beforeUpdate</strong><br>數據被更新時會調用，發生在 Virtual DOM re-render 和 patch 之前(連結：Day4: Virtual DOM)，可以在此時更改狀態數據，並不會增加重新渲染的成本。</p><p><strong>updated</strong><br>由於數據更新導致 Virtual DOM re-render 和 patch 之後會調用updated這個鉤子。</p><p>不精確白話文為：由於updated被調用時，DOM 已經更新。所以在此時更新數據很可能會導致updated無限循環的被調用。</p><p><strong>beforeDestroy</strong><br>在 Vue Instance 被銷毀前被調用，因此 Vue Instance 在beforeDestroy中仍可運作。</p><p>不精確白話文為：Vue Instance 可以在此時做垂死前的掙扎。</p><p><strong>destroyed</strong><br>在 Vue Instance 被銷毀後被調用，此時 Vue Instance 所有東西會解除綁定，事件監聽也都會被移除，子實例也會被銷毀。</p><h2 id="範例-life-cycle-hook-出現的時機"><a href="#範例-life-cycle-hook-出現的時機" class="headerlink" title="範例 - life cycle hook 出現的時機"></a>範例 - life cycle hook 出現的時機</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;ninjas&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;ninja in ninjas&quot;</span> v-on:click=<span class="string">&quot;ninja.show = !ninja.show&quot;</span>&gt;</span><br><span class="line">            &lt;h2&gt;&#123;&#123;ninja.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;h3 v-show=<span class="string">&quot;ninja.show&quot;</span>&gt;&#123;&#123;ninja.speciality&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button v-on:click=<span class="string">&quot;deleteContent&quot;</span>&gt;Delete Content&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      ninjas: &#123;</span><br><span class="line">        type: <span class="built_in">Array</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        deleteContent:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.ninjas.pop()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="comment">// lifecycle hooks</span></span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;beforeCreate&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;created&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;beforeMount&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;mounted&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;beforeUpdate&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;updated&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>重整畫面第一個出現的就是beforeCreate，畢竟是在實體出現之前所以不會有畫面呈現<br><img src="https://i.imgur.com/jBDv9Hb.png"></p><p>第二個出現的是created實體已經被創造了，但是還沒被mounted上去，故也沒有畫面<br><img src="https://i.imgur.com/DCR9cer.png"></p><p>第三個出現的是beforeMounted，在mounted之前的可以做一些處理依舊沒有畫面<br><img src="https://i.imgur.com/tWJuOUR.png"></p><p>第四個出現的是mounted點擊OK之後畫面產生!<br><img src="https://i.imgur.com/O8iFfJw.png"></p><p>畫面產生<br><img src="https://i.imgur.com/F3i8VOo.png"></p><p>第五按下delete Content後會出現beforeUpdate按下OK後出現update<br><img src="https://i.imgur.com/ZLlUIz1.png"></p><p>第六後會出現updated按下OK後即更新畫面<br><img src="https://i.imgur.com/1UDf4rm.png"></p><p>畫面更新<br><img src="https://i.imgur.com/Kxmc2Vt.png"></p><h1 id="Slots"><a href="#Slots" class="headerlink" title="Slots"></a>Slots</h1><ul><li>在子元件上面開個洞， 由外層元件將內容置放在至子層元件指定的位置中</li><li>可以傳送HTML tag藉由slot</li></ul><h2 id="範例-slot的使用"><a href="#範例-slot的使用" class="headerlink" title="範例 slot的使用"></a>範例 slot的使用</h2><ol><li><p>要使用slot必須先引入子層到App.vue<br><code>import formHelper from&#39;./components/formHelper.vue&#39;</code></p></li><li><p>輸出components處輸出到formHelper位置</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">&#x27;form-helper&#x27;</span>:formHelper</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>template處放入創好的components - form-helper</li><li>輸入內容</li></ol><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;form-helper&gt;</span><br><span class="line">    &lt;h2&gt;I am the slot title&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;I am the paragraph text <span class="keyword">for</span> the slot&lt;/p&gt;</span><br><span class="line">  &lt;/form-helper&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> formHelper <span class="keyword">from</span><span class="string">&#x27;./components/formHelper.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">&#x27;form-helper&#x27;</span>:formHelper</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>在formHelper.vue則在template使用slot tag來接收來自Root的資料</li></ol><p>formHelper.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;h1&gt; I am the form helper&lt;/h1&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    components:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    methods: &#123;</span><br><span class="line">       </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>就可以使用這樣的方式傳遞HTML</p><p><img src="https://i.imgur.com/WSfqrJ9.png"></p><h2 id="範例二-使用name抓取Root的slot"><a href="#範例二-使用name抓取Root的slot" class="headerlink" title="範例二 使用name抓取Root的slot"></a>範例二 使用name抓取Root的slot</h2><ul><li>這時候如果我想要h1, p 各別在不同位置該怎麼處理</li><li>藉由命名的方式子層的slot就知道該抓取哪個部分:</li></ul><ol><li>在App.vue命名後，在子層 使用name去抓取</li></ol><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;form-helper&gt;</span><br><span class="line">    &lt;h2 slot=<span class="string">&quot;title&quot;</span>&gt;I am the slot title&lt;/h2&gt;</span><br><span class="line">    &lt;p slot=<span class="string">&quot;text&quot;</span>&gt;I am the paragraph text <span class="keyword">for</span> the slot&lt;/p&gt;</span><br><span class="line">  &lt;/form-helper&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>formHelper.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;slot name=<span class="string">&quot;title&quot;</span>&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;h1&gt; I am the form helper&lt;/h1&gt;</span><br><span class="line">    &lt;slot name=<span class="string">&quot;text&quot;</span>&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>就可以分開呈現內容</p><p><img src="https://i.imgur.com/1S58ekw.png"></p><h3 id="修飾子層的內容"><a href="#修飾子層的內容" class="headerlink" title="修飾子層的內容"></a>修飾子層的內容</h3><ul><li>要處理子層的style則必須在子層的style處理</li></ul><p>formHelper.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>處出結果:</p><p><img src="https://i.imgur.com/tEWiLgj.png"></p><h3 id="動態顯示文字則在Root處理"><a href="#動態顯示文字則在Root處理" class="headerlink" title="動態顯示文字則在Root處理"></a>動態顯示文字則在Root處理</h3><ul><li>動態文字要修改的話主要處理在Root內</li></ul><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;form-helper&gt;</span><br><span class="line">    &lt;h2 slot=<span class="string">&quot;title&quot;</span>&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p slot=<span class="string">&quot;text&quot;</span>&gt;I am the paragraph text <span class="keyword">for</span> the slot&lt;/p&gt;</span><br><span class="line">  &lt;/form-helper&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> formHelper <span class="keyword">from</span><span class="string">&#x27;./components/formHelper.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">&#x27;form-helper&#x27;</span>:formHelper</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title:<span class="string">&#x27;I am a dynamic slot title&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>印出結果:</p><p><img src="https://i.imgur.com/JnOI6PA.png"></p><h2 id="範例三-slot真正的用法"><a href="#範例三-slot真正的用法" class="headerlink" title="範例三 slot真正的用法"></a>範例三 slot真正的用法</h2><p>上面的偏向展示slot怎麼用，接下來會使用真實的範例說明如何使用slot:</p><p>製作一個網站，需要數個不同的form表單，並且他們的結構要相似但是內容必須要可以修改這時候就可以使用slots這個概念</p><p>在Root這邊處理內容:</p><ol><li>使用form-helper tag包住要傳送到子層的內容</li><li>使用slot=”form-相關插槽”的方式抓取子層的架構並且填上內容</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;form-helper&gt;</span><br><span class="line">    &lt;div slot=<span class="string">&quot;form-header&quot;</span>&gt;</span><br><span class="line">      &lt;h3&gt;This is the title <span class="keyword">of</span> the form&lt;/h3&gt;</span><br><span class="line">      &lt;p&gt;information about the form&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div slot=<span class="string">&quot;form-fields&quot;</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;name&quot;</span> required&gt;</span><br><span class="line">    ![](https:<span class="comment">//i.imgur.com/LiN6jD8.png)</span></span><br><span class="line">  &lt;input type=<span class="string">&quot;password&quot;</span>placeholder=<span class="string">&quot;password&quot;</span> required&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div slot=<span class="string">&quot;form-controls&quot;</span>&gt;</span><br><span class="line">      &lt;button v-on:click=<span class="string">&quot;handleSubmit&quot;</span>&gt;Submit&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/form-helper&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;form-helper&gt;</span><br><span class="line">    &lt;div slot=<span class="string">&quot;form-header&quot;</span>&gt;</span><br><span class="line">      &lt;h3&gt;This is the title <span class="keyword">of</span> the form&lt;/h3&gt;</span><br><span class="line">      &lt;p&gt;information about the form&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div slot=<span class="string">&quot;form-fields&quot;</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;name&quot;</span> required&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;password&quot;</span>placeholder=<span class="string">&quot;password&quot;</span> required&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div slot=<span class="string">&quot;form-controls&quot;</span>&gt;</span><br><span class="line">      &lt;button v-on:click=<span class="string">&quot;handleSubmit&quot;</span>&gt;Submit&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/form-helper&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> formHelper <span class="keyword">from</span><span class="string">&#x27;./components/formHelper.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    <span class="string">&#x27;form-helper&#x27;</span>:formHelper</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title:<span class="string">&#x27;I am a dynamic slot title&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>子層的formHelper這邊可以處理好form的架構，使用slot name的方式接受來自Root的資料</p><ul><li>form-header</li><li>form-fields</li><li>form-controls</li><li>useful-links</li></ul><p>formHelper.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Please fill out our form...&lt;/h1&gt;</span><br><span class="line">        &lt;form &gt;</span><br><span class="line">            &lt;div id=<span class="string">&quot;form-header&quot;</span>&gt;</span><br><span class="line">                &lt;slot name=<span class="string">&quot;form-header&quot;</span>&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">&quot;form-fields&quot;</span>&gt;</span><br><span class="line">                &lt;slot name=<span class="string">&quot;form-fields&quot;</span>&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">&quot;form-controls&quot;</span>&gt;</span><br><span class="line">                &lt;slot name=<span class="string">&quot;form-controls&quot;</span>&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=<span class="string">&quot;uesful-links&quot;</span>&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;~這邊我就省略~&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>下次想要打造form表格就是直接在App.vue內 使用template form-helper並且抓取想要修改的slot修改好內容後就可以在做出另一個form表個瞜</p><p><img src="https://i.imgur.com/o3DM1ho.png"></p><h1 id="Dynamic-components"><a href="#Dynamic-components" class="headerlink" title="Dynamic components"></a>Dynamic components</h1><p>在上一篇課程中我們製作了格式固定但是內容可以更改的表格，這次我們針對這個表格想要動態的切換表格內容(新增了兩個表格檔案)，比方 點擊按鈕切換表格一變成二</p><p>App.vue</p><ol><li>首先在引入檔案進App.vue</li><li>註冊components</li><li>使用component template 並且使用 is 抓取要使用的component</li><li>使用v-bind讓 is的部分做動態並在data處理component</li><li>針對按鈕使用click事件 動態顯示當點哪個按鈕呈現哪個內容</li><li>最後為了保存表格input內的資料輸入不會因為切換表格被刪除使用 keep-alive template</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&#x27;component&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;component = &#x27;form-one&#x27;&quot;</span>&gt;</span>Show form one<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;component = &#x27;form-two&#x27;&quot;</span>&gt;</span>Show form two<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// Imports</span></span><br><span class="line"><span class="keyword">import</span> formOne <span class="keyword">from</span> <span class="string">&#x27;./components/formOne.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> formTwo <span class="keyword">from</span> <span class="string">&#x27;./components/formTwo.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">&#x27;form-one&#x27;</span>: formOne, <span class="comment">// 註冊component</span></span><br><span class="line">        <span class="string">&#x27;form-two&#x27;</span>: formTwo</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            component: <span class="string">&#x27;form-one&#x27;</span> <span class="comment">// v-bind 處理的動態部分</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleSubmit: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;thanks for submitting&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在下兩個頁面中切換並且儲存input輸入的內容不會因為切換頁面而不見</p><p>Form One<br><img src="https://i.imgur.com/erbTJLe.png"></p><p>Form Two<br><img src="https://i.imgur.com/GWqU9ls.png"></p><p><a href="https://github.com/iamshaunjp/vuejs-playlist/tree/lesson-28/src/components">formOne, formTwo 程式碼</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-JS-2-Tutorial-part-2&quot;&gt;&lt;a href=&quot;#Vue-JS-2-Tutorial-part-2&quot; class=&quot;headerlink&quot; title=&quot;Vue JS 2 Tutorial part 2&quot;&gt;&lt;/a&gt;Vue JS 2 Tutor</summary>
      
    
    
    
    <category term="Vue2" scheme="http://example.com/categories/Vue2/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Vue2 Tutorial Part 3</title>
    <link href="http://example.com/2021/03/22/p/"/>
    <id>http://example.com/2021/03/22/p/</id>
    <published>2021-03-22T12:27:12.000Z</published>
    <updated>2021-04-21T16:25:01.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-JS-2-Tutorial-part-3"><a href="#Vue-JS-2-Tutorial-part-3" class="headerlink" title="Vue JS 2 Tutorial part 3"></a>Vue JS 2 Tutorial part 3</h1><h6 id="tags-Javascript-Vue-js"><a href="#tags-Javascript-Vue-js" class="headerlink" title="tags: Javascript, Vue.js"></a>tags: <code>Javascript, Vue.js</code></h6><h1 id="Input-Binding-Creating-a-blog-part-1"><a href="#Input-Binding-Creating-a-blog-part-1" class="headerlink" title="Input Binding (Creating a blog, part 1)"></a>Input Binding (Creating a blog, part 1)</h1><p>使用 v-modle 把 input 輸入的內容填入下方的 Preview 區域(不使用即時輸入使用 lazy )</p><p><img src="https://i.imgur.com/XHXufvh.png"></p><p>App.vue</p><ol><li>引入 addBlog</li><li>註冊components’</li><li>使用 add-blog template</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;add-blog&gt;&lt;&#x2F;add-blog&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import addBlog from &#39;.&#x2F;components&#x2F;addBlog.vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        &#39;add-blog&#39;:addBlog</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>addBlog.vue</p><ol><li>在 data 加入 blog 物件並使用加上屬性</li><li>使用 v-model 來操作 input 區域並填入相應的物件屬性</li><li>在 preview 區域加入大括號做連結並填入相應的物件屬性</li><li>使用 lazy 讓文字不會即時輸入，必須讓 input 取消 focus 才會出現文字在 preview 區域</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;add-blog&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Add a new Blog Post&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">            &lt;label&gt;Blog Title&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; v-model.lazy&#x3D;&quot;blog.title&quot; required&#x2F;&gt;</span><br><span class="line">            &lt;label&gt;Blog Content&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;textarea v-model.lazy&#x3D;&quot;blog.content&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;preview&quot;&gt;</span><br><span class="line">            &lt;h3&gt;Preview Blog&lt;&#x2F;h3&gt;</span><br><span class="line">            &lt;p&gt;Blog Title:&#123;&#123;blog.title&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;Blog Content:&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;blog.content&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            blog:&#123;</span><br><span class="line">                title: &quot;&quot;,</span><br><span class="line">                content: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/iamshaunjp/vuejs-playlist/blob/lesson-29/src/components/addBlog.vue">本篇 css 取用</a></p><h1 id="Checkbox-Binding"><a href="#Checkbox-Binding" class="headerlink" title="Checkbox Binding"></a>Checkbox Binding</h1><p>延續上一篇的表單，這次要製作的是可以即時更新的checkkboxes</p><p><img src="https://i.imgur.com/1WjEjWY.png"></p><p>App.vue</p><ol><li>首先加入 checkboxes 的 input type 改成 checkbox</li><li>在 blog 內加入 categories 選項並用 array 裝</li><li>input 區域的 v-model 綁定 blog.categories</li><li>input 區域的 value 處填入想要在下方 preview 呈現的字樣</li><li>在 preview 處新增 ul 並且使用 v-for 印出無序列表內部填入大括號</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;add-blog&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Add a new Blog Post&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">            &lt;label&gt;Blog Title&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; v-model.lazy&#x3D;&quot;blog.title&quot; required&#x2F;&gt;</span><br><span class="line">            &lt;label&gt;Blog Content&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;textarea v-model.lazy&#x3D;&quot;blog.content&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">            &lt;div id&#x3D;&quot;checkboxes&quot;&gt;</span><br><span class="line">                &lt;label&gt;Ninjas&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;ninjas&quot; v-model&#x3D;&quot;blog.categories&quot;&#x2F;&gt;</span><br><span class="line">                &lt;label&gt;Wizards&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;wizards&quot; v-model&#x3D;&quot;blog.categories&quot;&#x2F;&gt;</span><br><span class="line">                &lt;label&gt;Mario&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;mario&quot; v-model&#x3D;&quot;blog.categories&quot;&#x2F;&gt;</span><br><span class="line">                &lt;label&gt;Cheese&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;cheese&quot; v-model&#x3D;&quot;blog.categories&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;preview&quot;&gt;</span><br><span class="line">            &lt;h3&gt;Preview Blog&lt;&#x2F;h3&gt;</span><br><span class="line">            &lt;p&gt;Blog Title:&#123;&#123;blog.title&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;Blog Content:&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;blog.content&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;Blog Categories:&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for&#x3D;&quot;category in blog.categories&quot;&gt;&#123;&#123;category&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            blog:&#123;</span><br><span class="line">                title: &quot;&quot;,</span><br><span class="line">                content: &quot;&quot;,</span><br><span class="line">                categories:[]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h1 id="Select-Box-Binding"><a href="#Select-Box-Binding" class="headerlink" title="Select Box Binding"></a>Select Box Binding</h1><p>這次要即時更新下拉式選單到下方的Author</p><p>這邊的重點在於:</p><ul><li>select 使用 v-model 抓取option</li><li>option 使用 v-for 印出authors陣列的內容進下拉式選單</li></ul><p><img src="https://i.imgur.com/aqH2uCR.png"></p><p>App.vue</p><ol><li>設置下拉式選單select, option</li><li>於 data 處設置 blog.author 屬性</li><li>select 處使用 v-model 到 blog.author 待會讓內容動態呈現到 preview 區域</li><li>option 處使用 v-for 並在 data 設置 authors 陣列，製作下拉式選單的內容</li><li>於 preview 區域做出展示區域並用大括號放入 blog.author</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;Author:&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;select  v-model&#x3D;&quot;blog.author&quot;&gt;</span><br><span class="line">                &lt;option v-for&#x3D;&quot;author in authors&quot;&gt;&#123;&#123;author&#125;&#125;&lt;&#x2F;option&gt;</span><br><span class="line">            &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;preview&quot;&gt;</span><br><span class="line">            &lt;h3&gt;Preview Blog&lt;&#x2F;h3&gt;</span><br><span class="line">            &lt;p&gt;Blog Title:&#123;&#123;blog.title&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;Blog Content:&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;blog.content&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;Blog Categories:&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for&#x3D;&quot;category in blog.categories&quot;&gt;&#123;&#123;category&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;p&gt;Author: &#123;&#123;blog.author&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h1 id="HTTP-Requests-POST"><a href="#HTTP-Requests-POST" class="headerlink" title="HTTP Requests - POST"></a>HTTP Requests - POST</h1><p>本篇會介紹如何在 Vue cli 內使用 Http requests</p><ol><li>首先需要先下載<a href="https://github.com/pagekit/vue-resource">vue-resource</a></li><li><code>npm install vue-resource</code></li><li>並且在json檔案確認是否安裝成功</li><li>下一步會示範如何操作 vue-resource<br><img src="https://i.imgur.com/zSRUBlV.png"></li></ol><ul><li>引入 VueResource 進 main.js 使用</li></ul><p>main.js </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line">import VueResource from &#39;vue-resource&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueResource);</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>新增使用 http Post 方法的按鈕:</li></ul><p>後綴修飾符.prevent可防止瀏覽器預設行為</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click.prevent&#x3D;&quot;post&quot;&gt;Add Blog&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/RZZcG0A.png"></p><ul><li> 撰寫 v-on:click內的事件 post:</li></ul><ol><li>使用 $http.post後方加入要串接的後端位置(範例處使用 {JSON} Placeholder 模擬)</li><li>抓取 blog.title, blog.content</li><li>設置 userId 為 1 (只是做測試可以隨意設置)</li><li>使用 .then 抓取 response 並且印出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">       post:function ()&#123;</span><br><span class="line">           this.$http.post(&#39;https:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;posts&#39;,&#123;</span><br><span class="line">               title: this.blog.title,</span><br><span class="line">               body: this.blog.content,</span><br><span class="line">               userId:1</span><br><span class="line">           &#125;).then(function(data)&#123;</span><br><span class="line">               console.log(data);</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>如果成功印出 response 就代表引入的 vue-resource 成功運作！</p><p><img src="https://i.imgur.com/NraBoFl.png"></p><h2 id="針對-post-成功後的畫面動態"><a href="#針對-post-成功後的畫面動態" class="headerlink" title="針對 post 成功後的畫面動態"></a>針對 post 成功後的畫面動態</h2><ul><li>處理當正確執行 post 方法後會產生:</li></ul><ol><li>show 出成功字樣(v-if)</li><li>form表格的部分消失(v-if)</li></ol><ul><li><p>新增一個 div 內部簡單插入要顯示的內容且使用 v-if 並串 submitted屬性 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if&#x3D;&quot;submitted&quot;&gt;</span><br><span class="line">            &lt;h3&gt;Thanks for adding your post&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>submitted 屬性加入 data</p></li></ul><p>預設狀態是 false，因為只要當點 post 按鈕後才會觸發</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            blog:&#123;</span><br><span class="line">                title: &quot;&quot;,</span><br><span class="line">                content: &quot;&quot;,</span><br><span class="line">                categories:[],</span><br><span class="line">                author: &quot;&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            authors:[&quot;The Net Ninja&quot;,&quot;The Aveger&quot;, &quot;The Vue vindicator&quot;],</span><br><span class="line">            submitted: false,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><ul><li>更新post method</li></ul><p>加入this.submitted 為 true 就可以再點擊後觸發其屬性為 true，讓 v-if 的條件觸發</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        post:function ()&#123;</span><br><span class="line">            this.$http.post(&#39;https:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;posts&#39;,&#123;</span><br><span class="line">                title: this.blog.title,</span><br><span class="line">                body: this.blog.content,</span><br><span class="line">                userId:1</span><br><span class="line">            &#125;).then(function(data)&#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">                this.submitted &#x3D; true;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>form表格讓其點擊post後消失</li></ul><p>使用 <code>v-if=&quot;!submitted&quot;</code>  代表點擊後會變成false，未點擊前則是true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;form v-if&#x3D;&quot;!submitted&quot;&gt;</span><br><span class="line">            &lt;label&gt;Blog Title&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; v-model.lazy&#x3D;&quot;blog.title&quot; required&#x2F;&gt;</span><br><span class="line">            &lt;label&gt;Blog Content&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;textarea v-model.lazy&#x3D;&quot;blog.content&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">            &lt;div id&#x3D;&quot;checkboxes&quot;&gt;</span><br><span class="line">                &lt;label&gt;Ninjas&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;ninjas&quot; v-model&#x3D;&quot;blog.categories&quot;&#x2F;&gt;</span><br><span class="line">                &lt;label&gt;Wizards&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;wizards&quot; v-model&#x3D;&quot;blog.categories&quot;&#x2F;&gt;</span><br><span class="line">                &lt;label&gt;Mario&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;mario&quot; v-model&#x3D;&quot;blog.categories&quot;&#x2F;&gt;</span><br><span class="line">                &lt;label&gt;Cheese&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;cheese&quot; v-model&#x3D;&quot;blog.categories&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;label&gt;Author:&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;select  v-model&#x3D;&quot;blog.author&quot;&gt;</span><br><span class="line">                &lt;option v-for&#x3D;&quot;author in authors&quot;&gt;&#123;&#123;author&#125;&#125;&lt;&#x2F;option&gt;</span><br><span class="line">            &lt;&#x2F;select&gt;</span><br><span class="line">            &lt;button v-on:click.prevent&#x3D;&quot;post&quot;&gt;Add Blog&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><ul><li>點擊 post 成功後</li></ul><ol><li>show出成功字樣</li><li>form 消失</li></ol><p><img src="https://i.imgur.com/WkYnhMt.png"></p><h1 id="HTTP-Requests-GET"><a href="#HTTP-Requests-GET" class="headerlink" title="HTTP Requests - GET"></a>HTTP Requests - GET</h1><p>本篇會使用 GET 方法來取得文章填入網頁</p><ul><li>引入新的分頁 showBLogs，並且註冊components，下一步使用在template上</li></ul><p>App.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;show-blogs&gt;&lt;&#x2F;show-blogs&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import addBlog from &#39;.&#x2F;components&#x2F;addBlog.vue&#39;</span><br><span class="line">import showBlogs from &#39;.&#x2F;components&#x2F;showBlogs.vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        &#39;add-blog&#39;:addBlog,</span><br><span class="line">        &#39;show-blogs&#39;:showBlogs</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li>開始使用 GET 取得貼文</li></ul><ol><li>使用 created hook 這個生命階段來使用 GET 方法</li><li>取得假文<br><img src="https://i.imgur.com/2bZhPMx.png"></li><li>觀察 body 會發現這回傳的文章有100篇故使用 slice 方法取得10篇</li><li>把得到的 response 存到 data 內的 blogs:[]</li><li>使用 v-for 把 data 內的資料印出來並填入 h2, article 中</li></ol><p>showBlogs.vue </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;show-blogs&quot;&gt;</span><br><span class="line">        &lt;h1&gt;All Blog Articles&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;blog in blogs&quot; class&#x3D;&quot;single-blog&quot;&gt;</span><br><span class="line">            &lt;h2&gt;&#123;&#123;blog.title&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;article&gt;&#123;&#123;blog.body&#125;&#125;&lt;&#x2F;article&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    </span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          blogs: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.$http.get(&#39;https:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;posts&#39;).then(function(data)&#123;</span><br><span class="line">            console.log(data);</span><br><span class="line">            this.blogs &#x3D; data.body.slice(0,10);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>印出結果:</p><p><img src="https://i.imgur.com/1u3JBDw.png"></p><h1 id="Custom-Directives"><a href="#Custom-Directives" class="headerlink" title="Custom Directives"></a>Custom Directives</h1><p>製作客製化的 Directives (如 v-rainbow, v-theme 等等)</p><p>前往 main.js 使用，這樣一來所有的components都可以使用客製化的Directives</p><p>用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&#39;客製化的Directive的輸入名字&#39;,&#123;後方輸入要使用的lifecycle hook(el:代表選取的元素, binding: 代表directive後方的內容, vnode 目前用不到)&#123;</span><br><span class="line">    這邊輸入要操作的內容</span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure><ol><li>v-rainbow:<br>這邊做的事情是選取元素的顏色並且使用隨機</li><li>v-theme:<br>使用判斷式，如果輸入參數wide, narrow 會讓Blog的大小改變</li><li><code>.arg</code> 代表 v-theme:column 後方 column 的部分，並對其設定背景色以及 padding</li></ol><p>main.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Custom directives</span><br><span class="line">Vue.directive(&#39;rainbow&#39;, &#123;</span><br><span class="line">  bind(el, binding, vnode) &#123;</span><br><span class="line">    el.style.color &#x3D; &#96;#$&#123;Math.random().toString().slice(2,8)&#125;&#96;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">Vue.directive(&#39;theme&#39;, &#123;</span><br><span class="line">  bind(el, binding, vnode) &#123;</span><br><span class="line">    if (binding.value &#x3D;&#x3D;&#x3D; &#39;wide&#39;) &#123;</span><br><span class="line">      el.style.maxWidth &#x3D; &#39;1200px&#39;;</span><br><span class="line">    &#125; else if (binding.value &#x3D;&#x3D;&#x3D; &#39;narrow&#39;) &#123;</span><br><span class="line">      el.style.maxWidth &#x3D; &quot;560px&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if (binding.arg &#x3D;&#x3D; &#39;column&#39;) &#123;</span><br><span class="line">      el.style.background &#x3D; &#39;#ddd&#39;;</span><br><span class="line">      el.style.padding &#x3D; &#39;20px&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>showBlogs.vue</p><ul><li>針對整個Blog區域做客製化 v-theme:column=”narrow”</li></ul><p>參數: column 的部分做出包住整個 div 背景色以及padding<br>binding value: 則是決定其max-width的大小 narrow: 560px, wide: 1200px</p><ul><li>針對Blog內部的h2做客製化 v-rainbow </li></ul><p>把標題文字色彩作隨機呈現</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-theme:column&#x3D;&quot;&#39;narrow&#39;&quot;id&#x3D;&quot;show-blogs&quot;&gt;</span><br><span class="line">        &lt;h1&gt;All Blog Articles&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;blog in blogs&quot; class&#x3D;&quot;single-blog&quot;&gt;</span><br><span class="line">            &lt;h2 v-rainbow&gt;&#123;&#123;blog.title&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;article&gt;&#123;&#123;blog.body&#125;&#125;&lt;&#x2F;article&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>印出結果：</p><p><img src="https://i.imgur.com/fLtkQZ1.png"></p><h1 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h1><p>Filter 只會改變呈現在 template 的區域而不會改變 data 區域的資料</p><ol><li>使用 Filter 把所有 Blog 文章 title 改成大寫</li><li>使用 Filter 把所有的內容長度不會超過100個字</li></ol><p>main.js</p><p>使用方式跟使用components以及客製化directive都很像</p><ul><li>最前面的字串填入 filter 名稱</li><li>function 參數則是要被操作的內容</li><li>to-uppercase 的部分處理內文並使用方法 <code>toUpperCase()</code></li><li>snippet 則是內文做 slice(0,100) +’…’ 的方式來取出前100個字母以及後方加入…字樣代表內容沒有顯示完全</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filteredAreas sticky content</span></span><br><span class="line">Vue.filter(<span class="string">&#x27;to-uppercase&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.toUpperCase();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.filter(<span class="string">&#x27;snippet&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.slice(<span class="number">0</span>, <span class="number">100</span>) + <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>showBlogs.vue</p><p>主要filter會操作在tag的部分對動態的內容作filter的動作</p><p>撰寫方式是在動態內容的右側加入 “|” filter 名稱即可，不需要操作到 data</p><p><code>&#123;&#123;blog.title | to-uppercase&#125;&#125;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-theme:column&#x3D;&quot;&#39;narrow&#39;&quot;id&#x3D;&quot;show-blogs&quot;&gt;</span><br><span class="line">        &lt;h1&gt;All Blog Articles&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;blog in blogs&quot; class&#x3D;&quot;single-blog&quot;&gt;</span><br><span class="line">            &lt;h2 v-rainbow&gt;&#123;&#123;blog.title | to-uppercase&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;article&gt;&#123;&#123;blog.body | snippet&#125;&#125;&lt;&#x2F;article&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>印出結果：</p><ol><li>title 轉成大寫</li><li>內文最多100個字母並且在末端加上”…”</li></ol><p><img src="https://i.imgur.com/XQEE6Gx.png"></p><h1 id="Custom-Search-Filter"><a href="#Custom-Search-Filter" class="headerlink" title="Custom Search Filter"></a>Custom Search Filter</h1><p>製作一個 filter 功能的 input 可以篩選 blog 的 title 以及文章的內容</p><p>App.vue</p><ol><li>首先做一個 input 區域出來</li><li>為了取得打進去 input 的值使用 v-model </li><li>data 處新增 input 的內容</li><li>使用 computed 設置 function filteredBlogs</li><li>返回 this.blogs.filter(blog) 使用filter 在 blogs 並且返回 match 是 true的部分</li><li>並把 filteredBlogs 引入 v-for 內只呈現篩選過後的內容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-theme:column&#x3D;&quot;&#39;narrow&#39;&quot;id&#x3D;&quot;show-blogs&quot;&gt;</span><br><span class="line">        &lt;h1&gt;All Blog Articles&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;search&quot; placeholder&#x3D;&quot;search blogs&quot;&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;blog in filteredBlogs&quot; class&#x3D;&quot;single-blog&quot;&gt;</span><br><span class="line">            &lt;h2 v-rainbow&gt;&#123;&#123;blog.title | to-uppercase&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;article&gt;&#123;&#123;blog.body | snippet&#125;&#125;&lt;&#x2F;article&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          blogs: [],</span><br><span class="line">          search:&#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.$http.get(&#39;https:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;posts&#39;).then(function(data)&#123;</span><br><span class="line">            console.log(data);</span><br><span class="line">            this.blogs &#x3D; data.body.slice(0,10);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        filteredBlogs:function ()&#123;</span><br><span class="line">            return this.blogs.filter((blog)&#x3D;&gt;&#123;</span><br><span class="line">                return blog.title.match(this.search);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>印出結果：</p><p>只會印出經過篩選的內容( title )</p><p><img src="https://i.imgur.com/0zF6Ryz.png"></p><h1 id="Registering-Things-Locally"><a href="#Registering-Things-Locally" class="headerlink" title="Registering Things Locally"></a>Registering Things Locally</h1><p>這部分要示範如何註冊 directive, filter 在 local 而不需要註冊在 global</p><p>直接用這樣的方式使用在 local 資料夾內即可，就不需要註冊在全域的 main.js 瞜</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filters:&#123;</span><br><span class="line">        toUppercase(value)&#123;</span><br><span class="line">            return value.toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">directives:&#123;</span><br><span class="line">        &#39;rainbow&#39;:&#123;</span><br><span class="line">            bind(el, binding, vnode) &#123;</span><br><span class="line">                el.style.color &#x3D; &#96;#$&#123;Math.random().toString().slice(2,8)&#125;&#96;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h1><blockquote><p>在 Sass 中也有出現，基本上就是一段程式碼可以重複利用在不同的地方</p></blockquote><ol><li>把重複利用的程式碼抽取出來擺到 mixins 裡面</li><li>新建一個 mixins 資料夾</li></ol><p><img src="https://i.imgur.com/b6w8Mmu.png"></p><ol start="3"><li>export 要使用的元件</li></ol><p>mixins.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    filteredBlogs: function () &#123;</span><br><span class="line">      return this.blogs.filter((blog) &#x3D;&gt; &#123;</span><br><span class="line">        return blog.title.match(this.search);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在要使用的本地端引入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import mixin from &#39;..&#x2F;mixins&#x2F;mixins&#39;</span><br></pre></td></tr></table></figure><ol start="5"><li>在要使用的本地端註冊</li></ol><p>屬性名稱 + 陣列內部填入使用元件的名稱(也就是 import 進來那個名字)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mixins:[mixin]</span><br></pre></td></tr></table></figure><ol start="6"><li>這樣就可以在各個檔案使用元件瞜！</li></ol><h1 id="Setting-up-Routing"><a href="#Setting-up-Routing" class="headerlink" title="Setting up Routing"></a>Setting up Routing</h1><blockquote><p>藉由設置 Routing 就可以透過輸入網址的方式前往不同的分頁</p></blockquote><ol><li>使用 <code>npm i vue-router</code> 下載</li><li>在 main.js 引入檔案，並且先設置一個變數待會使用</li></ol><p>main.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import VueRouter from &#39;vue-router&#39;</span><br><span class="line"></span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>設置 routes.js 檔案<br><img src="https://i.imgur.com/Qmqc7by.png"></li></ol><ul><li>引入要使用的分頁</li><li>設定 path, component</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import showBlogs from &#39;.&#x2F;components&#x2F;showBlogs&#39;</span><br><span class="line">import addBlog from &#39;.&#x2F;components&#x2F;addBlog&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default [&#123;</span><br><span class="line">    path: &#39;&#x2F;&#39;,</span><br><span class="line">    component: showBlogs</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;add&#39;,</span><br><span class="line">    component: addBlog</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="4"><li>回到 main.js </li></ol><ul><li>引入剛剛建立好的 routes.js</li><li>並給剛剛建立好的變數輸入屬性 routes: Routes</li><li>並且在 Vue 實體處引入 router 屬性內容為 Router</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Routes from &#39;.&#x2F;routes&#39;</span><br><span class="line"></span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: Routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  render: h &#x3D;&gt; h(App),</span><br><span class="line">  router: router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>就可以做到使用網址切換分頁的動作瞜！</p><p><img src="https://i.imgur.com/F7gWD39.png"></p><p><img src="https://i.imgur.com/1sS1TDE.png"></p><h1 id="Hash-vs-History-Routing"><a href="#Hash-vs-History-Routing" class="headerlink" title="Hash vs History (Routing)"></a>Hash vs History (Routing)</h1><ul><li><code>#</code> 在這邊做到的事情不會對 serve 發送 request，對於 SEO 有不好的影響，預設模式</li><li><code>History</code> 則會對 serve 發送 request</li></ul><p>一般推薦使用 <code>History</code></p><p>當使用 <code>History</code> 時 url 看起來比較正常 <a href="http://localhost:8080/add">http://localhost:8080/add</a> ，但是使用者直接操作這個網址是會得到404的！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: Routes,</span><br><span class="line">  mode: &#39;history&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>參考資源：</p><p><a href="https://book.vue.tw/CH4/4-2-route-settings.html">Kuro Vue 008</a></p><h1 id="Adding-Router-Links"><a href="#Adding-Router-Links" class="headerlink" title="Adding Router Links"></a>Adding Router Links</h1><blockquote><p>使用 router-link 來製作可以跳轉頁面的 navbar</p></blockquote><ol><li>創建新 component header.vue </li></ol><ul><li>使用router-link 並且加上屬性 to=”路徑” </li><li>使用 exact 確保路徑必須完全一致才會啟動 router-link-active 這個 class，讓 active特效正常運作</li></ul><p><img src="https://i.imgur.com/9X5F7JK.gif"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;router-link to&#x3D;&quot;&#x2F;&quot; exact&gt;Blog&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;router-link to&#x3D;&quot;&#x2F;add&quot; exact&gt;Add a new blog&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;nav&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>至 App.vue 引入並且註冊使用 header.vue，並且在template中使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;app-header&gt;&lt;&#x2F;app-header&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import addBlog from &#39;.&#x2F;components&#x2F;addBlog.vue&#39;</span><br><span class="line">import showBlogs from &#39;.&#x2F;components&#x2F;showBlogs.vue&#39;</span><br><span class="line">import showTitle from &#39;.&#x2F;components&#x2F;showTitle.vue&#39;</span><br><span class="line">import header from &#39;.&#x2F;components&#x2F;header.vue&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        &#39;add-blog&#39;:addBlog,</span><br><span class="line">        &#39;show-blogs&#39;:showBlogs,</span><br><span class="line">        &#39;show-title&#39;:showTitle,</span><br><span class="line">        &#39;app-header&#39;: header</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><a href="https://github.com/iamshaunjp/vuejs-playlist/blob/lesson-41/src/components/header.vue">header CSS</a></p><h1 id="Route-Parameters"><a href="#Route-Parameters" class="headerlink" title="Route Parameters"></a>Route Parameters</h1><blockquote><p>這邊主要操作 <code>$route.params.id</code> 來取得每一篇 Blog 的參數並且藉由著個參數來個別顯示 Blog文章</p></blockquote><ol><li>routes.js 內設置新分頁</li></ol><p>這邊 path 設置 :id (id 這個名稱可以自訂) 是為了讓 params 可以抓取到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> singleBlog <span class="keyword">from</span> <span class="string">&#x27;./components/singleBlog&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [&#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    component: showBlogs</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/add&#x27;</span>,</span><br><span class="line">    component: addBlog</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/blog/:id&#x27;</span>,</span><br><span class="line">    component: singleBlog</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="2"><li>設置新分頁 singBlog.vue</li></ol><ul><li>在 data 部分使用 $route.params.id 取得參數內容給 id(在 routes.js 內設置)</li><li>使用 created 擷取 http get 方法來獲得 Blog 單篇的內容並指派給 blog</li><li>並且把 blog 推到 template 內</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;single-blog&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;blog.title&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;article&gt;&#123;&#123;blog.body&#125;&#125;&lt;&#x2F;article&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">             return &#123;</span><br><span class="line">                 id:this.$route.params.id,</span><br><span class="line">                 blog:&#123;&#125;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created () &#123;</span><br><span class="line">            this.$http.get(&#39;http:&#x2F;&#x2F;jsonplaceholder.typicode.com&#x2F;posts&#x2F;&#39; + this.id)</span><br><span class="line">            .then(function(data)&#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">                this.blog &#x3D; data.body;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>到 showBlogs.vue 頁面處理頁面的 title 並修改成 router-link</li></ol><p>使用 v-bind 屬性 to 並且連結處 使用 “‘/blog/‘ + blog.id” 的方式來取得點擊每篇 blog 取得的 id 並藉此跳轉到對應的 blog 內容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-theme:column&#x3D;&quot;&#39;narrow&#39;&quot;id&#x3D;&quot;show-blogs&quot;&gt;</span><br><span class="line">        &lt;h1&gt;All Blog Articles&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;search&quot; placeholder&#x3D;&quot;search blogs&quot;&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;blog in filteredBlogs&quot; class&#x3D;&quot;single-blog&quot;&gt;</span><br><span class="line">            &lt;router-link v-bind:to&#x3D;&quot;&#39;&#x2F;blog&#x2F;&#39; + blog.id&quot;&gt;&lt;h2&gt;&#123;&#123;blog.title | to-uppercase&#125;&#125;&lt;&#x2F;h2&gt;&lt;&#x2F;router-link&gt;</span><br><span class="line">            &lt;article&gt;&#123;&#123;blog.body | snippet&#125;&#125;&lt;&#x2F;article&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>得出結果：</p><p>每一篇的 blog 都會有這些屬性在裡面，所以當我們點擊某一篇 blog 的 title 時，他內部的 router-link 就會接收到他的 blog.id ，並且跳轉到 /blog/ blog.id 的頁面</p><p><img src="https://i.imgur.com/KKcv4Lk.png"></p><p>實作結果：<br><img src="https://i.imgur.com/6El3BNW.gif"></p><h1 id="Posting-to-Firebase"><a href="#Posting-to-Firebase" class="headerlink" title="Posting to Firebase"></a>Posting to Firebase</h1><blockquote><p>使用 firebase 把 blog 內容 POST 上去</p></blockquote><ol><li>到 firebase 官網註冊後，點選 Realtime Database 修改誠如下方讀寫都為 true 並且發布</li></ol><p><img src="https://i.imgur.com/BYokWGL.png"></p><ol start="2"><li>回去資料頁面複製 url 待會做使用</li></ol><p><img src="https://i.imgur.com/ecP0bfu.png"></p><ol start="3"><li>到 addBlog.vue 修改 post </li></ol><p>填入剛剛申請的 firebase url ，並請後面填入格式 posts.json<br>於 url 後面填入要 post 的主體 也就是 this.blog</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">post:function ()&#123;</span><br><span class="line">            this.$http.post(&#39;https:&#x2F;&#x2F;vue-project-dc556-default-rtdb.firebaseio.com&#x2F;posts.json&#39;, this.blog).then(function(data)&#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">                this.submitted &#x3D; true;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>測試 POST 功能</li></ol><p><img src="https://i.imgur.com/C76r1lI.png"></p><p>成功推上 firebase 後會出現這個 response，並且內部有個專屬的 name 可以辨別這是哪一篇 POST</p><p><img src="https://i.imgur.com/k2YM9Pd.png"></p><p>從官網的 Realtime Database 中可以看到剛剛上傳那篇 blog</p><p><img src="https://i.imgur.com/IZUGjIX.png"></p><h1 id="Retrieving-Posts-from-Firebase"><a href="#Retrieving-Posts-from-Firebase" class="headerlink" title="Retrieving Posts from Firebase"></a>Retrieving Posts from Firebase</h1><blockquote><p>剛剛我們順利的把 blog 推上 firebase ，現在要把這些位於資料庫中的資料拿來使用摟！</p></blockquote><h2 id="處理-firebase-取得的資料"><a href="#處理-firebase-取得的資料" class="headerlink" title="處理 firebase 取得的資料"></a>處理 firebase 取得的資料</h2><ul><li>首先我們要修改之前使用 jsonplaceholder 的部分 url 改成 firebase</li></ul><p>這邊的 url 會產生兩個 .then(data):</p><p>第一個：data 會產生結果如下</p><p>裡面有四個很重要的屬性 author, categories, content, title ，但是我們需要的只有 body 的部分因此我們回傳 <code>data.json();</code> 但是他是個 promise 因此迎來第二個 .then(data) 來做處理(下圖可以發現沒有 id 屬性)</p><p><img src="https://i.imgur.com/R9JaE0l.png"></p><p>第二個: data 這次等候 promise 回傳後，得到所有 firebase 上面的貼文物件</p><p><img src="https://i.imgur.com/q4ZO7Ih.png"></p><p>但是因為我們只要貼文內部的 body 部分所以</p><ol><li>首先創立一個空陣列 blogsArray</li><li>使用 for … in 印出所有的 id(也是這邊物件裡面的 key )<br><img src="https://i.imgur.com/sKC6ZBy.png"></li><li>給 data 新增屬性 id  <code>data[key].id = key</code> 如此一來就可以透過 id 辨別 blog</li><li>push 到空陣列中並把已經充滿貼文的 blogsArray 指派給 this.blogs 就可以在 template 中使用</li></ol><p>blogsArray 的內容<br><img src="https://i.imgur.com/YTmUUp8.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">        this.$http.get(&#39;https:&#x2F;&#x2F;vue-project-dc556-default-rtdb.firebaseio.com&#x2F;posts.json&#39;).then(function(data)&#123;</span><br><span class="line">            return data.json();</span><br><span class="line">            </span><br><span class="line">        &#125;).then(function(data)&#123;</span><br><span class="line">            var blogsArray &#x3D; [];</span><br><span class="line">            for(let key in data)&#123;</span><br><span class="line">                &#x2F;&#x2F; console.log(data[key]);</span><br><span class="line">                data[key].id &#x3D; key</span><br><span class="line">                blogsArray.push(data[key]);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; console.log(blogsArray);</span><br><span class="line">            this.blogs &#x3D; blogsArray;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="針對-showBlogs-vue-的呈現"><a href="#針對-showBlogs-vue-的呈現" class="headerlink" title="針對 showBlogs.vue 的呈現"></a>針對 showBlogs.vue 的呈現</h2><p>這邊把 blog 的屬性使用到</p><ul><li>router-link 內部 讓其可以讀取到每篇 blog　的 id</li><li>以及 v-for 要印出的 title, content </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-theme:column&#x3D;&quot;&#39;narrow&#39;&quot;id&#x3D;&quot;show-blogs&quot;&gt;</span><br><span class="line">        &lt;h1&gt;All Blog Articles&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;search&quot; placeholder&#x3D;&quot;search blogs&quot;&gt;</span><br><span class="line">        &lt;div v-for&#x3D;&quot;blog in filteredBlogs&quot; class&#x3D;&quot;single-blog&quot;&gt;</span><br><span class="line">            &lt;router-link v-bind:to&#x3D;&quot;&#39;&#x2F;blog&#x2F;&#39; + blog.id&quot;&gt;&lt;h2&gt;&#123;&#123;blog.title | to-uppercase&#125;&#125;&lt;&#x2F;h2&gt;&lt;&#x2F;router-link&gt;</span><br><span class="line">            &lt;article&gt;&#123;&#123;blog.content | snippet&#125;&#125;&lt;&#x2F;article&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h2 id="調整-singleBlog-vue"><a href="#調整-singleBlog-vue" class="headerlink" title="調整 singleBlog.vue"></a>調整 singleBlog.vue</h2><ul><li><p>一樣先調整 url ，這邊因為必須有轉檔的因素所以 url 內容需要調整，並且因為取得的 blog 只有一條就不需要迭代直接指派給 <code>this. blog</code> 就好</p></li><li><p>在 template 處 使用title, content, author, categories 等屬性 來呈現內容</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">            this.$http.get(&#39;https:&#x2F;&#x2F;vue-project-dc556-default-rtdb.firebaseio.com&#x2F;posts&#x2F;&#39; + this.id+&#39;.json&#39;)</span><br><span class="line">            .then(function(data)&#123;</span><br><span class="line">                return data.json();</span><br><span class="line"></span><br><span class="line">            &#125;).then(function(data) &#123;</span><br><span class="line">                this.blog &#x3D; data;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-JS-2-Tutorial-part-3&quot;&gt;&lt;a href=&quot;#Vue-JS-2-Tutorial-part-3&quot; class=&quot;headerlink&quot; title=&quot;Vue JS 2 Tutorial part 3&quot;&gt;&lt;/a&gt;Vue JS 2 Tutor</summary>
      
    
    
    
    <category term="Vue2" scheme="http://example.com/categories/Vue2/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JS實作練習-Youtube Search Engine</title>
    <link href="http://example.com/2021/03/14/Youtube%20Search%20Engine/"/>
    <id>http://example.com/2021/03/14/Youtube%20Search%20Engine/</id>
    <published>2021-03-14T03:27:20.000Z</published>
    <updated>2021-04-04T16:29:20.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="製作一個-Youtube-影片搜尋網頁"><a href="#製作一個-Youtube-影片搜尋網頁" class="headerlink" title="製作一個 Youtube 影片搜尋網頁"></a>製作一個 Youtube 影片搜尋網頁</h1><h2 id="成品"><a href="#成品" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/A8eMNIt.png"></p><p><a href="https://chiehliu.github.io/git-projects/YoutubeSearchEngine/index.html">成品網址</a></p><h2 id="成品功能"><a href="#成品功能" class="headerlink" title="成品功能:"></a>成品功能:</h2><ol><li>搜尋欄位可以輸入內容並且有 Search 按鈕</li><li>把找到符合輸入內容的影片五篇呈現在下方</li><li>下一頁的按鈕如果還有更多需要內容呈現</li><li>上一頁的按鈕可以回到前五篇的內容</li><li>點擊超連結(圖片以及標題)會在當前頁面直接跳出影片視窗並且有關閉按鈕(iframe)</li></ol><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="html-程式碼"><a href="#html-程式碼" class="headerlink" title="html 程式碼:"></a>html 程式碼:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>YouTube Search Engine<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 來自fansybox官網 --&gt;</span></span><br><span class="line">    &lt;link</span><br><span class="line">      rel=&quot;stylesheet&quot;</span><br><span class="line">      href=&quot;https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.5.7/jquery.fancybox.min.css&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.youtube.com/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>YouTube<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> Search</span><br><span class="line">        Engine</span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;inputval&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search...&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btngetval&quot;</span> <span class="attr">class</span>=<span class="string">&quot;search-btn btn&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;results&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 這邊的年份等下做JS動態處理年年更新 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Copyright © <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;year&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>, All Rights Reserved<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 取得年分 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">&quot;#year&quot;</span>).text(<span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear());</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 來自fancybox官網 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.5.7/jquery.fancybox.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 來自fancybox官方文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">&quot;[data-fancybox]&quot;</span>).fancybox(&#123;</span></span><br><span class="line"><span class="javascript">        toolbar: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        smallBtn: <span class="literal">true</span>,</span></span><br><span class="line">        iframe: &#123;</span><br><span class="line"><span class="javascript">          preload: <span class="literal">false</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h1><h2 id="CSS-完整程式碼"><a href="#CSS-完整程式碼" class="headerlink" title="CSS 完整程式碼"></a>CSS 完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&amp;display=swap&quot;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: end;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="comment">/* 這邊設置高度讓他滿版 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1d1d1d</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#dedede</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Lato&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#06c5a9</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#06c5a9</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.navbar</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">700px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.search</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">148px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">113px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="built_in">rgb</span>(<span class="number">58</span>, <span class="number">57</span>, <span class="number">57</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 全部強制斷行 */</span></span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全域的按鈕長相 */</span></span><br><span class="line">* <span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#444451</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#dedede</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#31312f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#31312f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>小補充:</p><p>無</p><h1 id="JS"><a href="#JS" class="headerlink" title="JS:"></a>JS:</h1><h2 id="取得-Youtube-API-可以操作使用的-url"><a href="#取得-Youtube-API-可以操作使用的-url" class="headerlink" title="取得 Youtube API 可以操作使用的 url"></a>取得 Youtube API 可以操作使用的 url</h2><p><a href="https://orow.github.io/2019/03/17/Youtube-Data-API/">參考網址: Youtube Data API - Search Engine</a></p><p>可以從這邊設定你想要添加的屬性並且操作看看會取得的網址內容且不會消耗配額<br><a href="https://developers.google.com/youtube/v3/docs/search/list">Data API 官方文件 - Try this API</a></p><p>針對這個專案我選用:<br>part: snippet(這個基本上就是我們需要的)</p><p>這邊不要勾 google oauth2.0<br><img src="https://i.imgur.com/391HfLY.png"></p><p>基本上就可以符合這個專案的需求瞜!<br><img src="https://i.imgur.com/ImoLbAV.png"></p><h2 id="url-回傳資料操作"><a href="#url-回傳資料操作" class="headerlink" title="url 回傳資料操作"></a>url 回傳資料操作</h2><p>需要操作的屬性標註在下方圖片中把他們貼到 DOM 就可以搂!</p><p><img src="https://i.imgur.com/EH4BHYn.png"></p><h2 id="變數設置"><a href="#變數設置" class="headerlink" title="變數設置"></a>變數設置</h2><ul><li>nextPageToken - 是換頁最重要的內容必須嵌入網址中</li><li>prevPageToken - 同上</li><li>q - 所有 function 都必須抓取搜尋欄的內容並且必須一致</li><li>output - 把 DOM 的內容貼進去再去做<code>append()</code>,<code>html()</code></li><li>DOM 的變數設置 - 處理資料並且針對屬性去做抓取的動作</li></ul><h2 id="functions"><a href="#functions" class="headerlink" title="functions:"></a>functions:</h2><ul><li>getVideoData(q) -功能:呈現搜尋內容</li></ul><p>使用<code>.ajax()</code>的 GET 方法取得 url 回傳的資料(url 部分必須嵌入參數讓其可以動態改變)</p><p>注意:</p><ol><li>datatype:必須填入 json</li><li>網址後方的 id key 要記得填入</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url: <span class="string">`</span></span><br><span class="line"><span class="string">    https://youtube.googleapis.com/youtube/v3/search?part=snippet&amp;channelType=any&amp;order=relevance&amp;q=<span class="subst">$&#123;q&#125;</span>&amp;type=video&amp;videoCaption=any&amp;videoEmbeddable=any&amp;videoLicense=any&amp;videoType=any&amp;prettyPrint=true&amp;key=AIzaSyDNdqNoZCYqxEJ0nHKh3BWO7Yxc7fLLH2I`</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br></pre></td></tr></table></figure><p>下一步在<code>.ajax()</code>屬性<code>sucess</code>中把回傳的資料處理並且<code>forEach</code>上去 DOM 上面</p><p>最後處理按鈕:</p><p>所有的頁面回傳資料都會包含上、下一頁的 token(如果有的話，沒有會回傳 undefined)，</p><hr><ul><li>nextPage() - 功能:呈現下一頁內容</li></ul><p>跟<code>getVideoData(q)</code>功能幾乎一樣，但是因為是下一頁所以必須以動態的方式抓取 token 以及 q，<br>頁面的 token 已經被傳入按鈕中，所以使用<code>.data()</code>的方式抓取資料(下方有補充資料)並且傳入 url 中，並且一樣會產出頁面 token(因為一樣得輸出上下頁按鈕)並且輸入到<code>getBtn(nextPageToken, prevPageToken)</code>讓下一頁可以吃到 token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url: <span class="string">`</span></span><br><span class="line"><span class="string">    https://youtube.googleapis.com/youtube/v3/search?part=snippet&amp;channelType=any&amp;order=relevance&amp;pageToken=<span class="subst">$&#123;nextPageToken&#125;</span>&amp;q=<span class="subst">$&#123;q&#125;</span>&amp;type=video&amp;videoCaption=any&amp;videoEmbeddable=any&amp;videoLicense=any&amp;videoType=any&amp;prettyPrint=true&amp;key=AIzaSyDNdqNoZCYqxEJ0nHKh3BWO7Yxc7fLLH2I`</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br></pre></td></tr></table></figure><ul><li>prevPage() - 功能:呈現上一頁內容</li></ul><p>功能內容同上，只需要更改參數名稱</p><ul><li>getBtn(nextPageToken, prevPageToken) - 功能:製造按鈕</li></ul><ol><li>按鈕傳遞上一頁/下一頁的 token</li><li>使用判斷是來決定呈現什麼按鈕</li><li>一樣必須定義 q 是搜尋欄輸入的內容</li><li>使用<code>onclick</code>把換頁以及搜尋參數傳入<code>nextPage()</code>,<code>prevPage()</code> function 內</li></ol><h2 id="事件監聽"><a href="#事件監聽" class="headerlink" title="事件監聽"></a>事件監聽</h2><p>功能:取得 input 的值並且輸入 getVideoData(q)內</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 功能:取得input的值並且輸入getVideoData(q)內</span></span><br><span class="line">$(<span class="string">&quot;#btngetval&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">let</span> q = $(<span class="string">&quot;#inputval&quot;</span>).val();</span><br><span class="line">  getVideoData(q);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="iframe-使用"><a href="#iframe-使用" class="headerlink" title="iframe 使用"></a>iframe 使用</h2><h3 id="html-引入-iframe"><a href="#html-引入-iframe" class="headerlink" title="html 引入 iframe"></a>html 引入 iframe</h3><p><a href="https://cdnjs.com/libraries/fancybox">iframe 引用網址</a><br><a href="http://fancyapps.com/fancybox/3/docs/#iframe">iframe 官方文件</a></p><p>最上方引入 iframe 的 CSS 設定一定在官網可以找到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 來自fansybox官網 --&gt;</span></span><br><span class="line">    &lt;link</span><br><span class="line">      rel=&quot;stylesheet&quot;</span><br><span class="line">      href=&quot;https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.5.7/jquery.fancybox.min.css&quot;</span><br><span class="line">    /&gt;</span><br></pre></td></tr></table></figure><p>直接擺入 html 最下方來引入(跟 jQuery 或是 js 檔案引入位置相同)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 來自fancybox官網 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.5.7/jquery.fancybox.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 來自fancybox官方文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&quot;[data-fancybox]&quot;</span>).fancybox(&#123;</span></span><br><span class="line"><span class="javascript">    toolbar: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">    smallBtn: <span class="literal">true</span>,</span></span><br><span class="line">    iframe: &#123;</span><br><span class="line"><span class="javascript">      preload: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="針對頁面超連結的部份"><a href="#針對頁面超連結的部份" class="headerlink" title="針對頁面超連結的部份"></a>針對頁面超連結的部份</h3><p>最後面的部份是 videoId 可以在 id 內找到(這邊是 sucess 後回傳的資料)<br><img src="https://i.imgur.com/mBBBWyj.png"></p><p>使用這串就可以把它們嵌入 iframe 內<br><code>https://www.youtube.com/embed/$&#123;vid.id.videoId&#125;</code></p><p>並且按照這個模式操作 iframe 的區塊</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a data-fancybox data-type=<span class="string">&quot;iframe&quot;</span> data-src=<span class="string">&quot;https://www.youtube.com/embed/$&#123;vid.id.videoId&#125;&quot;</span> href=<span class="string">&quot;javascript:;&quot;</span>&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="小補充"><a href="#小補充" class="headerlink" title="小補充"></a>小補充</h2><p><a href="https://api.jquery.com/data/">.data() - 官方文件</a></p><p><a href="https://api.jquery.com/jQuery.ajax/">.ajax() - 官方文件</a></p><h2 id="JS-完整程式碼"><a href="#JS-完整程式碼" class="headerlink" title="JS 完整程式碼:"></a>JS 完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 功能:取得input的值並且輸入getVideoData(q)內</span></span><br><span class="line">$(<span class="string">&quot;#btngetval&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">let</span> q = $(<span class="string">&quot;#inputval&quot;</span>).val();</span><br><span class="line">  getVideoData(q);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能:呈現搜尋內容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把輸入的資料來搜尋影片使用$.ajax()</span></span><br><span class="line"><span class="comment">// 網址中的參數是輸入的內容成功載入資料後會跑func sucess</span></span><br><span class="line"><span class="comment">// 處理得到的資料並且forEach到DOM上面</span></span><br><span class="line"><span class="comment">// 取出當前網址的下一頁/上一頁的token並且賦予變數並且傳到getBtn裡面</span></span><br><span class="line"><span class="comment">// 把取得到頁面token以及DOM內容分別貼上HTML</span></span><br><span class="line"><span class="comment">// iframe 的使用格式得參照官網 頗複雜</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVideoData</span>(<span class="params">q</span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url: <span class="string">`</span></span><br><span class="line"><span class="string">    https://youtube.googleapis.com/youtube/v3/search?part=snippet&amp;channelType=any&amp;order=relevance&amp;q=<span class="subst">$&#123;q&#125;</span>&amp;type=video&amp;videoCaption=any&amp;videoEmbeddable=any&amp;videoLicense=any&amp;videoType=any&amp;prettyPrint=true&amp;key=AIzaSyDNdqNoZCYqxEJ0nHKh3BWO7Yxc7fLLH2I`</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> videos = res.items;</span><br><span class="line">      <span class="keyword">let</span> nextPageToken = res.nextPageToken;</span><br><span class="line">      <span class="keyword">let</span> prevPageToken = res.prevPageToken;</span><br><span class="line">      <span class="keyword">let</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">      [...videos].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">vid</span>) </span>&#123;</span><br><span class="line">        output += <span class="string">`&lt;section class=&quot;video-area&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;img&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/<span class="subst">$&#123;vid.id.videoId&#125;</span>&quot; href=&quot;javascript:;&quot;</span></span><br><span class="line"><span class="string">                    &gt;&lt;img src=&quot;<span class="subst">$&#123;vid.snippet.thumbnails.<span class="keyword">default</span>.url&#125;</span>&quot;</span></span><br><span class="line"><span class="string">                  /&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &lt;div class=&quot;text&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/<span class="subst">$&#123;vid.id.videoId&#125;</span>&quot; href=&quot;javascript:;&quot;</span></span><br><span class="line"><span class="string">                    &gt;&lt;h3&gt;<span class="subst">$&#123;vid.snippet.title&#125;</span>&lt;/h3&gt;&lt;/a</span></span><br><span class="line"><span class="string">                  &gt;&lt;small&gt;By &lt;span&gt; <span class="subst">$&#123;vid.snippet.channelTitle&#125;</span> &lt;/span&gt; on <span class="subst">$&#123;vid.snippet.publishedAt&#125;</span>&lt;/small&gt;</span></span><br><span class="line"><span class="string">                  &lt;p&gt;<span class="subst">$&#123;vid.snippet.description&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">              &lt;/section&gt;</span></span><br><span class="line"><span class="string">              `</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//貼上搜尋到的結果</span></span><br><span class="line">        $(<span class="string">&quot;.results&quot;</span>).html(output);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// // 加入下一頁按鈕</span></span><br><span class="line">        <span class="keyword">let</span> btn = getBtn(nextPageToken, prevPageToken);</span><br><span class="line">        $(<span class="string">&quot;.buttons&quot;</span>).html(btn);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能:呈現下一頁內容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能跟getVideoData()類似</span></span><br><span class="line"><span class="comment">// 從getBtn()取得當前的q以及nextPageToken來跑下一個頁面的資料出來</span></span><br><span class="line"><span class="comment">// 清空最初的搜尋內容並且forEach下一頁的內容上去DOM</span></span><br><span class="line"><span class="comment">// 一樣得取出當前網址的下一頁/上一頁的token並且賦予變數並且傳到getBtn裡面(因為每個下一頁都可能會有上一頁/下一頁)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nextPageToken = $(<span class="string">&quot;#next-button&quot;</span>).data(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> q = $(<span class="string">&quot;#next-button&quot;</span>).data(<span class="string">&quot;query&quot;</span>);</span><br><span class="line"></span><br><span class="line">  q = $(<span class="string">&quot;#inputval&quot;</span>).val();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空內容</span></span><br><span class="line">  $(<span class="string">&quot;.results&quot;</span>).html(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;.buttons&quot;</span>).html(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url: <span class="string">`</span></span><br><span class="line"><span class="string">    https://youtube.googleapis.com/youtube/v3/search?part=snippet&amp;channelType=any&amp;order=relevance&amp;pageToken=<span class="subst">$&#123;nextPageToken&#125;</span>&amp;q=<span class="subst">$&#123;q&#125;</span>&amp;type=video&amp;videoCaption=any&amp;videoEmbeddable=any&amp;videoLicense=any&amp;videoType=any&amp;prettyPrint=true&amp;key=AIzaSyDNdqNoZCYqxEJ0nHKh3BWO7Yxc7fLLH2I`</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> nextPageToken = data.nextPageToken;</span><br><span class="line">      <span class="keyword">let</span> prevPageToken = data.prevPageToken;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Log Data</span></span><br><span class="line">      <span class="keyword">let</span> res = data.items;</span><br><span class="line">      <span class="keyword">let</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">      [...res].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">vid</span>) </span>&#123;</span><br><span class="line">        output += <span class="string">`&lt;section class=&quot;video-area&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;img&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                  &lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/<span class="subst">$&#123;vid.id.videoId&#125;</span>&quot; href=&quot;javascript:;&quot;</span></span><br><span class="line"><span class="string">                    &gt;&lt;img src=&quot;<span class="subst">$&#123;vid.snippet.thumbnails.<span class="keyword">default</span>.url&#125;</span>&quot;</span></span><br><span class="line"><span class="string">                  /&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &lt;div class=&quot;text&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/<span class="subst">$&#123;vid.id.videoId&#125;</span>&quot; href=&quot;javascript:;&quot;</span></span><br><span class="line"><span class="string">                    &gt;&lt;h3&gt;<span class="subst">$&#123;vid.snippet.title&#125;</span>&lt;/h3&gt;&lt;/a</span></span><br><span class="line"><span class="string">                  &gt;&lt;small&gt;By &lt;span&gt; <span class="subst">$&#123;vid.snippet.channelTitle&#125;</span> &lt;/span&gt; on <span class="subst">$&#123;vid.snippet.publishedAt&#125;</span>&lt;/small&gt;</span></span><br><span class="line"><span class="string">                  &lt;p&gt;<span class="subst">$&#123;vid.snippet.description&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">              &lt;/section&gt;</span></span><br><span class="line"><span class="string">              `</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> btn = getBtn(nextPageToken, prevPageToken);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//貼上下一頁的搜尋結果</span></span><br><span class="line">        $(<span class="string">&quot;.results&quot;</span>).html(output);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display Buttons</span></span><br><span class="line">        $(<span class="string">&quot;.buttons&quot;</span>).html(btn);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能:呈現上一頁內容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本上跟netxPage()功能一樣指示修改參數名稱</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prevPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prevPageToken = $(<span class="string">&quot;#prev-button&quot;</span>).data(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> q = $(<span class="string">&quot;#next-button&quot;</span>).data(<span class="string">&quot;query&quot;</span>);</span><br><span class="line"></span><br><span class="line">  q = $(<span class="string">&quot;#inputval&quot;</span>).val();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空內容</span></span><br><span class="line">  $(<span class="string">&quot;.results&quot;</span>).html(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;.buttons&quot;</span>).html(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    url: <span class="string">`</span></span><br><span class="line"><span class="string">    https://youtube.googleapis.com/youtube/v3/search?part=snippet&amp;channelType=any&amp;order=relevance&amp;pageToken=<span class="subst">$&#123;prevPageToken&#125;</span>&amp;q=<span class="subst">$&#123;q&#125;</span>&amp;type=video&amp;videoCaption=any&amp;videoEmbeddable=any&amp;videoLicense=any&amp;videoType=any&amp;prettyPrint=true&amp;key=AIzaSyDNdqNoZCYqxEJ0nHKh3BWO7Yxc7fLLH2I`</span>,</span><br><span class="line">    dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> nextPageToken = data.nextPageToken;</span><br><span class="line">      <span class="keyword">let</span> prevPageToken = data.prevPageToken;</span><br><span class="line">      <span class="keyword">let</span> res = data.items;</span><br><span class="line">      <span class="keyword">let</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">      [...res].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">vid</span>) </span>&#123;</span><br><span class="line">        output += <span class="string">`&lt;section class=&quot;video-area&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;div class=&quot;img&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                  &lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/<span class="subst">$&#123;vid.id.videoId&#125;</span>&quot; href=&quot;javascript:;&quot;</span></span><br><span class="line"><span class="string">                    &gt;&lt;img src=&quot;<span class="subst">$&#123;vid.snippet.thumbnails.<span class="keyword">default</span>.url&#125;</span>&quot;</span></span><br><span class="line"><span class="string">                  /&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &lt;div class=&quot;text&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;a data-fancybox data-type=&quot;iframe&quot; data-src=&quot;https://www.youtube.com/embed/<span class="subst">$&#123;vid.id.videoId&#125;</span>&quot; href=&quot;javascript:;&quot;</span></span><br><span class="line"><span class="string">                    &gt;&lt;h3&gt;<span class="subst">$&#123;vid.snippet.title&#125;</span>&lt;/h3&gt;&lt;/a</span></span><br><span class="line"><span class="string">                  &gt;&lt;small&gt;By &lt;span&gt; <span class="subst">$&#123;vid.snippet.channelTitle&#125;</span> &lt;/span&gt; on <span class="subst">$&#123;vid.snippet.publishedAt&#125;</span>&lt;/small&gt;</span></span><br><span class="line"><span class="string">                  &lt;p&gt;<span class="subst">$&#123;vid.snippet.description&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">              &lt;/section&gt;</span></span><br><span class="line"><span class="string">              `</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> btn = getBtn(nextPageToken, prevPageToken);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//貼上上一頁的搜尋結果</span></span><br><span class="line">        $(<span class="string">&quot;.results&quot;</span>).html(output);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//貼上按鈕</span></span><br><span class="line">        $(<span class="string">&quot;.buttons&quot;</span>).html(btn);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能:製造按鈕</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按鈕傳遞上一頁/下一頁的token</span></span><br><span class="line"><span class="comment">// 使用判斷是來決定呈現什麼按鈕</span></span><br><span class="line"><span class="comment">// 一樣必須定義q是搜尋欄輸入的內容</span></span><br><span class="line"><span class="comment">// 使用onclick把換頁以及搜尋參數傳入nextPage(),prevPage() function內</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBtn</span>(<span class="params">nextPageToken, prevPageToken</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> q = $(<span class="string">&quot;#inputval&quot;</span>).val();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果沒有下一頁則按鈕不顯示</span></span><br><span class="line">  <span class="keyword">if</span> (nextPageToken === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;.buttons&quot;</span>).html();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 如果沒有上一頁的token則只顯示下一頁</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prevPageToken === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;.buttons&quot;</span>).html(</span><br><span class="line">      <span class="string">`&lt;div class=&quot;button-container&quot;&gt;&lt;button id=&quot;next-button&quot; class=&quot;btn paging-button&quot; data-token=&quot;<span class="subst">$&#123;nextPageToken&#125;</span>&quot; data-query=&quot;<span class="subst">$&#123;q&#125;</span>&quot; onclick=&quot;nextPage();&quot;&gt;Next Page&lt;/button&gt;&lt;/div&gt;`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//其他都顯示</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">&quot;.buttons&quot;</span>).html(</span><br><span class="line">      <span class="string">`&lt;div class=&quot;button-container&quot;&gt;&lt;button id=&quot;prev-button&quot; class=&quot;btn paging-button&quot; data-token=&quot;<span class="subst">$&#123;prevPageToken&#125;</span>&quot; data-query=&quot;<span class="subst">$&#123;q&#125;</span>&quot; onclick=&quot;prevPage();&quot;&gt;Prev Page&lt;/button&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;button-container&quot;&gt;&lt;button id=&quot;next-button&quot; class=&quot;btn paging-button&quot; data-token=&quot;<span class="subst">$&#123;nextPageToken&#125;</span>&quot; data-query=&quot;<span class="subst">$&#123;q&#125;</span>&quot; onclick=&quot;nextPage();&quot;&gt;Next Page&lt;/button&gt;&lt;/div&gt; `</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;製作一個-Youtube-影片搜尋網頁&quot;&gt;&lt;a href=&quot;#製作一個-Youtube-影片搜尋網頁&quot; class=&quot;headerlink&quot; title=&quot;製作一個 Youtube 影片搜尋網頁&quot;&gt;&lt;/a&gt;製作一個 Youtube 影片搜尋網頁&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="Javascript作品" scheme="http://example.com/categories/Javascript%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="jQuery" scheme="http://example.com/tags/jQuery/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="AJAX" scheme="http://example.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>JS-OOP Crash Course (ES5 &amp; ES6)</title>
    <link href="http://example.com/2021/03/08/JS-OOP%20Crash%20Course%20(ES5%20&amp;%20ES6)/"/>
    <id>http://example.com/2021/03/08/JS-OOP%20Crash%20Course%20(ES5%20&amp;%20ES6)/</id>
    <published>2021-03-08T03:27:20.000Z</published>
    <updated>2021-04-04T16:31:38.821Z</updated>
    
    <content type="html"><![CDATA[<p>我們先來解釋一下”<strong>物件</strong>“(object)</p><p>基本上就是一個<strong>物品</strong>，車子、人、房子等等。</p><p>其實”<strong>物件</strong>“就是用程式碼在電腦裡表達出： “這是個物品”，這樣的概念。</p><h2 id="物件的構成"><a href="#物件的構成" class="headerlink" title="物件的構成:"></a>物件的構成:</h2><ul><li>屬性(property) 這就好比車子的廠牌 大小 人的姓名年齡等等各種資訊</li><li>方法(method) 就像是物件的運行方式，車子的發動、煞車，人的吃飯睡覺行走等等</li></ul><p>用一個”物件”來形容人，上方的資料是這個人的屬性，下方的function是方法<br><img src="https://i.imgur.com/WvnsOYh.png"></p><h2 id="基本結構語法-basic-literal"><a href="#基本結構語法-basic-literal" class="headerlink" title="基本結構語法(basic literal)"></a>基本結構語法(basic literal)</h2><p>下方的程式碼解釋了應用屬性(property)的用法以及產生新的object的用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="string">&#x27;helloaaa&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (s1));</span><br><span class="line"><span class="built_in">console</span>.log(s1.toUpperCase());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這邊的 s 用typeof出來會顯示字串不是物件卻可以像object一樣使用屬性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (s2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//不過同時也可以直接把string這個屬性直接賦予他變成物件</span></span><br></pre></td></tr></table></figure><p>window是所有的物件的父母層所以基本上在撰寫的時候可以省略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">alert(<span class="number">1</span>);<span class="comment">//同樣可以執行跟上方一樣的結果</span></span><br></pre></td></tr></table></figure><p>下方的內容是一個object (.)後面接一個 property</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(navigator.appVersion);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>下方我們舉些例子說明:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book1 = &#123;</span><br><span class="line">    title: <span class="string">&#x27;Bool one&#x27;</span>,</span><br><span class="line">    author: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">    year: <span class="string">&#x27;2013&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//結果如下</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;title: &quot;Bool one&quot;, author: &quot;John Doe&quot;, year: &quot;2013&quot;&#125;</span></span><br><span class="line"><span class="comment">author: &quot;John Doe&quot;</span></span><br><span class="line"><span class="comment">title: &quot;Bool one&quot;</span></span><br><span class="line"><span class="comment">year: &quot;2013&quot;</span></span><br><span class="line"><span class="comment">__proto__: Object </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我們想要取得object裡面的key可以使用<code>Object.keys</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(book2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這邊會印出這個object的property像是[&quot;title&quot;, &quot;author&quot;, &quot;year&quot;, &quot;getSUmmary&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果我們想要取得object裡面的值可以使用<code>Object.values</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(book2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//會印出含有book2 values 的 array</span></span><br></pre></td></tr></table></figure><p>如果我們想要使用其中的屬性(property)假設我們想要使用title:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book1.title);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 會印出結果  Book one</span></span><br></pre></td></tr></table></figure><h2 id="物件實字-Object-Literals"><a href="#物件實字-Object-Literals" class="headerlink" title="物件實字 (Object Literals)"></a>物件實字 (Object Literals)</h2><p>物件實字的語法重點：</p><ul><li>會用大括號表示。</li><li>裡面的屬性 (Properties) 用名值對 (name-value pairs) 表示。ex.(title: ‘Book one’,)</li><li>多個屬性以逗號 (comma) 分隔。</li><li>宣告完後，還是可以再增加 Properties 進去。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book1 = &#123;</span><br><span class="line">    title: <span class="string">&#x27;Book one&#x27;</span>,</span><br><span class="line">    author: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">    year: <span class="string">&#x27;2013&#x27;</span>,</span><br><span class="line">    getSUmmary: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1.getSUmmary());</span><br></pre></td></tr></table></figure><h2 id="建構子-constructor"><a href="#建構子-constructor" class="headerlink" title="建構子(constructor)"></a>建構子(constructor)</h2><p>用來建構很大量內容的時候可以使用就不用重複寫很多地方可以建構起來重複使用</p><p>上方的function就是建構子的部分，下面是實體化(Instatiate)建構子使用物件，所以它會印出上方建構子的內容:</p><p><img src="https://i.imgur.com/o2xs5CY.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constructor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Book Initialized..&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instatiate an Object</span></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="keyword">new</span> Book();</span><br><span class="line"><span class="keyword">const</span> book2 = <span class="keyword">new</span> Book();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1.title);</span><br><span class="line"><span class="comment">//這邊一樣可以使用這個來取的它的title &quot;Book One&quot;</span></span><br></pre></td></tr></table></figure><p>如果我們直接輸入:<br>會得到<br><img src="https://i.imgur.com/hqtZbmQ.png"></p><p><img src="https://i.imgur.com/kzLJ5sL.png"></p><p>就不需要再重複寫一次Book的內容以及它的function因為已經建構在上面了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book2.getSUmmary());</span><br></pre></td></tr></table></figure><p>這個部分在上面建構子裡面寫入function這樣之後只要使用<code>console.log(book2.getSUmmary());</code>就可以呼叫了不需要重複寫入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">title, author, year</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">    <span class="built_in">this</span>.author = author;</span><br><span class="line">    <span class="built_in">this</span>.year = year;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.getSUmmary = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型-Prototypes"><a href="#原型-Prototypes" class="headerlink" title="原型(Prototypes)"></a>原型(Prototypes)</h2><p>另一種建構方法(methods)的方式是使用<code>prototype</code></p><p>把它額外拉出來做prototype這樣一樣可以用剛剛一樣的方式取得一樣的效果<code>console.log(book2.getSUmmary());</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getSummary</span></span><br><span class="line">Book.prototype.getSUmmary = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個時候我們在印出book2會發現function已經沒有在裡面了，而是會存在下方prototype裡面，會這樣做的原因是有些時候方法(method)不一定每個物件都要使用就可以這樣把他拉出來需要得再去取用它就好</p><p><img src="https://i.imgur.com/Dioa6SV.png"></p><p>下個範例使用了兩個元素來表達想要獲取得書本歲數</p><ul><li>new Date()取的現在時間</li><li>getFullYear()取得現在年分</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getAge</span></span><br><span class="line">Book.prototype.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> years = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.year;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> is <span class="subst">$&#123;years&#125;</span> years old`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下方會解釋如何操作內容的資料</p><p>我們想要修改裡面的時間，所以設定一個新的年分並且下方設定reviesed為true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Revise / Change Year</span></span><br><span class="line">Book.prototype.revise = <span class="function"><span class="keyword">function</span> (<span class="params">newYear</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.year = newYear;</span><br><span class="line">    <span class="built_in">this</span>.revised = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(book2);</span><br><span class="line">book2.revise(<span class="string">&#x27;2018&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(book2);</span><br></pre></td></tr></table></figure><p>可以得出這個結果</p><p><img src="https://i.imgur.com/BOhPzJ9.png"></p><h2 id="繼承-Inheritance"><a href="#繼承-Inheritance" class="headerlink" title="繼承(Inheritance)"></a>繼承(Inheritance)</h2><p>下方提到繼承這個特性:</p><p>創造一個Magazine來繼承Book的屬性之外還可以添加屬性使用<code>call</code>這個方法來達成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Magazine Constructor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Magazine</span>(<span class="params">title, author, year, month</span>) </span>&#123;</span><br><span class="line">    Book.call(<span class="built_in">this</span>, title, author, year);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.month = month;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Magazine Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mag1 = <span class="keyword">new</span> Magazine(<span class="string">&#x27;Mag One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;Jan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mag1);</span><br></pre></td></tr></table></figure><h3 id="Prototype-methods-Inheritance"><a href="#Prototype-methods-Inheritance" class="headerlink" title="Prototype methods Inheritance"></a>Prototype methods Inheritance</h3><p>prototype的方法卻不能直接繼承所以使用<code>create</code>這個屬性讓Magazine也可以繼承prototype<strong>所有</strong>的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Magazine.prototype = <span class="built_in">Object</span>.create(Book.prototype);</span><br></pre></td></tr></table></figure><p>因為Magazine是繼承上面Book的屬性所以在constructor的部分還是會顯示Book</p><p><img src="https://i.imgur.com/nDROuBV.png"></p><p>如果想要修改的話可以使用constructor這個使用來修改:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use Magazine as Constructor instead of Book</span></span><br><span class="line"></span><br><span class="line">Magazine.prototype.constructor = Magazine;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/tmWKXpa.png"></p><h2 id="創造-Object-create"><a href="#創造-Object-create" class="headerlink" title="創造(Object_create)"></a>創造(Object_create)</h2><p>一開始使用一個const包住兩個方法，接下來使用<code>create</code>來創建新的物件來包含這兩個方法並且下方用新增的方式來把title,author,year加進去新的object book1裡面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object Of Protos</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bookProtos = &#123;</span><br><span class="line">    getSummary: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> years = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.year;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> is <span class="subst">$&#123;years&#125;</span> years old`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="built_in">Object</span>.create(bookProtos);</span><br><span class="line">book1.title = <span class="string">&#x27;Book One&#x27;</span>;</span><br><span class="line">book1.author = <span class="string">&#x27;John Doe&#x27;</span>;</span><br><span class="line">book1.year = <span class="string">&#x27;2013&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/jzu1G7R.png"></p><p>下面這個寫法跟上面出來的結果是一樣的只是換個方式寫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book1 = <span class="built_in">Object</span>.create(bookProtos, &#123;</span><br><span class="line">    title: &#123;<span class="attr">value</span>: <span class="string">&#x27;Book One&#x27;</span>&#125;,</span><br><span class="line">    author: &#123;<span class="attr">value</span>: <span class="string">&#x27;John Doe&#x27;</span>&#125;,</span><br><span class="line">    year: &#123;<span class="attr">value</span>: <span class="string">&#x27;2013&#x27;</span>&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><hr><h2 id="ES6的東西開始"><a href="#ES6的東西開始" class="headerlink" title="ES6的東西開始"></a>ES6的東西開始</h2><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>用法跟上面的建構子很像在做一樣的事情，也一樣需要建構物件以及實體化物件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Object</span></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="keyword">new</span> Book(<span class="string">&#x27;Book One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br></pre></td></tr></table></figure><p>接下來放入方法進去跟前面的寫法差不多，引用跟使用的方式也差不多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getSummary</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> years = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.year;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> is <span class="subst">$&#123;years&#125;</span> years old`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">revise</span>(<span class="params">newYear</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = newYear;</span><br><span class="line">        <span class="built_in">this</span>.revised = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Object</span></span><br><span class="line"><span class="keyword">const</span> book1 = <span class="keyword">new</span> Book(<span class="string">&#x27;Book One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book1);</span><br><span class="line">book1.revise(<span class="string">&#x27;2018&#x27;</span>);</span><br></pre></td></tr></table></figure><p>輸出的結果如下:</p><p><img src="https://i.imgur.com/78nS8BQ.png"></p><h3 id="靜態語法-static"><a href="#靜態語法-static" class="headerlink" title="靜態語法(static)"></a>靜態語法(static)</h3><p>會寫在class裡面，它的特性是不會被已經實體化的物件呼叫比方說，而是被類別本身(class)直接呼叫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">topBookStore</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Barnes &amp; Nobles&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//這邊就是實體化的部分所以book1無法呼叫static方法</span></span><br><span class="line">    <span class="keyword">const</span> book1 = <span class="keyword">new</span> Book(<span class="string">&#x27;Book One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//可以這樣子直接使用</span></span><br><span class="line">    <span class="built_in">console</span>.log(Book.topBookStore());</span><br></pre></td></tr></table></figure><h3 id="Subclasses"><a href="#Subclasses" class="headerlink" title="Subclasses"></a>Subclasses</h3><p>這邊很類似上面繼承的概念只是更新語法更簡潔</p><p>使用到<code>extend</code>來繼承Book的物件，然後一樣使用建構子<code>constructor</code>寫入所有的物件內容，之後使用<code>super</code>繼承物件內容，最後放入要新增的內容即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getSummary</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.title&#125;</span> was written by </span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;<span class="built_in">this</span>.author&#125;</span> in <span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Magazine Subclass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Magazine</span> <span class="keyword">extends</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">title, author, year, month</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(title, author, year);</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Instantiate Magazine</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mag1 = <span class="keyword">new</span> Magazine(<span class="string">&#x27;Mag One&#x27;</span>, <span class="string">&#x27;John Doe&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;Jan&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mag1.getSummary());</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我們先來解釋一下”&lt;strong&gt;物件&lt;/strong&gt;“(object)&lt;/p&gt;
&lt;p&gt;基本上就是一個&lt;strong&gt;物品&lt;/strong&gt;，車子、人、房子等等。&lt;/p&gt;
&lt;p&gt;其實”&lt;strong&gt;物件&lt;/strong&gt;“就是用程式碼在電腦裡表達出： “這是個物品”，這</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-正則表達式 Regular Expression</title>
    <link href="http://example.com/2021/03/01/JS-%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%20Regular%20Expression/"/>
    <id>http://example.com/2021/03/01/JS-%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%20Regular%20Expression/</id>
    <published>2021-03-01T03:27:20.000Z</published>
    <updated>2021-04-04T16:29:09.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-與-Regular-Expression"><a href="#JS-與-Regular-Expression" class="headerlink" title="JS 與 Regular Expression"></a>JS 與 Regular Expression</h1><h2 id="01-正則表達式是什麼-JS-中如何使用"><a href="#01-正則表達式是什麼-JS-中如何使用" class="headerlink" title="01 正則表達式是什麼 ? JS 中如何使用 ?"></a>01 正則表達式是什麼 ? JS 中如何使用 ?</h2><ul><li>做字串模式的判斷</li><li>做格式的過濾如電話、email、身分證</li><li>登入資料判讀、擷取</li><li>電子試算表資料擷取</li><li>單據檔案資料擷取</li></ul><h2 id="正則表達式的呈現"><a href="#正則表達式的呈現" class="headerlink" title="正則表達式的呈現:"></a>正則表達式的呈現:</h2><p><img src="https://i.imgur.com/7zh7HJL.png"></p><h1 id="Regular-Expression-學習資源"><a href="#Regular-Expression-學習資源" class="headerlink" title="Regular Expression 學習資源"></a>Regular Expression 學習資源</h1><p><a href="https://regexone.com/">學習網站</a></p><h2 id="Lesson-1-An-Introduction-and-the-ABCs"><a href="#Lesson-1-An-Introduction-and-the-ABCs" class="headerlink" title="Lesson 1: An Introduction, and the ABCs"></a>Lesson 1: An Introduction, and the ABCs</h2><p>輸入符合全部text的pattern:</p><p>三個text都包含了abc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchabcdefgTo be completed</span><br><span class="line">MatchabcdeTo be completed</span><br><span class="line">Matchabc</span><br><span class="line"></span><br><span class="line">input: abc</span><br></pre></td></tr></table></figure><h2 id="Lesson-1½-The-123s"><a href="#Lesson-1½-The-123s" class="headerlink" title="Lesson 1½: The 123s"></a>Lesson 1½: The 123s</h2><p>輸入符合全部text的pattern，因此除了字母會符合，數字也可以:</p><p>三個text都包含123</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Matchabc123xyzTo be completed</span><br><span class="line">Matchdefine &quot;123&quot;To be completed</span><br><span class="line">Matchvar g &#x3D; 123;</span><br><span class="line"></span><br><span class="line">input: 123 &#x2F; \D*123\D*</span><br></pre></td></tr></table></figure><h2 id="Lesson-2-The-Dot-萬用字元"><a href="#Lesson-2-The-Dot-萬用字元" class="headerlink" title="Lesson 2: The Dot(.)萬用字元"></a>Lesson 2: The Dot(.)萬用字元</h2><p>題目要吻合前三個text並且讓最後一個task被跳過，所以使用跳脫字元()在最後一個(.)之前</p><p>wildcard(通用字元)也就是Dot(.)<br>跳脫字元()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Matchcat.Success</span><br><span class="line">Match896.Success</span><br><span class="line">Match?&#x3D;+.Success</span><br><span class="line">Skipabc1</span><br><span class="line"></span><br><span class="line">input: ...\.</span><br></pre></td></tr></table></figure><h2 id="Lesson-3-Matching-specific-characters-符合特定字元"><a href="#Lesson-3-Matching-specific-characters-符合特定字元" class="headerlink" title="Lesson 3: Matching specific characters(符合特定字元)"></a>Lesson 3: Matching specific characters(符合特定字元)</h2><p>[]內部可以放入想要抓取的字元</p><p>前三個task符合後三個跳過:</p><p>使用中括號([])包含的字元會被特別抓取出來除此之外則跳過</p><p>例如[abc]只會抓取符合單一a,b,c沒有其他的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchcanSuccess</span><br><span class="line">MatchmanSuccess</span><br><span class="line">MatchfanSuccess</span><br><span class="line">SkipdanTo be completed</span><br><span class="line">SkipranTo be completed</span><br><span class="line">Skippan</span><br><span class="line"></span><br><span class="line">input: [cmf]</span><br></pre></td></tr></table></figure><h2 id="Lesson-4-Excluding-specific-characters-排除特定字元"><a href="#Lesson-4-Excluding-specific-characters-排除特定字元" class="headerlink" title="Lesson 4: Excluding specific characters(排除特定字元)"></a>Lesson 4: Excluding specific characters(排除特定字元)</h2><p>排除特定字元</p><p>[^abc]會符合任何字元除了a,b,c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchhogSuccess</span><br><span class="line">MatchdogSuccess</span><br><span class="line">Skipbog</span><br><span class="line"></span><br><span class="line">input: [^b]og</span><br></pre></td></tr></table></figure><h2 id="Lesson-5-Character-ranges-字元的範圍"><a href="#Lesson-5-Character-ranges-字元的範圍" class="headerlink" title="Lesson 5: Character ranges(字元的範圍)"></a>Lesson 5: Character ranges(字元的範圍)</h2><p>\w代表所有字母數字的集合<br>\W代表非字母數字的集合</p><p>使用中括號[] 以及 (-)代表range<br>使用[A-C]選出前三個符合下三個完全沒有ABC所以被篩掉了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchAnaSuccess</span><br><span class="line">MatchBobSuccess</span><br><span class="line">MatchCpcSuccess</span><br><span class="line">SkipaaxTo be completed</span><br><span class="line">SkipbbyTo be completed</span><br><span class="line">Skipccz</span><br><span class="line"></span><br><span class="line">input: [A-C][n-p][a-c]</span><br></pre></td></tr></table></figure><h2 id="Lesson-6-Catching-some-zzz’s-擷取重複的字元"><a href="#Lesson-6-Catching-some-zzz’s-擷取重複的字元" class="headerlink" title="Lesson 6: Catching some zzz’s(擷取重複的字元)"></a>Lesson 6: Catching some zzz’s(擷取重複的字元)</h2><p>擷取重複的字元</p><p>使用 要擷取的字元{數字}</p><p>例如下面的題目擷取z 3次 以及 5次  z{3,5}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchwazzzzzupSuccess</span><br><span class="line">MatchwazzzupSuccess</span><br><span class="line">Skipwazup</span><br><span class="line"></span><br><span class="line">input: waz&#123;3,5&#125;up</span><br></pre></td></tr></table></figure><h2 id="Lesson-7-Mr-Kleene-Mr-Kleene"><a href="#Lesson-7-Mr-Kleene-Mr-Kleene" class="headerlink" title="Lesson 7: Mr. Kleene, Mr. Kleene"></a>Lesson 7: Mr. Kleene, Mr. Kleene</h2><p>(*) 0個或是更多重複</p><p>(+) 1個或是更多重複</p><p>這兩者都可以使用在任何字元或是元字符 (Metacharacter)上面</p><blockquote><p>在POSIX擴展正則表達式裡[1]，定義了14個元字符，它們被作為一般的字符使用時，必須要通過「轉義」（前面加一個反斜槓「\」）來去除他們本身的特殊意義，這些元字符包括：</p><p>開和閉方括號：”[“和”]”<br>反斜線：”&quot;<br>脫字符：”^”<br>美元符號：”$”<br>句號/點：”.”<br>豎線/管道符：”|”<br>問號：”?”<br>星號：”*”<br>加號：”+”<br>開和閉 花括號：”{“和”}”<br>開和閉 小括號：”(“和”)”[2][3]</p></blockquote><p>下方範例可以看到:</p><p>a+ 代表 a是一個以上<br>b* 代表 b可以包含0以及以上<br>c+ 代表 c是一個以上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchaaaabccSuccess</span><br><span class="line">MatchaabbbbcSuccess</span><br><span class="line">MatchaaccSuccess</span><br><span class="line">Skipa</span><br><span class="line"></span><br><span class="line">input: a+b*c+</span><br></pre></td></tr></table></figure><h2 id="Lesson-8-Characters-optional-選擇性符號"><a href="#Lesson-8-Characters-optional-選擇性符號" class="headerlink" title="Lesson 8: Characters optional(?)選擇性符號"></a>Lesson 8: Characters optional(?)選擇性符號</h2><p>範例:</p><p>ab?c =&gt; abc or ac (b是選擇性的)</p><p>中括號124抓取前三個數字 跳過skip</p><p>並且使用?讓s變成選擇性的</p><p>最後跳脫字元?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Match1 file found?Success</span><br><span class="line">Match2 files found?Success</span><br><span class="line">Match24 files found?Success</span><br><span class="line">SkipNo files found.</span><br><span class="line"></span><br><span class="line">input: [124]+files? found\?</span><br></pre></td></tr></table></figure><h2 id="Lesson-9-All-this-whitespace-空白符號"><a href="#Lesson-9-All-this-whitespace-空白符號" class="headerlink" title="Lesson 9: All this whitespace(空白符號)"></a>Lesson 9: All this whitespace(空白符號)</h2><ul><li>space (␣)使用space產生的空白</li><li>tab (\t)使用tab產生的空白</li><li>new line (\n)斷行</li><li>carriage return (\r) 很少使用只有在character terminal</li><li>whitespace special character (\s) 此功能包含以上全部的空白</li><li>(\S)任何不是空格的字元</li></ul><p>這邊我的解法是</p><p>使用數字符號<br>代表第一個數字 \d</p><p>使用跳脫字元加上dot .代表順序後方的dot</p><p>接下來就是\s代表全部的空白處</p><p>最後是abc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">Match1.   abcSuccess</span><br><span class="line">Match2.abcSuccess</span><br><span class="line">Match3.           abcSuccess</span><br><span class="line">Skip4.abcTo be completed</span><br><span class="line"></span><br><span class="line">input: \d\.\s+abc</span><br></pre></td></tr></table></figure><h2 id="Lesson-10-Starting-and-ending-搜尋完整的字句"><a href="#Lesson-10-Starting-and-ending-搜尋完整的字句" class="headerlink" title="Lesson 10: Starting and ending (搜尋完整的字句)"></a>Lesson 10: Starting and ending (搜尋完整的字句)</h2><p>使用 ^…$ 可以包含要搜尋的完整字句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchMission: successfulSuccess</span><br><span class="line">SkipLast Mission: unsuccessfulTo be completed</span><br><span class="line">SkipNext Mission: successful upon capture of target</span><br><span class="line"></span><br><span class="line">input: ^Mission: successful$</span><br></pre></td></tr></table></figure><h2 id="Lesson-11-Match-groups-限定要抓取的範圍"><a href="#Lesson-11-Match-groups-限定要抓取的範圍" class="headerlink" title="Lesson 11: Match groups (()) (限定要抓取的範圍)"></a>Lesson 11: Match groups (()) (限定要抓取的範圍)</h2><p>使用(以及)限定要抓取的範圍</p><p>例如:</p><p>^(IMG\d+.png)$<br>這樣使用會抓取所以有的 IMG數字.png</p><p>如果想要只抓取檔案名稱可以這樣寫:</p><p>^(IMG\d+).png$<br>用()去框在名字的地方限定抓取的範圍只能檔案名稱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Capturefile_record_transcript.pdffile_record_transcriptSuccess</span><br><span class="line">Capturefile_07241999.pdffile_07241999Success</span><br><span class="line">Skiptestfile_fake.pdf.tmp</span><br><span class="line"></span><br><span class="line">input: ^(file.+)\.pdf$</span><br></pre></td></tr></table></figure><h2 id="Lesson-12-Nested-groups-巢狀擷取"><a href="#Lesson-12-Nested-groups-巢狀擷取" class="headerlink" title="Lesson 12: Nested groups(巢狀擷取)"></a>Lesson 12: Nested groups(巢狀擷取)</h2><p>巢狀擷取</p><p>一樣使用括號(())來擷取內容，可以用多層的方式擷取內容中的內容</p><p>範例:</p><p>^(IMG(\d+)).png$<br>這邊會擷取IMG的數字.png然後再擷取只有數字的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">CaptureJan 1987Jan 1987 1987Success</span><br><span class="line">CaptureMay 1969May 1969 1969Success</span><br><span class="line">CaptureAug 2011Aug 2011 2011Success</span><br><span class="line"></span><br><span class="line">input: ^(\D+(\d+))$ or ^(\w+(\d+))$</span><br></pre></td></tr></table></figure><h2 id="Lesson-13-More-group-work"><a href="#Lesson-13-More-group-work" class="headerlink" title="Lesson 13: More group work"></a>Lesson 13: More group work</h2><p>中間多了一個字母一樣要抓取他其他的部份用括號擷取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Capture1280x7201280 720Success</span><br><span class="line">Capture1920x16001920 1600Success</span><br><span class="line">Capture1024x7681024 768Success</span><br><span class="line"></span><br><span class="line">input: ^((\d+)[x](\d+))$ or ^((\d+)x(\d+))$</span><br></pre></td></tr></table></figure><h2 id="Lesson-14-It’s-all-conditional"><a href="#Lesson-14-It’s-all-conditional" class="headerlink" title="Lesson 14: It’s all conditional(|)"></a>Lesson 14: It’s all conditional(|)</h2><p>當作or使用即可(|)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TaskText </span><br><span class="line">MatchI love catsSuccess</span><br><span class="line">MatchI love dogsSuccess</span><br><span class="line">SkipI love logsTo be completed</span><br><span class="line">SkipI love cogs</span><br><span class="line"></span><br><span class="line">input: I love cats|dogs</span><br></pre></td></tr></table></figure><h2 id="Lesson-15-Other-special-characters-其他特殊字元"><a href="#Lesson-15-Other-special-characters-其他特殊字元" class="headerlink" title="Lesson 15: Other special characters(其他特殊字元)"></a>Lesson 15: Other special characters(其他特殊字元)</h2><ul><li>\d 所有數字</li><li>\s 所有空白字元</li><li>\w 所有數字、字母</li></ul><hr><ul><li>\D 所有字母</li><li>\S 所有非空白字元</li><li>\W 所有非數字、字母</li></ul><p>\b 所有單詞</p><p>這邊的練習是個練習用的沙盒可以不用擺上來可以連上去練一下使用regex</p><p><a href="https://regexone.com/lesson/misc_meta_characters">練習網站</a></p><h2 id="YA完成了-第一部分ZZ"><a href="#YA完成了-第一部分ZZ" class="headerlink" title="YA完成了~第一部分ZZ"></a>YA完成了~第一部分ZZ</h2><p><img src="https://i.imgur.com/cLWvW2l.png"></p><h2 id="Practice-Problems"><a href="#Practice-Problems" class="headerlink" title="Practice Problems"></a>Practice Problems</h2><h2 id="Problem-1-Matching-a-decimal-numbers-擷取小數"><a href="#Problem-1-Matching-a-decimal-numbers-擷取小數" class="headerlink" title="Problem 1: Matching a decimal numbers (擷取小數)"></a>Problem 1: Matching a decimal numbers (擷取小數)</h2><p>主要是用[]解的 並且後面加上\d表示數字結尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Match3.14529Success</span><br><span class="line">Match-255.34Success</span><br><span class="line">Match128Success</span><br><span class="line">Match1.9e10Success</span><br><span class="line">Match123,340.00Success</span><br><span class="line">Skip720p</span><br><span class="line"></span><br><span class="line">input: ^[-\.,\de]+\d$</span><br></pre></td></tr></table></figure><h2 id="Problem-2-Matching-phone-numbers"><a href="#Problem-2-Matching-phone-numbers" class="headerlink" title="Problem 2: Matching phone numbers"></a>Problem 2: Matching phone numbers</h2><p>只抓前三個連號都可以辦到搂!基本上電話區碼的部分可以這樣抓</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Capture415-555-1234415Success</span><br><span class="line">Capture650-555-2345650Success</span><br><span class="line">Capture(416)555-3456416Success</span><br><span class="line">Capture202 555 4567202Success</span><br><span class="line">Capture4035555678403Success</span><br><span class="line">Capture1 416 555 9292416Success</span><br><span class="line"></span><br><span class="line">input: (\d&#123;3&#125;)</span><br></pre></td></tr></table></figure><h2 id="Problem-3-Matching-emails"><a href="#Problem-3-Matching-emails" class="headerlink" title="Problem 3: Matching emails"></a>Problem 3: Matching emails</h2><p>排除所有符號後方的字元</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Capturetom@hogwarts.comtomSuccess</span><br><span class="line">Capturetom.riddle@hogwarts.comtom.riddleSuccess</span><br><span class="line">Capturetom.riddle+regexone@hogwarts.comtom.riddleSuccess</span><br><span class="line">Capturetom@hogwarts.eu.comtomSuccess</span><br><span class="line">Capturepotter@hogwarts.compotterSuccess</span><br><span class="line">Captureharry@hogwarts.comharrySuccess</span><br><span class="line">Capturehermione+regexone@hogwarts.comhermioneSuccess</span><br><span class="line"></span><br><span class="line">input: ^([\w\.]*)</span><br></pre></td></tr></table></figure><h2 id="Problem-4-Matching-HTML"><a href="#Problem-4-Matching-HTML" class="headerlink" title="Problem 4: Matching HTML"></a>Problem 4: Matching HTML</h2><p>選取”&lt;”以及後面的字母 就是tag瞜!</p><p>ex. &lt;a or &lt;div</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Capture&lt;a&gt;This is a link&lt;&#x2F;a&gt;aSuccess</span><br><span class="line">Capture&lt;a href&#x3D;&#39;https:&#x2F;&#x2F;regexone.com&#39;&gt;Link&lt;&#x2F;a&gt;aSuccess</span><br><span class="line">Capture&lt;div class&#x3D;&#39;test_style&#39;&gt;Test&lt;&#x2F;div&gt;divSuccess</span><br><span class="line">Capture&lt;div&gt;Hello &lt;span&gt;world&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;divSuccess</span><br><span class="line"></span><br><span class="line">input: &lt;(\w+)</span><br></pre></td></tr></table></figure><h2 id="Problem-5-Matching-specific-filenames"><a href="#Problem-5-Matching-specific-filenames" class="headerlink" title="Problem 5: Matching specific filenames"></a>Problem 5: Matching specific filenames</h2><p>| and $的活用</p><p>選擇jpg or png or gif $(作為結尾)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Skip.bash_profileTo be completed</span><br><span class="line">Skipworkspace.docTo be completed</span><br><span class="line">Captureimg0912.jpgimg0912 jpgSuccess</span><br><span class="line">Captureupdated_img0912.pngupdated_img0912 pngSuccess</span><br><span class="line">Skipdocumentation.htmlTo be completed</span><br><span class="line">Capturefavicon.giffavicon gifSuccess</span><br><span class="line">Skipimg0912.jpg.tmpTo be completed</span><br><span class="line">Skipaccess.lock</span><br><span class="line"></span><br><span class="line">input:(\w+)\.(jpg|png|gif)$</span><br></pre></td></tr></table></figure><h2 id="Problem-6-Trimming-whitespace-from-start-and-end-of-line"><a href="#Problem-6-Trimming-whitespace-from-start-and-end-of-line" class="headerlink" title="Problem 6: Trimming whitespace from start and end of line"></a>Problem 6: Trimming whitespace from start and end of line</h2><p>這邊我使用一開始去掉空白之後抓取全部的文字最後抓取串接以(.)結尾的句子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CaptureThe quick brown fox...The quick brown fox...Success</span><br><span class="line">Capture   jumps over the lazy dog.jumps over the lazy dog.Success</span><br><span class="line"></span><br><span class="line">input: ([^\s+](.+)\.)$</span><br></pre></td></tr></table></figure><h2 id="Problem-7-Extracting-information-from-a-log-file"><a href="#Problem-7-Extracting-information-from-a-log-file" class="headerlink" title="Problem 7: Extracting information from a log file"></a>Problem 7: Extracting information from a log file</h2><p>(\w+)( 純文字以及跳脫字元&quot;(“\</p><p>[\w.]+): 這段是抓取所有文字以及有(.)加上一個(:)</p><p>(\d+))$ 這段是抓取括號以及數字結尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SkipW&#x2F;dalvikvm( 1553): threadid&#x3D;1: uncaught exceptionTo be completed</span><br><span class="line">SkipE&#x2F;( 1553): FATAL EXCEPTION: mainTo be completed</span><br><span class="line">SkipE&#x2F;( 1553): java.lang.StringIndexOutOfBoundsExceptionTo be completed</span><br><span class="line">CaptureE&#x2F;( 1553):   at widget.List.makeView(ListView.java:1727)makeView ListView.java 1727Success</span><br><span class="line">CaptureE&#x2F;( 1553):   at widget.List.fillDown(ListView.java:652)fillDown ListView.java 652Success</span><br><span class="line">CaptureE&#x2F;( 1553):   at widget.List.fillFrom(ListView.java:709)fillFrom ListView.java 709Success</span><br><span class="line"></span><br><span class="line">input: (\w+)\(([\w\.]+):(\d+)\)$</span><br></pre></td></tr></table></figure><h2 id="Problem-8-Parsing-and-extracting-data-from-a-URL"><a href="#Problem-8-Parsing-and-extracting-data-from-a-URL" class="headerlink" title="Problem 8: Parsing and extracting data from a URL"></a>Problem 8: Parsing and extracting data from a URL</h2><p>(\w+):// 這段吃所有的 ://之前的字母</p><p>://([\w-.]+) 使用[]內部包含字母、跳脫字元的- .</p><p>(:(\d+))?  最後幾個(:)之後的數字因為不是每個都有所以上問號讓它們變成optional</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TaskTextCapture Groups </span><br><span class="line">Captureftp:&#x2F;&#x2F;file_server.com:21&#x2F;top_secret&#x2F;life_changing_plans.pdfftp file_server.com 21Success</span><br><span class="line">Capturehttps:&#x2F;&#x2F;regexone.com&#x2F;lesson&#x2F;introduction#sectionhttps regexone.comSuccess</span><br><span class="line">Capturefile:&#x2F;&#x2F;localhost:4040&#x2F;zip_filefile localhost 4040Success</span><br><span class="line">Capturehttps:&#x2F;&#x2F;s3cur3-server.com:9999&#x2F;https s3cur3-server.com 9999Success</span><br><span class="line">Capturemarket:&#x2F;&#x2F;search&#x2F;angry%20birdsmarket searchSuccess</span><br><span class="line"></span><br><span class="line">input: (\w+):&#x2F;&#x2F;([\w\-\.]+)(:(\d+))?</span><br></pre></td></tr></table></figure><h2 id="Problem-X-Infinity-and-beyond"><a href="#Problem-X-Infinity-and-beyond" class="headerlink" title="Problem X: Infinity and beyond!"></a>Problem X: Infinity and beyond!</h2><p><img src="https://i.imgur.com/wTERooE.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS-與-Regular-Expression&quot;&gt;&lt;a href=&quot;#JS-與-Regular-Expression&quot; class=&quot;headerlink&quot; title=&quot;JS 與 Regular Expression&quot;&gt;&lt;/a&gt;JS 與 Regular Expr</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS實作練習-10 JS little practice</title>
    <link href="http://example.com/2021/02/27/[%E4%BD%9C%E5%93%81]10%20JS%20little%20practice/"/>
    <id>http://example.com/2021/02/27/[%E4%BD%9C%E5%93%81]10%20JS%20little%20practice/</id>
    <published>2021-02-26T18:11:36.748Z</published>
    <updated>2021-04-06T11:12:20.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="製作十個小功能-JS-練習-1"><a href="#製作十個小功能-JS-練習-1" class="headerlink" title="製作十個小功能 JS 練習 - 1"></a>製作十個小功能 JS 練習 - 1</h1><h2 id="成品-漢堡選單功能"><a href="#成品-漢堡選單功能" class="headerlink" title="成品: 漢堡選單功能"></a>成品: 漢堡選單功能</h2><p><img src="https://i.imgur.com/INZcJQZ.gif"></p><p><a href="https://chiehliu.github.io/git-projects/10-Project-1-Hour/hamburger/index.html">成品網址</a></p><h2 id="成品功能"><a href="#成品功能" class="headerlink" title="成品功能:"></a>成品功能:</h2><p>點擊漢堡會開關右側欄位</p><h1 id="JS"><a href="#JS" class="headerlink" title="JS:"></a>JS:</h1><ul><li>抓取 btn 以及 nav 後做事件監聽</li><li>當點擊 btn 的時候 nav,btn 的元素會加上或是移除.active 這個 class</li><li><code>toggle()</code>的使用所以有開關的效果</li></ul><h2 id="JS-完整程式碼"><a href="#JS-完整程式碼" class="headerlink" title="JS 完整程式碼:"></a>JS 完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> nav = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;nav&#x27;</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    nav.classList.toggle(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">    btn.classList.toggle(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="html-程式碼"><a href="#html-程式碼" class="headerlink" title="html 程式碼:"></a>html 程式碼:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>☰<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Youtube<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li>當 class .active 加 btn 及 nav 上面時則選單跳出消失則選單消失</li><li>使用簡單的特效取處在進出時稍慢一點<br><code> transition: transform 0.3s ease-in-out;</code></li></ul><h2 id="CSS-完整程式碼"><a href="#CSS-完整程式碼" class="headerlink" title="CSS 完整程式碼"></a>CSS 完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;600&amp;display=swap&quot;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上方為基礎設定 全置中 <span class="attribute">margin</span> <span class="number">0</span> <span class="attribute">border</span>-box 字體設定</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取消三個連結的padding,margin讓它們為0 */</span></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 行間上下的距離 */</span></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="製作十個小功能-JS-練習-2"><a href="#製作十個小功能-JS-練習-2" class="headerlink" title="製作十個小功能 JS 練習 - 2"></a>製作十個小功能 JS 練習 - 2</h1><h2 id="成品-點擊按鈕後跑出通知"><a href="#成品-點擊按鈕後跑出通知" class="headerlink" title="成品: 點擊按鈕後跑出通知"></a>成品: 點擊按鈕後跑出通知</h2><p><img src="https://i.imgur.com/SZ4bNM2.gif"></p><p><a href="https://chiehliu.github.io/git-projects/10-Project-1-Hour/toast-notification/index.html">成品網址</a></p><h2 id="成品功能-1"><a href="#成品功能-1" class="headerlink" title="成品功能:"></a>成品功能:</h2><ol><li>點擊按鈕後跑出通知</li><li>三秒後通知消失</li></ol><h1 id="JS-1"><a href="#JS-1" class="headerlink" title="JS:"></a>JS:</h1><ul><li>抓取 btn 以及 container div</li><li>做事件監聽當點擊 btn 時會跑<code>createNotifiction()</code></li><li>設置<code>setTimeout()</code>定時三秒消失</li></ul><p><code>createNotifiction()</code><br>使用<code>createElement()</code>做 div 出來，給他加上 class .toast(在 toast 做他的修飾)<br>並且<code>appnedChild()</code> notif 到 container 裡面就完成瞜!</p><h2 id="JS-完整程式碼-1"><a href="#JS-完整程式碼-1" class="headerlink" title="JS 完整程式碼:"></a>JS 完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    createNotifiction();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNotifiction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> notif = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    notif.classList.add(<span class="string">&#x27;toast&#x27;</span>);</span><br><span class="line">    container.appendChild(notif);</span><br><span class="line"></span><br><span class="line">    notif.innerText = <span class="string">&#x27;this challenge is crazy&#x27;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        notif.remove();</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h1><h2 id="html-程式碼-1"><a href="#html-程式碼-1" class="headerlink" title="html 程式碼:"></a>html 程式碼:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Click me Pretty Please<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li>CSS 處理.toast 的修飾部分</li></ul><h2 id="CSS-完整程式碼-1"><a href="#CSS-完整程式碼-1" class="headerlink" title="CSS 完整程式碼"></a>CSS 完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;600&amp;display=swap&quot;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*     字體直接繼承body */</span></span><br><span class="line">    <span class="attribute">font-family</span>: inherit;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 把notification定位 */</span></span><br><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 針對notification修飾 */</span></span><br><span class="line"><span class="selector-class">.toast</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="製作十個小功能-JS-練習-3"><a href="#製作十個小功能-JS-練習-3" class="headerlink" title="製作十個小功能 JS 練習 - 3"></a>製作十個小功能 JS 練習 - 3</h1><h2 id="成品-自動輸入文字的跑馬燈"><a href="#成品-自動輸入文字的跑馬燈" class="headerlink" title="成品: 自動輸入文字的跑馬燈"></a>成品: 自動輸入文字的跑馬燈</h2><p><img src="https://i.imgur.com/DzgTev4.gif"></p><p><a href="https://chiehliu.github.io/git-projects/10-Project-1-Hour/auto-write-text/index.html">成品網址</a></p><h2 id="成品功能-2"><a href="#成品功能-2" class="headerlink" title="成品功能:"></a>成品功能:</h2><ul><li>文字會自動輸入在頁面中間</li><li>每 0.1 秒會跑下一段文字</li><li>不會中斷會無限跑下去</li></ul><h1 id="JS-2"><a href="#JS-2" class="headerlink" title="JS:"></a>JS:</h1><ul><li><p><code>slice(begin index,end inedex)</code><br>到 end index “之前”停止提取。<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">slice() MDN</a></p></li><li><p>使用 index++ 讓 inneText 不斷印出每個 slice 擷取的字<br>最後使用判斷式當 index 大於字串長度時歸零從頭開始</p></li><li><p>使用 setInterval 不斷的呼叫 writeText 函式秒 0.1 秒呼叫一次無限循環</p></li></ul><h2 id="JS-完整程式碼-2"><a href="#JS-完整程式碼-2" class="headerlink" title="JS 完整程式碼:"></a>JS 完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;This string is going to show on the browser automatically using Javascript&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerText = text.slice(<span class="number">0</span>, index);</span><br><span class="line"></span><br><span class="line">    index++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &gt; text.length) &#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(writeText, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h1 id="HTML-2"><a href="#HTML-2" class="headerlink" title="HTML"></a>HTML</h1><p>空白配置</p><h1 id="CSS-2"><a href="#CSS-2" class="headerlink" title="CSS:"></a>CSS:</h1><p>基本上也只修飾顏色跟字體</p><h2 id="CSS-完整程式碼-2"><a href="#CSS-完整程式碼-2" class="headerlink" title="CSS 完整程式碼"></a>CSS 完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;600&amp;display=swap&quot;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="製作十個小功能-JS-練習-4"><a href="#製作十個小功能-JS-練習-4" class="headerlink" title="製作十個小功能 JS 練習 - 4"></a>製作十個小功能 JS 練習 - 4</h1><h2 id="成品-點擊按鈕後跳出視窗並且可以關閉"><a href="#成品-點擊按鈕後跳出視窗並且可以關閉" class="headerlink" title="成品: 點擊按鈕後跳出視窗並且可以關閉"></a>成品: 點擊按鈕後跳出視窗並且可以關閉</h2><p><img src="https://i.imgur.com/PfmRNSw.gif"></p><p><a href="https://chiehliu.github.io/git-projects/10-Project-1-Hour/popup/index.html">成品網址</a></p><h2 id="成品功能-3"><a href="#成品功能-3" class="headerlink" title="成品功能:"></a>成品功能:</h2><ul><li>點擊按鈕後跳出視窗並且可以關閉</li><li>改變背景色</li></ul><h1 id="JS-3"><a href="#JS-3" class="headerlink" title="JS:"></a>JS:</h1><ul><li>抓取 open,close 按鈕以及 popup 容器</li><li>open, close 設置事件監聽點擊時加上以及移除 class.active</li></ul><h2 id="JS-完整程式碼-3"><a href="#JS-完整程式碼-3" class="headerlink" title="JS 完整程式碼:"></a>JS 完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> open = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;open&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> close = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;close&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"></span><br><span class="line">open.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    container.classList.add(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">close.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    container.classList.remove(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="HTML-3"><a href="#HTML-3" class="headerlink" title="HTML"></a>HTML</h1><h2 id="html-程式碼-2"><a href="#html-程式碼-2" class="headerlink" title="html 程式碼:"></a>html 程式碼:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;open&quot;</span>&gt;</span>Open<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popup-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popup&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;close&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Popup-btn<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Using JS to pop this up <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-3"><a href="#CSS-3" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li>這邊的切換讓 popup 區塊出現</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.popup-container</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-完整程式碼-3"><a href="#CSS-完整程式碼-3" class="headerlink" title="CSS 完整程式碼"></a>CSS 完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;600&amp;display=swap&quot;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">font-family</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.popup-container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.popup-container</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.popup</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="製作十個小功能-JS-練習-5"><a href="#製作十個小功能-JS-練習-5" class="headerlink" title="製作十個小功能 JS 練習 - 5"></a>製作十個小功能 JS 練習 - 5</h1><h2 id="成品-下紫色愛心雨的背景"><a href="#成品-下紫色愛心雨的背景" class="headerlink" title="成品: 下紫色愛心雨的背景"></a>成品: 下紫色愛心雨的背景</h2><p><img src="https://i.imgur.com/YMmae6Y.gif"></p><p><a href="https://chiehliu.github.io/git-projects/10-Project-1-Hour/purple-heart-rain/index.html">成品網址</a></p><h2 id="成品功能-4"><a href="#成品功能-4" class="headerlink" title="成品功能:"></a>成品功能:</h2><ul><li>下紫色愛心雨</li><li>位置隨機</li><li>動畫延續時間隨機</li></ul><h1 id="JS-4"><a href="#JS-4" class="headerlink" title="JS:"></a>JS:</h1><ul><li><code>createElement(&#39;div&#39;)</code>創造愛心並且加上 class .heart</li><li>把位置做隨機 使用 style.left (其實 right 也可) 使用隨機數串接字串’vw’</li><li>把下降時間作隨機 使用 style.animationDuration 使用隨機數串接字串’s’</li><li>把出現在<code>innerText</code>的部分換成 💜</li><li>把 💜 貼到 body 上面使用<code>appendchild()</code></li><li>最後設置 setTimeout 讓愛心消失</li><li>每個愛心的出現時間 0.3 秒出現一顆<code>setInterval()</code>每 0.3 秒呼叫一次<code>createHeart()</code></li></ul><h2 id="JS-完整程式碼-4"><a href="#JS-完整程式碼-4" class="headerlink" title="JS 完整程式碼:"></a>JS 完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHeart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> heart = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    heart.classList.add(<span class="string">&#x27;heart&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    heart.style.left = <span class="built_in">Math</span>.random() * <span class="number">100</span> + <span class="string">&#x27;vw&#x27;</span>;</span><br><span class="line">    heart.style.animationDuration = <span class="built_in">Math</span>.random() * <span class="number">2</span> + <span class="number">5</span> + <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">    heart.innerText = <span class="string">&#x27;💜&#x27;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(heart);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        heart.remove();</span><br><span class="line">    &#125;, <span class="number">5000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(createHeart, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h1 id="HTML-4"><a href="#HTML-4" class="headerlink" title="HTML"></a>HTML</h1><p>空白配置</p><h1 id="CSS-4"><a href="#CSS-4" class="headerlink" title="CSS:"></a>CSS:</h1><p>heart 的修飾</p><ul><li>畫面一開始保持空白所以設置位置固定在螢幕外面</li><li>這邊把愛心移動到 Y 軸去生出來</li><li>動畫部分設置 延續 0.3 秒(讓愛心不那麼密集) linear 線性(動畫等速移動) forwards(forwards 代表動畫結束會就停在結束階段不會跑回去)</li></ul><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/animation-fill-mode">animation-fill-mode forwards MDN</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function">animation-timing-function linear MDN</a></p><h2 id="CSS-完整程式碼-4"><a href="#CSS-完整程式碼-4" class="headerlink" title="CSS 完整程式碼"></a>CSS 完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;600&amp;display=swap&quot;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.heart</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">1vh</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">animation</span>: fall <span class="number">3s</span> linear forwards;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> fall &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">105vh</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="製作十個小功能-JS-練習-6"><a href="#製作十個小功能-JS-練習-6" class="headerlink" title="製作十個小功能 JS 練習 - 6"></a>製作十個小功能 JS 練習 - 6</h1><h2 id="成品-點擊按鈕更改背景顏色"><a href="#成品-點擊按鈕更改背景顏色" class="headerlink" title="成品: 點擊按鈕更改背景顏色"></a>成品: 點擊按鈕更改背景顏色</h2><p><img src="https://i.imgur.com/w1hsVtY.gif"></p><p><a href="https://chiehliu.github.io/git-projects/10-Project-1-Hour/background-changer/index.html">成品網址</a></p><h2 id="成品功能-5"><a href="#成品功能-5" class="headerlink" title="成品功能:"></a>成品功能:</h2><ul><li>點擊按鈕更改被景色</li></ul><h1 id="HTML-5"><a href="#HTML-5" class="headerlink" title="HTML"></a>HTML</h1><h2 id="html-程式碼-3"><a href="#html-程式碼-3" class="headerlink" title="html 程式碼:"></a>html 程式碼:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Change background<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-5"><a href="#CSS-5" class="headerlink" title="CSS:"></a>CSS:</h1><p>修飾按鈕外觀</p><h2 id="CSS-完整程式碼-5"><a href="#CSS-完整程式碼-5" class="headerlink" title="CSS 完整程式碼"></a>CSS 完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;600&amp;display=swap&quot;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: inherit;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-5"><a href="#JS-5" class="headerlink" title="JS:"></a>JS:</h1><ul><li>抓取 btn 後做事件監聽處理當點擊時觸發<code>randombg()</code></li><li><code>randombg()</code>可以使用 rgba 或是 hsl 的方式用 Math.floor(Math.random()*100)去處理顏色的係數變化並使用樣板字面值（Template literals）<code>$&#123;&#125;</code>嵌入變數做操作</li></ul><h2 id="JS-完整程式碼-5"><a href="#JS-完整程式碼-5" class="headerlink" title="JS 完整程式碼:"></a>JS 完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.background = randomBg();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomBg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return `hsl($&#123;Math.floor(Math.random()*360)&#125;, 100%, 50%)`</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgba(<span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">100</span>)&#125;</span>%, <span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">100</span>)&#125;</span>%, <span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">100</span>)&#125;</span>%, <span class="subst">$&#123;<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">100</span>)&#125;</span>%)`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="製作十個小功能-JS-練習-7"><a href="#製作十個小功能-JS-練習-7" class="headerlink" title="製作十個小功能 JS 練習 - 7"></a>製作十個小功能 JS 練習 - 7</h1><h2 id="成品-製作一個切換頁面背景的按鈕"><a href="#成品-製作一個切換頁面背景的按鈕" class="headerlink" title="成品:製作一個切換頁面背景的按鈕"></a>成品:製作一個切換頁面背景的按鈕</h2><p><img src="https://i.imgur.com/3VY3teh.gif"></p><p><a href="https://chiehliu.github.io/git-projects/10-Project-1-Hour/dark-mode-toggle/index.html">成品網址</a></p><h2 id="成品功能-6"><a href="#成品功能-6" class="headerlink" title="成品功能:"></a>成品功能:</h2><ul><li>製作一個切換頁面背景的按鈕</li><li>切換動畫有時間延遲</li></ul><h1 id="HTML-6"><a href="#HTML-6" class="headerlink" title="HTML"></a>HTML</h1><p>label 處的 for 必須要跟 input 的 id 名稱一樣才能作連動，也就是點擊 label 處 input 的 checkbox 連動，這樣點擊圓圈才有用</p><h2 id="html-程式碼-4"><a href="#html-程式碼-4" class="headerlink" title="html 程式碼:"></a>html 程式碼:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">name</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>using JS to toggle dark mode<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque obcaecati sint, libero dignissimos aliquam natus,</span><br><span class="line">        magnam dolorum iure, porro commodi magni repellendus quis quibusdam accusantium culpa iusto! Unde, debitis</span><br><span class="line">        minima.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-6"><a href="#CSS-6" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li>transition 處理在 body 並且因為背景以及文字都有改變所以都可以加入持續時間以及速度</li><li>label 的部分也會切換顏色所以一樣使用 transition</li><li>label 需要有 blcok 屬性才有辦法設置 width</li><li>input 做隱藏(把打勾框框藏起來)只出現 label(所以要作連動)</li></ul><h2 id="CSS-完整程式碼-6"><a href="#CSS-完整程式碼-6" class="headerlink" title="CSS 完整程式碼"></a>CSS 完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;600&amp;display=swap&quot;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5rem</span>;</span><br><span class="line">    <span class="attribute">transition</span>: background <span class="number">0.3s</span> linear, color <span class="number">0.3s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1f1f1f</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toggle-container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    user-select: none;</span><br><span class="line">    <span class="attribute">transition</span>: background <span class="number">0.3s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.dark</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-6"><a href="#JS-6" class="headerlink" title="JS:"></a>JS:</h1><ul><li><code>e.target.checked</code>是 Boolean 會回傳 true/false 也就是狀態 checked 與否，</li><li>當狀態是 true 則加入 class .dark，flase 的話則移除 class .dark</li><li><code>toggle(要被開關的東西, boolean)</code></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle">toggle MDN</a></p><h2 id="JS-完整程式碼-6"><a href="#JS-完整程式碼-6" class="headerlink" title="JS 完整程式碼:"></a>JS 完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toggle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;toggle&#x27;</span>);</span><br><span class="line"></span><br><span class="line">toggle.addEventListener(<span class="string">&#x27;change&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.toggle(<span class="string">&#x27;dark&#x27;</span>, e.target.checked)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="製作十個小功能-JS-練習-8"><a href="#製作十個小功能-JS-練習-8" class="headerlink" title="製作十個小功能 JS 練習 - 8"></a>製作十個小功能 JS 練習 - 8</h1><h2 id="成品-自己滾動的投影片"><a href="#成品-自己滾動的投影片" class="headerlink" title="成品: 自己滾動的投影片"></a>成品: 自己滾動的投影片</h2><p><img src="https://i.imgur.com/LvYg0DB.gif"></p><p><a href="https://chiehliu.github.io/git-projects/10-Project-1-Hour/carousel/index.html">成品網址</a></p><h2 id="成品功能-7"><a href="#成品功能-7" class="headerlink" title="成品功能:"></a>成品功能:</h2><ul><li>每兩秒換一張投影片</li><li>換到最後一張時會回到最開頭</li><li>有慢進慢出特效</li></ul><h1 id="HTML-7"><a href="#HTML-7" class="headerlink" title="HTML"></a>HTML</h1><h2 id="html-程式碼-5"><a href="#html-程式碼-5" class="headerlink" title="html 程式碼:"></a>html 程式碼:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;imgs&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://images.unsplash.com/photo-1599394022918-6c2776530abb?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1458&amp;q=80&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://images.unsplash.com/photo-1593642632559-0c6d3fc62b89?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1500&amp;q=80&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://images.unsplash.com/photo-1599423300746-b62533397364?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1500&amp;q=80&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://images.unsplash.com/photo-1599561046251-bfb9465b4c44?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1492&amp;q=80&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-7"><a href="#CSS-7" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li>使用 overflow:hidden 來隱藏圖片(不然因為 flex 圖片會並排並且出現卷軸)</li><li>在 image-container 做水平移動特效</li><li>使用<code>object-fit: cover;</code>讓圖片不失真</li></ul><h2 id="CSS-完整程式碼-7"><a href="#CSS-完整程式碼-7" class="headerlink" title="CSS 完整程式碼"></a>CSS 完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;600&amp;display=swap&quot;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.carousel</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.5s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-7"><a href="#JS-7" class="headerlink" title="JS:"></a>JS:</h1><ul><li>抓取<code>translsateX</code>設定的視窗也就是 image-container</li><li>為了取得 index 長度抓取所有的 img tag</li><li>用 style 加上水平移動並且使用 index * img 寬度 切換投影片位置剛剛好到下一張</li><li>使用判斷式當 idx 加到超過 img 長度-1 時回到開頭(因為只要跑三次)</li></ul><h2 id="JS-完整程式碼-7"><a href="#JS-完整程式碼-7" class="headerlink" title="JS 完整程式碼:"></a>JS 完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imgs = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;imgs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> img = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;#img&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    idx++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (idx &gt; img.length - <span class="number">1</span>) &#123;</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    imgs.style.transform = <span class="string">`translateX(<span class="subst">$&#123;-idx * <span class="number">500</span>&#125;</span>px)`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(run, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><h1 id="製作十個小功能-JS-練習-9"><a href="#製作十個小功能-JS-練習-9" class="headerlink" title="製作十個小功能 JS 練習 - 9"></a>製作十個小功能 JS 練習 - 9</h1><h2 id="成品-聲音按鈕"><a href="#成品-聲音按鈕" class="headerlink" title="成品: 聲音按鈕"></a>成品: 聲音按鈕</h2><p><img src="https://i.imgur.com/7ZM93DI.png"></p><p><a href="https://chiehliu.github.io/git-projects/10-Project-1-Hour/sound-board/index.html">成品網址</a></p><h2 id="成品功能-8"><a href="#成品功能-8" class="headerlink" title="成品功能:"></a>成品功能:</h2><ul><li>點擊按鈕會產生音效</li><li>當點擊下一個按鈕時上一個的音效會停止</li><li>下一次點擊同樣的按鈕時音效會歸零從頭開始跑</li></ul><h1 id="HTML-8"><a href="#HTML-8" class="headerlink" title="HTML"></a>HTML</h1><ul><li>設置 audio tag 並且引入檔案</li></ul><h2 id="html-程式碼-6"><a href="#html-程式碼-6" class="headerlink" title="html 程式碼:"></a>html 程式碼:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;clapping&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sound/clapping.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;boo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sound/boo.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;gasp&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sound/gasp.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-8"><a href="#CSS-8" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li>處理按鈕外觀</li></ul><h2 id="CSS-完整程式碼-8"><a href="#CSS-完整程式碼-8" class="headerlink" title="CSS 完整程式碼"></a>CSS 完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;600&amp;display=swap&quot;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-family</span>: inherit;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1.5rem</span> <span class="number">3rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-8"><a href="#JS-8" class="headerlink" title="JS:"></a>JS:</h1><ul><li>建立陣列內容是音檔的 id 名稱</li><li>使用 forEach 個別印出所有的音檔的名字並且產生按鈕</li><li>處理點擊事件 1.先引入停止函式 2.開始撥放音效(這個順序讓聲音還是可以正常撥出)</li><li>停止函式的部分會把音效暫停<code>song.pause();</code>並且把撥放時間歸零<code>song.currentTime = 0;</code></li></ul><h2 id="JS-完整程式碼-8"><a href="#JS-完整程式碼-8" class="headerlink" title="JS 完整程式碼:"></a>JS 完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sounds = [</span><br><span class="line">    <span class="string">&#x27;clapping&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;boo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;gasp&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">sounds.forEach(<span class="function">(<span class="params">sound</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.createElement(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    btn.classList.add(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(btn);</span><br><span class="line"></span><br><span class="line">    btn.innerText = sound;</span><br><span class="line"></span><br><span class="line">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        stopSounds()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(sound).play();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopSounds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    sounds.forEach(<span class="function">(<span class="params">sound</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> song = <span class="built_in">document</span>.getElementById(sound);</span><br><span class="line"></span><br><span class="line">        song.pause();</span><br><span class="line">        song.currentTime = <span class="number">0</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="製作十個小功能-JS-練習-10"><a href="#製作十個小功能-JS-練習-10" class="headerlink" title="製作十個小功能 JS 練習 - 10"></a>製作十個小功能 JS 練習 - 10</h1><h2 id="成品-有-ZOOM-效果的圖片"><a href="#成品-有-ZOOM-效果的圖片" class="headerlink" title="成品: 有 ZOOM 效果的圖片"></a>成品: 有 ZOOM 效果的圖片</h2><p><img src="https://i.imgur.com/u2uLBko.gif"></p><p><a href="https://chiehliu.github.io/git-projects/10-Project-1-Hour/zoom-effect/index.html">成品網址</a></p><h2 id="成品功能-9"><a href="#成品功能-9" class="headerlink" title="成品功能:"></a>成品功能:</h2><ul><li>隨著滑鼠移動會有放大效果</li><li>滑鼠離開視窗效果就會解除</li></ul><h1 id="HTML-9"><a href="#HTML-9" class="headerlink" title="HTML"></a>HTML</h1><h2 id="html-程式碼-7"><a href="#html-程式碼-7" class="headerlink" title="html 程式碼:"></a>html 程式碼:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://images.unsplash.com/photo-1582769923195-c6e60dc1d8dc?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">alt</span>=<span class="string">&quot;purple kitty&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS-9"><a href="#CSS-9" class="headerlink" title="CSS:"></a>CSS:</h1><ul><li><code>overflow: hidden;</code>可以限制圖片在原地，非常重要</li></ul><h2 id="CSS-完整程式碼-9"><a href="#CSS-完整程式碼-9" class="headerlink" title="CSS 完整程式碼"></a>CSS 完整程式碼</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">@import</span> url(<span class="string">&quot;https://fonts.googleapis.com/css2?family=Poppins:wght@200;400;600&amp;display=swap&quot;</span>);</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: rebeccapurple;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Poppins&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">transform-origin</span>: center center;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS-9"><a href="#JS-9" class="headerlink" title="JS:"></a>JS:</h1><ul><li><p>抓取 container, img</p></li><li><p>clientX 代表滑鼠在瀏覽器上面的位置</p></li><li><p>offsetLeft 距離<br><img src="https://i.imgur.com/1AHmrcV.png"></p></li><li><p>故<code>x = e.clientX - e.target.offsetLeft;</code>就等於圖片上面的 x 軸的位置，y 軸同理</p></li></ul><p><img src="https://i.imgur.com/qGgPrP5.png"></p><ul><li><code>scale</code>以及<code>transform-origin</code>的組合技會友針對位置放大的效果</li><li>透過 mouseleave 事件把組合技還原</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow">overflow MDN</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft">offsetLeft MDN</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX">clientX MDN</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/transform-origin">transform-origin MDN</a></p><h2 id="JS-完整程式碼-9"><a href="#JS-完整程式碼-9" class="headerlink" title="JS 完整程式碼:"></a>JS 完整程式碼:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> img = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line"></span><br><span class="line">container.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> x = e.clientX - e.target.offsetLeft;</span><br><span class="line">    <span class="keyword">const</span> y = e.clientY - e.target.offsetTop;</span><br><span class="line"></span><br><span class="line">    img.style.transformOrigin = <span class="string">`<span class="subst">$&#123;x&#125;</span>px <span class="subst">$&#123;y&#125;</span>px`</span>;</span><br><span class="line">    img.style.transform = <span class="string">&#x27;scale(2)&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">container.addEventListener(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    img.style.tranformOrigin = <span class="string">&#x27;0 0&#x27;</span>;</span><br><span class="line">    img.style.transform = <span class="string">&#x27;scale(1)&#x27;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;製作十個小功能-JS-練習-1&quot;&gt;&lt;a href=&quot;#製作十個小功能-JS-練習-1&quot; class=&quot;headerlink&quot; title=&quot;製作十個小功能 JS 練習 - 1&quot;&gt;&lt;/a&gt;製作十個小功能 JS 練習 - 1&lt;/h1&gt;&lt;h2 id=&quot;成品-漢堡選單功能</summary>
      
    
    
    
    <category term="Javascript作品" scheme="http://example.com/categories/Javascript%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="jQuery" scheme="http://example.com/tags/jQuery/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>SASS實作練習-Clothes Store - SASS Project</title>
    <link href="http://example.com/2021/02/24/[%E4%BD%9C%E5%93%81]Clothes-Store-SASS-Project/"/>
    <id>http://example.com/2021/02/24/[%E4%BD%9C%E5%93%81]Clothes-Store-SASS-Project/</id>
    <published>2021-02-24T03:27:20.000Z</published>
    <updated>2021-04-06T10:55:30.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="製作一個衣服購物網站"><a href="#製作一個衣服購物網站" class="headerlink" title="製作一個衣服購物網站"></a>製作一個衣服購物網站</h1><h2 id="成品"><a href="#成品" class="headerlink" title="成品:"></a>成品:</h2><p><img src="https://i.imgur.com/hEEPgbC.jpg"></p><p><a href="https://chiehliu.github.io/git-projects/clothesStore/index.html">成品網址</a></p><h2 id="成品功能"><a href="#成品功能" class="headerlink" title="成品功能:"></a>成品功能:</h2><p>1.有兩條 navbar 其中一條有 hover 出下拉選單<br>2.投影片區域每 4 秒更新，淺入淺出特效<br>3.商品區域 hover 出現價錢跟購買按鈕並且商品帶有透明特效<br>4.下方 see more 按鈕有特效處理<br>5.footer 區域字樣以及按鈕做 hover 變色，input 內部區域做 focus 外框變色<br>6.RWD 針對 1200, 1000, 760, 560px 大小作處理</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="html-程式碼"><a href="#html-程式碼" class="headerlink" title="html 程式碼:"></a>html 程式碼:</h2><p><a href="https://github.com/chiehLiu/git-projects/blob/clothesStore/clothesStore/index.html">html.index</a></p><h1 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS:"></a>SCSS:</h1><p>下面我以資料夾做分類解析</p><h1 id="main-scss"><a href="#main-scss" class="headerlink" title="main.scss"></a>main.scss</h1><h2 id="main-scss-1"><a href="#main-scss-1" class="headerlink" title="main.scss"></a>main.scss</h2><p>處理全部的 import 並且按照資料夾分類處理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;abstracts&#x2F;variables&quot;;</span><br><span class="line">@import &quot;abstracts&#x2F;mixins&quot;;</span><br><span class="line">@import &quot;base&#x2F;base&quot;;</span><br><span class="line"></span><br><span class="line">@import &quot;layout&#x2F;header&quot;;</span><br><span class="line">@import &quot;layout&#x2F;navigation&quot;;</span><br><span class="line">@import &quot;layout&#x2F;slideshow&quot;;</span><br><span class="line">@import &quot;layout&#x2F;products&quot;;</span><br><span class="line">@import &quot;layout&#x2F;footer&quot;;</span><br><span class="line"></span><br><span class="line">@import &quot;components&#x2F;logo&quot;;</span><br><span class="line">@import &quot;components&#x2F;heading&quot;;</span><br><span class="line">@import &quot;components&#x2F;dropdown&quot;;</span><br><span class="line">@import &quot;components&#x2F;button&quot;;</span><br></pre></td></tr></table></figure><h1 id="base"><a href="#base" class="headerlink" title="base"></a>base</h1><h2 id="base-scss"><a href="#base-scss" class="headerlink" title="_base.scss"></a>_base.scss</h2><h3 id="全域字體大小處理"><a href="#全域字體大小處理" class="headerlink" title="全域字體大小處理"></a>全域字體大小處理</h3><p>作者想要使用 10px 代替 16px 作為基礎 1rem 因為比較方便<br>所以 10/16=0.625 使用到趴數上面就是 62.5%</p><h3 id="container-包裹住全體物件的容器直接設計-grid-框架上去"><a href="#container-包裹住全體物件的容器直接設計-grid-框架上去" class="headerlink" title=".container 包裹住全體物件的容器直接設計 grid 框架上去"></a><code>.container</code> 包裹住全體物件的容器直接設計 grid 框架上去</h3><p>作者把物件都用這些 grid 出現的格線去做排列，並且把上面的元素固定在規畫好的格線內</p><ul><li>grid-template-columns 設定每一行的每個區塊怎麼分大小以及分幾塊</li><li>grid-template-rows 設定每一列的每個區塊怎麼分大小以及分幾塊</li><li>grid-row-gap 行的間距</li></ul><p><img src="https://i.imgur.com/hwQ8u4N.jpg"></p><ul><li><code>minmax()</code>使用兩個參數(最大值, 最小值) 功能使內容物不跑版</li><li>fr 代表可用空間的分塊的每一塊的的代表假設寫成 1fr,1fr,1fr 代表區塊分成三塊並且大小相同<br>寫成 2fr,1fr,1fr 代表第一塊是兩倍大其他兩個大小相同</li><li>max/min-content 代表所屬 block 的最大以及最小值下方範例使用<code>min-content</code>代表最小所以都是最小單位也就是內容物多大這個空間就多大</li><li>使用函式<code>color()</code>取用 map <code>$colors</code>裡面的內容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    font-family: &#39;Josefin Sans&#39;, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 這邊因為作者想要使用10px代替16px作為基礎 1rem 因為比較方便</span><br><span class="line">&#x2F;&#x2F; 所以10&#x2F;16&#x3D;0.625 使用到趴數上面就是62.5%</span><br><span class="line">html &#123;</span><br><span class="line">    font-size: 62.5%;</span><br><span class="line"></span><br><span class="line">    @include response(md) &#123;</span><br><span class="line">        font-size: 56.25%;</span><br><span class="line">        &#x2F;&#x2F;9&#x2F;16 &#x3D; 56.25;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @include response(sm) &#123;</span><br><span class="line">        font-size: 50%;</span><br><span class="line">        &#x2F;&#x2F;8&#x2F;16 &#x3D; 56.25;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; minmax使用兩個參數(最大值, 最小值) 功能使內容物不跑版</span><br><span class="line">&#x2F;&#x2F; fr代表可用空間的分塊的每一塊的的代表假設寫成 1fr,1fr,1fr代表區塊分成三塊並且大小相同</span><br><span class="line">&#x2F;&#x2F; 寫成 2fr,1fr,1fr代表第一塊是兩倍大其他兩個大小相同</span><br><span class="line">&#x2F;&#x2F; max&#x2F;min-content 代表所屬block的最大以及最小值下方範例使用min-content代表最小所以都是最小單位</span><br><span class="line">&#x2F;&#x2F;使用函式color取用map $colors裡面的內容</span><br><span class="line">.container &#123;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: minmax(6rem, 1fr) repeat(8, minmax(min-content, 16rem)) minmax(6rem, 1fr);</span><br><span class="line">    grid-template-rows: repeat(4, min-content);</span><br><span class="line">    grid-row-gap: 1.6rem;</span><br><span class="line">    background-color: color(tertiary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="abstracts"><a href="#abstracts" class="headerlink" title="abstracts"></a>abstracts</h1><h2 id="variables-scss"><a href="#variables-scss" class="headerlink" title="_variables.scss"></a>_variables.scss</h2><p>設置顏色，文字的 function</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$colors: (primary:#333,</span><br><span class="line">    secondary:#ffe,</span><br><span class="line">    tertiary:#f2f0f1,</span><br><span class="line">    quaternary:#f5b149,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">@function color($color-name) &#123;</span><br><span class="line">    @return map-get($colors, $color-name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$font-sizes:(xl:3rem,</span><br><span class="line">    lg:2.5rem,</span><br><span class="line">    md:2rem,</span><br><span class="line">    sm:1.8rem,</span><br><span class="line">    xs:1.6rem);</span><br><span class="line"></span><br><span class="line">@function size($size) &#123;</span><br><span class="line">    @return map-get($font-sizes, $size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mixins-scss"><a href="#mixins-scss" class="headerlink" title="_mixins.scss"></a>_mixins.scss</h2><h3 id="navigation"><a href="#navigation" class="headerlink" title="navigation"></a>navigation</h3><p>first-nav/second-nav 重複的地方直接擷取近來這邊:</p><ul><li>display</li><li>定位 space-around</li><li>height</li><li>list-style</li><li>link 部分字體的修飾以及 hover 特效</li></ul><h3 id="flexPosition-justCont-center-alignIte-center"><a href="#flexPosition-justCont-center-alignIte-center" class="headerlink" title="flexPosition($justCont: center, $alignIte:center)"></a>flexPosition($justCont: center, $alignIte:center)</h3><p>預設全置中</p><ul><li>display: flex</li><li>justify-content: $justCont</li><li>align-items: $alignIte</li></ul><h3 id="footerList"><a href="#footerList" class="headerlink" title="footerList"></a>footerList</h3><ul><li>處理 footer 文字部分修飾</li><li>hover 特效</li></ul><h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3><p>處理全部的 RWD<br>並且使用 if 判斷式下方舉一個做例子:</p><p>判斷的地方填入 sm,md,lg,xl 來做數字的代替，並且使用@content 來代替不同的處理內容會寫在各處要被處理的地方裡面這邊的@content 比較像個代表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@if($breakpoint&#x3D;&#x3D;xl) &#123;</span><br><span class="line">        @media(max-width:1200px) &#123;</span><br><span class="line">            @content;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="components"><a href="#components" class="headerlink" title="components"></a>components</h1><h2 id="buttons-scss"><a href="#buttons-scss" class="headerlink" title="_buttons.scss"></a>_buttons.scss</h2><p><img src="https://i.imgur.com/F2N4TI8.png"></p><p>處理 products 區域下方的 See More btn:</p><ol><li>position 定位 relative</li><li>寬高</li><li>定位部分選擇 space-around</li></ol><h3 id="hover-特效"><a href="#hover-特效" class="headerlink" title="hover 特效:"></a>hover 特效:</h3><p><img src="https://i.imgur.com/bidBhwR.gif"></p><p>主要處理整個背景伸長 箭頭旋轉、伸長特效</p><ul><li>寬度增加</li><li>文字變色</li><li>箭頭尖端處移動<br>設定三條直線的 div 並且作 Z 軸旋轉，為了因應 hover 特效則處理水平移動</li><li>箭柄伸長<br>設定的直線做水平移動達到伸長特效</li></ul><h2 id="dropdown-scss"><a href="#dropdown-scss" class="headerlink" title="_dropdown.scss"></a>_dropdown.scss</h2><p>使用<code>::after</code>做出 icon 效果<br><img src="https://i.imgur.com/aizQeh8.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;::after &#123;</span><br><span class="line">        font-family: &#39;Font Awesome 5 Free&#39;;</span><br><span class="line">        content: &#39;\f078&#39;;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>處理 hover 特效碰到才會出現不然一般呈現隱藏以及透明</p><p><img src="https://i.imgur.com/Ub0GVKo.gif"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;:hover .dropdown &#123;</span><br><span class="line">        visibility: visible;</span><br><span class="line">        opacity: 1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用<code>@mixin navigation</code>裡面的文字變色特效以及文字修飾</p><h3 id="小三角形凸起處"><a href="#小三角形凸起處" class="headerlink" title="小三角形凸起處"></a>小三角形凸起處</h3><p>使用<code>&amp;::before</code>來做出右上角的尖角<br><img src="https://i.imgur.com/O8FevAH.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">border-right: 15px solid transparent;</span><br><span class="line">border-bottom: 15px solid darken(color(tertiary), 5%);</span><br><span class="line">border-left: 15px solid transparent;</span><br></pre></td></tr></table></figure><h2 id="heading-scss"><a href="#heading-scss" class="headerlink" title="_heading.scss"></a>_heading.scss</h2><p>大標題文字修飾<br><img src="https://i.imgur.com/4eU3ZFp.png"></p><p>使用 gird-colum/row 抓取位置後開始修飾文字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.heading &#123;</span><br><span class="line">    grid-column: 1&#x2F;-1;</span><br><span class="line">    grid-row: 2 &#x2F; 3;</span><br><span class="line">    text-align: center;</span><br><span class="line"></span><br><span class="line">    &amp;-text &#123;</span><br><span class="line">        font-family: &#39;Great Vibes&#39;, cursive;</span><br><span class="line">        font-size: size(xl)*2;</span><br><span class="line">        font-weight: lighter;</span><br><span class="line">        letter-spacing: 0.5rem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="logo-scss"><a href="#logo-scss" class="headerlink" title="_logo.scss"></a>_logo.scss</h2><p><img src="https://i.imgur.com/tea4ivA.png"></p><p>使用 gird-colum/row 抓取位置後開始修飾圖片並且高度設定 100%做 RWD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.logo &#123;</span><br><span class="line">    grid-column: 1&#x2F;2;</span><br><span class="line">    grid-row: 1&#x2F;2;</span><br><span class="line">    padding: 1rem;</span><br><span class="line"></span><br><span class="line">    &amp;-img &#123;</span><br><span class="line">        width: 10rem;</span><br><span class="line">        height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h1><h2 id="header-scss"><a href="#header-scss" class="headerlink" title="_header.scss"></a>_header.scss</h2><p>在最外層的 gird 容器內再 grid 的一次並且再度劃分行、列的大小</p><p>以行舉例:<br>三個區塊紅 minmax(6rem, 1fr)黃(repeat)綠 minmax(6rem, 1fr)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minmax(10rem, 1fr) repeat(7, minmax(min-content, 16rem)) minmax(10rem, 1fr);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/W5LeISF.png"></p><p><img src="https://i.imgur.com/VcwwHao.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.header &#123;</span><br><span class="line">    grid-column: 1 &#x2F; -1;</span><br><span class="line">    grid-row: 1 &#x2F; 2;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: minmax(10rem, 1fr) repeat(7, minmax(min-content, 16rem)) minmax(10rem, 1fr);</span><br><span class="line">    grid-template-rows: repeat(3, min-content);</span><br><span class="line">    grid-gap: 2rem;</span><br><span class="line">    z-index: 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="navigation-scss"><a href="#navigation-scss" class="headerlink" title="_navigation.scss"></a>_navigation.scss</h2><p>使用<code>@mixin navigation</code> 修飾 navbar 文字</p><p>基本上都在操作 RWD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.second-nav &#123;</span><br><span class="line">    grid-column: 3&#x2F;8;</span><br><span class="line">    grid-row: 3&#x2F;4;</span><br><span class="line">    @include navigation;</span><br><span class="line"></span><br><span class="line">    @include response(lg) &#123;</span><br><span class="line">        grid-column: 2&#x2F;9;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @include response(md) &#123;</span><br><span class="line">        grid-column: 1&#x2F;-1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="slideshow-scss"><a href="#slideshow-scss" class="headerlink" title="_slideshow.scss"></a>_slideshow.scss</h2><p>幻燈片 slide 特效配上 fade in&amp;out 每四秒跑一張<br><img src="https://i.imgur.com/6I0c1rT.png"></p><ul><li>使用 grid 抓好位置</li><li>設定 position:relative 待會給 description 坐定位使用</li><li>寬度設定 100%做 RWD 長度抓 80vh 螢幕大小</li><li>RWD 部分更換 vh 大小很直觀</li></ul><h3 id="每張-slide-處理"><a href="#每張-slide-處理" class="headerlink" title="每張 slide 處理"></a>每張 slide 處理</h3><ul><li>每張 slide 長寬繼承父層</li><li>必須先把預設做隱藏不然會 20 秒會才跑第一個動畫</li><li>避免圖片失真<code>object-fit: cover</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&amp;-slide &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 使用定位之後會讓所有圖片疊再一起，最後一張在最上層</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        width: inherit;</span><br><span class="line">        height: inherit;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 這邊如果不把slide隱藏掉的話20s過後才會開始跑動畫</span><br><span class="line">        visibility: hidden;</span><br><span class="line">        opacity: 0;</span><br><span class="line">        animation: slideshow 20s linear infinite;</span><br><span class="line"></span><br><span class="line">        img &#123;</span><br><span class="line">            width: inherit;</span><br><span class="line">            height: inherit;</span><br><span class="line">            &#x2F;&#x2F; 避免圖片失真</span><br><span class="line">            object-fit: cover;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="slide-特效處理"><a href="#slide-特效處理" class="headerlink" title="slide 特效處理"></a>slide 特效處理</h3><p>先建立 list 後跑 each loop 可以得到這個效果出現在 main.css 裡面<br><img src="https://i.imgur.com/7tcMPJk.png"></p><p>list:每 4 秒建立一個</p><p>each loop:<br>使用<code>nth-child()</code>選取指定元素並且內部參數放入動態的變數<code>#&#123;&#125;</code>再使用<code>nth()</code>抓取要迭代的內容<code>$item</code>的第一部分，animation-delay 的部份則抓取<code>$item</code>的第二部分也就是秒數</p><p>@keyframes 動畫名稱</p><p>製作動畫內容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用list 建立第幾個元素以及delay幾秒</span><br><span class="line">$animList: 1 0s,</span><br><span class="line">2 4s,</span><br><span class="line">3 8s,</span><br><span class="line">4 12s,</span><br><span class="line">5 16s;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用nth(前面擺入每個要被個別印出的的元素也就是(1 0s)(2 4s)的代表參數, 後方會擺入index從1開始算起)</span><br><span class="line">@each $item in $animList &#123;</span><br><span class="line">    .slideshow-slide:nth-child(#&#123;nth($item,1)&#125;) &#123;</span><br><span class="line">        animation-delay: nth($item, 2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 這邊製作fade in&#x2F;out 的特效頭跟尾都處理隱藏以及透明達到這樣的效果</span><br><span class="line">@keyframes slideshow &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        visibility: hidden;</span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    2% &#123;</span><br><span class="line">        visibility: visible;</span><br><span class="line">        opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    18% &#123;</span><br><span class="line">        visibility: visible;</span><br><span class="line">        opacity: 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    20% &#123;</span><br><span class="line">        visibility: hidden;</span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        visibility: hidden;</span><br><span class="line">        opacity: 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="products-scss"><a href="#products-scss" class="headerlink" title="_products.scss"></a>_products.scss</h2><p><img src="https://i.imgur.com/OH9RHss.png"></p><p>商品陳列區域包含一個具有 hover 特效的按鈕</p><p>商品也有 hover 特效，沒有 hover 的時候會隱藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&amp;:hover .product-description &#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">        visibility: visible;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;:hover .product-img &#123;</span><br><span class="line">        opacity: .5;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/MWNCkAL.gif"></p><p>商品描述欄位</p><p>基本處理一些內文背景的修飾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&amp;-description &#123;</span><br><span class="line">       position: absolute;</span><br><span class="line">       top: 50%;</span><br><span class="line">       left: 50%;</span><br><span class="line">       transform: translate(-50%, -50%);</span><br><span class="line">       background-color: transparentize(color(secondary), .4);</span><br><span class="line">       padding: 2rem;</span><br><span class="line">       border: .1rem solid color(primary);</span><br><span class="line">       border-radius: .5rem;</span><br><span class="line">       color: color(primary);</span><br><span class="line">       text-align: center;</span><br><span class="line">       opacity: 0;</span><br><span class="line">       visibility: hidden;</span><br><span class="line">       transition: all 1s .5s;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>商品內文區塊的整體修飾</p><p>標題/價錢/按鈕</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&amp;-heading &#123;</span><br><span class="line">            font-size: size(xl);&#125;</span><br><span class="line"></span><br><span class="line">&amp;-price &#123;</span><br><span class="line">            font-size: size(lg);</span><br><span class="line">            font-weight: 300;</span><br><span class="line">            margin: 1rem 0;&#125;</span><br><span class="line"></span><br><span class="line">&amp;-btn &#123;</span><br><span class="line">            font-size: size(xs);</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            color: color(quaternary);</span><br><span class="line">            display: block;</span><br><span class="line">            padding: .5rem 1rem;</span><br><span class="line">            border: .1rem solid color(quaternary);</span><br><span class="line">            background-color: lighten(color(primary), 20%);&#125;</span><br></pre></td></tr></table></figure><h2 id="footer-scss"><a href="#footer-scss" class="headerlink" title="_footer.scss"></a>_footer.scss</h2><h3 id="聯絡資訊"><a href="#聯絡資訊" class="headerlink" title="聯絡資訊"></a>聯絡資訊</h3><ul><li>更多資訊欄位</li><li>sign up 欄位</li><li>聯絡資訊欄位</li></ul><p><img src="https://i.imgur.com/EkIRMXd.png"></p><p>這邊很聰明的地方是針對最左最右兩邊做處理的時候直接使用<code>@mixin</code>處理重複的部分<br>也就是 footerList 這個部分直接統一文字修飾處理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@mixin footerList &#123;</span><br><span class="line">    &amp;-heading &#123;</span><br><span class="line">        font-size: size(lg);</span><br><span class="line">        color: color(primary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;-item &#123;</span><br><span class="line">        list-style: none;</span><br><span class="line">        margin: 1rem 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;-link &#123;</span><br><span class="line">        font-size: size(xs);</span><br><span class="line">        text-decoration: none;</span><br><span class="line">        color: lighten(color(primary), 15%);</span><br><span class="line">        transition: color .2s;</span><br><span class="line"></span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            color: lighten(color(primary), 35%);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><img src="https://i.imgur.com/dNxmJ8o.gif"></p><p>中間針對 input 區域四個框框處理 focus 特效的<code>not()</code>只排除 submit 對其他三個處理 border 變色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&amp;:focus:not([type&#x3D;&quot;submit&quot;]) &#123;</span><br><span class="line">                border: .1rem solid darken(color(quaternary), 30%);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="socialMedia"><a href="#socialMedia" class="headerlink" title="socialMedia"></a>socialMedia</h3><p><img src="https://i.imgur.com/CwJM2kk.png"></p><p>建立一個(index 顏色)的 list 並且把內容使用 each loop 個別迭代進去每一個 social-icon 使用<code>nth-child()</code>來選取各個並且元素後個別填入該文字以及邊框顏色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$socialMediaColors:1 #3b5998,</span><br><span class="line">2 #b31217,</span><br><span class="line">3 #dc4e41,</span><br><span class="line">4 #55acee,</span><br><span class="line">5 #517fa4,</span><br><span class="line">6 #0077b5;</span><br><span class="line"></span><br><span class="line">@each $color in $socialMediaColors &#123;</span><br><span class="line">    .social-icons-item:nth-child(#&#123;nth($color,1)&#125;) .social-icons-link &#123;</span><br><span class="line">        color: nth($color, 2);</span><br><span class="line">        border: .1rem solid nth($color, 2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得出這個結果<br><img src="https://i.imgur.com/9VKa9PL.png"></p><h1 id="MAIN-CSS-完整程式碼"><a href="#MAIN-CSS-完整程式碼" class="headerlink" title="MAIN.CSS 完整程式碼"></a>MAIN.CSS 完整程式碼</h1><p><a href="https://github.com/chiehLiu/git-projects/blob/clothesStore/clothesStore/css/main.css">main.css</a></p><p>小補充:</p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout">grid MDN</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/minmax()">grid minmax() MDN</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column">grid-column MDN</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/gap">gap (grid-gap) MDN</a><br><a href="https://github.com/chiehLiu/git-projects/blob/clothesStore/clothesStore/index.html">order felx items MDN</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;製作一個衣服購物網站&quot;&gt;&lt;a href=&quot;#製作一個衣服購物網站&quot; class=&quot;headerlink&quot; title=&quot;製作一個衣服購物網站&quot;&gt;&lt;/a&gt;製作一個衣服購物網站&lt;/h1&gt;&lt;h2 id=&quot;成品&quot;&gt;&lt;a href=&quot;#成品&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="HTML, CSS 作品" scheme="http://example.com/categories/HTML-CSS-%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="SASS" scheme="http://example.com/tags/SASS/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="Grid" scheme="http://example.com/tags/Grid/"/>
    
  </entry>
  
  <entry>
    <title>JS-The Weird Part Of Javascript - part 2(一萬字)</title>
    <link href="http://example.com/2021/02/18/JS-The%20Weird%20Part%20Of%20Javascript%20-%20part%202/"/>
    <id>http://example.com/2021/02/18/JS-The%20Weird%20Part%20Of%20Javascript%20-%20part%202/</id>
    <published>2021-02-18T03:27:20.000Z</published>
    <updated>2021-04-04T16:31:14.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="物件與函式-Objects-And-Functions"><a href="#物件與函式-Objects-And-Functions" class="headerlink" title="物件與函式 (Objects And Functions)"></a>物件與函式 (Objects And Functions)</h1><blockquote><p>在其他程式語言中物件、函式是兩種完全不同的存在，但是在JS裡面它們非常相似</p></blockquote><h2 id="Objects-And-The-Dot"><a href="#Objects-And-The-Dot" class="headerlink" title="Objects And The Dot"></a>Objects And The Dot</h2><ul><li>物件(objects)是鍵值配對 (name:value pair) 的集合(不一定只有一對)</li><li>物件內可以包含有純值(Primitives)、另一個物件(Objects)、函式Function(或稱方法method)</li><li>上面標示的0x001是記憶體內部位置的範例，就像是它們的地址</li></ul><p><img src="https://i.imgur.com/zt3XHMD.png"></p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>這邊是為了作範例而這樣製作物件，不過會有更好的方式會在後面的章節介紹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">person[<span class="string">&quot;firstname&quot;</span>] = <span class="string">&quot;Tony&quot;</span>;</span><br><span class="line">person[<span class="string">&quot;lastname&quot;</span>] = <span class="string">&quot;Alicea&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstNameProperty = <span class="string">&quot;firstname&quot;</span>;</span><br><span class="line"></span><br><span class="line">person.address = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.address.street = <span class="string">&quot;111 Main St.&quot;</span>;</span><br><span class="line">person.address.city = <span class="string">&quot;London&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">//得到object</span></span><br><span class="line"><span class="built_in">console</span>.log(person[<span class="string">&quot;firstname&quot;</span>]); <span class="comment">//得到Tony</span></span><br><span class="line"><span class="built_in">console</span>.log(person[firstNameProperty])<span class="comment">//得到Tony</span></span><br><span class="line"><span class="built_in">console</span>.log(person.firstname);<span class="comment">//得到Tony</span></span><br><span class="line"><span class="built_in">console</span>.log(person.address.street); <span class="comment">//得到111 Main St.</span></span><br><span class="line"><span class="built_in">console</span>.log(person.address.city);<span class="comment">//得到London</span></span><br></pre></td></tr></table></figure><ol><li>我們設置一個物件person，並且新增兩個屬性firstname,lastname</li><li>把firstname指派給變數，一樣可以使用變數取得新增的內容</li><li>使用(.)可以更方便的新增屬性以及取得物件內容</li><li>使用 [ ] , (.) 這兩個運算子都能取得物件內容以及新增屬性</li></ol><p><img src="https://i.imgur.com/tLJUO9h.png"></p><p>[ ]  運算子</p><ul><li>需要使用字串型態</li><li>可使用變數指派的方式使用</li></ul><p>(.) 運算子</p><ul><li>編譯器可以直接閱讀不需要使用字串型態</li><li>不可使用變數指派方式使用</li><li>更簡潔易讀</li></ul><p><img src="https://i.imgur.com/QFtKBuI.png"></p><h1 id="物件、物件實字-Objects-And-Object-Literals"><a href="#物件、物件實字-Objects-And-Object-Literals" class="headerlink" title="物件、物件實字(Objects And Object Literals)"></a>物件、物件實字(Objects And Object Literals)</h1><ul><li>為了創造物件我們可以使用{ } 是 <code>new Object();</code>的縮寫</li><li>{} 不是運算子</li><li>JS引擎會判斷使用{ } 就是正在創造物件</li><li>只要用{ } 來建立物件的語法，就稱為物件實字 (Object Literals)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Tony = &#123;<span class="attr">firstname</span>:<span class="string">&#x27;Tony&#x27;</span>,<span class="attr">lastname</span>:<span class="string">&#x27;Alicea&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Tony);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Tony = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.firstname = <span class="string">&quot;Tony&quot;</span>;</span><br><span class="line">person.lastname = <span class="string">&quot;Alicea&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Tony);</span><br></pre></td></tr></table></figure><p>會印出一樣的結果<br><img src="https://i.imgur.com/aUcJqIY.png"></p><p><strong>物件創建在物件之內</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Tony = &#123;</span><br><span class="line">    firstname:<span class="string">&quot;Tony&quot;</span></span><br><span class="line">    address:&#123;</span><br><span class="line">        street:<span class="string">&#x27;111 Main St.&#x27;</span>,</span><br><span class="line">        city:<span class="string">&#x27;New York&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>創建在函式內部</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">person</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;HI&#x27;</span> + person)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">greet(&#123;</span><br><span class="line">firstname:<span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">lastname:<span class="string">&#x27;Doe&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>使用在增添屬性上面</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tony.company = &#123;</span><br><span class="line">    street: <span class="string">&#x27;333 Second St.&#x27;</span>,</span><br><span class="line">    companyName: <span class="string">&#x27;Sucess&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="框架小叮嚀-Framework-Aside"><a href="#框架小叮嚀-Framework-Aside" class="headerlink" title="框架小叮嚀(Framework Aside)"></a>框架小叮嚀(Framework Aside)</h1><ul><li>JS是沒有namespace，因為{ }的關係不需要</li><li>可以使用{ } 創造出物件來假扮命名空間</li><li>在框架或是函式庫的原始碼中很常看到這樣的使用方式</li></ul><h2 id="Faking-Namespaces"><a href="#Faking-Namespaces" class="headerlink" title="Faking Namespaces"></a>Faking Namespaces</h2><h3 id="命名空間-Namespace"><a href="#命名空間-Namespace" class="headerlink" title="命名空間(Namespace)"></a>命名空間(Namespace)</h3><p>專門給變數以及函式使用的空間，讓同樣名字的變數或是函式可以做區隔</p><h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h3><p>兩個變數名稱一樣時上方的變數會被複寫，因此印出Hola!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hola!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greet); <span class="comment">// Renders Hola!</span></span><br></pre></td></tr></table></figure><p>為了避免上面的複寫情況發生，我們可以使用Faking Namespaces，創造一個物件來包裹住這些變數，這樣就能避免變數或是函式之間名字相同的衝突或是複寫的狀況發生摟!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hola!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> english = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> spanish = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">english.greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line">spanish.greet = <span class="string">&#x27;Hola!&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h3><p>命名空稱使用的{ }物件可以做很多層:</p><p>把greet包裹在greeting裡面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> english = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">english.greeting = &#123;&#125;;</span><br><span class="line">english.greeting.greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(english);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/xHDptD5.png"></p><p>也可以使用物件實字:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> english = &#123;</span><br><span class="line">    greeting:&#123;</span><br><span class="line">        greet:<span class="string">&quot;Hello!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(english);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/MNGbIRI.png"></p><h1 id="JSON以及物件實字-JSON-And-Object-Literals"><a href="#JSON以及物件實字-JSON-And-Object-Literals" class="headerlink" title="JSON以及物件實字(JSON And Object Literals)"></a>JSON以及物件實字(JSON And Object Literals)</h1><ul><li>JSON (JavaScript Object Notation)</li><li>跟物件的型態非常相似</li><li>有數個方法可以使用來轉換JSON</li></ul><p>一般物件型態:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objectLiteral = &#123;</span><br><span class="line">    firstname: <span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">    isAProgrammer: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>JSON型態:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;firstname&quot;</span>: <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;isAProgrammer&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>轉換物件成JSON格式可以使用<code>JSON.stringify()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(objectLiteral);</span><br></pre></td></tr></table></figure><p>轉換JSON為物件給JS使用<code>JSON.parse()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonValue = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123; &quot;firstname&quot;: &quot;Mary&quot;, &quot;isAProgrammer&quot;: true &#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="函式就是物件-Function-Are-Objects"><a href="#函式就是物件-Function-Are-Objects" class="headerlink" title="函式就是物件(Function Are Objects)"></a>函式就是物件(Function Are Objects)</h1><h2 id="First-Class-Functions"><a href="#First-Class-Functions" class="headerlink" title="First Class Functions"></a>First Class Functions</h2><ul><li>你可以對函式做對於其他類型(字串、數字、物件、布林值等)都可以做的事情</li><li>可以指派函式為變數</li><li>可以把函式當成參數給其他函式使用</li><li>可以在literal syntax中使用函式</li></ul><p><img src="https://i.imgur.com/Uc94cSq.png"></p><p>函式是一種特殊的物件，但正因為它是物件所以他可以使用純值、物件、函式</p><p>以及兩種特殊的屬性 </p><ol><li>name(非必須，有匿名函式)</li><li>code也就是使用者撰寫的程式碼並且它是可以被呼叫的”Invocable”()</li></ol><h2 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h2><p>能成功地給函式加上屬性代表函式真的是一種物件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet.language = <span class="string">&#x27;English&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greet.language);</span><br></pre></td></tr></table></figure><ol><li>設置一個函式greet，內容為印出hi</li><li>給函式加上屬性</li><li>印出greet.language</li></ol><p>得出結果 正是加上去的屬性<br><img src="https://i.imgur.com/31dfkx9.png"></p><h2 id="“Invocable”"><a href="#“Invocable”" class="headerlink" title="“Invocable”()"></a>“Invocable”()</h2><p><img src="https://i.imgur.com/eyOntey.png"></p><ul><li>當創造這個greet 函式時，它會被放到記憶體裡(以目前的例子會放到全域物件裡)</li><li>函式會有個名字屬性 greet</li><li>函式會有code屬性也就是 <code>console.log(&quot;h1&quot;);</code></li><li>然而當呼叫greet()這邊使用括弧來呼叫函式</li></ul><h2 id="作者非常強調"><a href="#作者非常強調" class="headerlink" title="作者非常強調"></a>作者非常強調</h2><blockquote><p>JS的函式就是物件</p></blockquote><h1 id="函式陳述式、函式表達式-Function-Statements-And-Function-Expressions"><a href="#函式陳述式、函式表達式-Function-Statements-And-Function-Expressions" class="headerlink" title="函式陳述式、函式表達式(Function Statements And Function Expressions)"></a>函式陳述式、函式表達式(Function Statements And Function Expressions)</h1><h2 id="表達式-Expression"><a href="#表達式-Expression" class="headerlink" title="表達式(Expression)"></a>表達式(Expression)</h2><ul><li>它不必須存在變數之中</li><li>一段會創造值(value)的程式碼</li></ul><h3 id="表達式範例"><a href="#表達式範例" class="headerlink" title="表達式範例"></a>表達式範例</h3><ul><li>(=),(+)運算子都會回傳結果，因此他們兩個都是表達式</li></ul><p><code>var a;</code></p><p><img src="https://i.imgur.com/QWDWw1J.png"></p><ul><li>只要有回傳值就是表達式(下方回傳物件)</li></ul><p><img src="https://i.imgur.com/Nwn6KsN.png"></p><h2 id="陳述式-statement"><a href="#陳述式-statement" class="headerlink" title="陳述式(statement)"></a>陳述式(statement)</h2><p>判斷式if 就是個很好的例子</p><ul><li>不會返回值</li><li>無法把if判斷式指派給變數</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a ===<span class="number">3</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函式陳述式範例"><a href="#函式陳述式範例" class="headerlink" title="函式陳述式範例"></a>函式陳述式範例</h2><ul><li>一開始就會被寫進記憶體中</li><li>具有Hoisting特性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這段函式它不會回傳值因為它沒有被呼叫，所以它就是個函式陳述式，只代表它被放置於記憶體中，也就代表著<strong>Hositing</strong></p><p>因此我們可以這樣使用:</p><ol><li>先呼叫函式</li><li>撰寫函式本體</li><li>依舊可以印出結果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">greet();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函式表達式範例"><a href="#函式表達式範例" class="headerlink" title="函式表達式範例"></a>函式表達式範例</h2><ul><li><p>一開始不會被寫進記憶體</p></li><li><p>執行時建立這個函數物件使用指向該函數記憶體的變數進行呼叫(也就是指派給變數做呼叫)</p></li><li><p>匿名函式的部分就是函式表達式</p><p><img src="https://i.imgur.com/T0hnU0W.png"></p></li></ul><p>注意: 這邊可以發現匿名函式的部分就是函式表達式，因為它會產生值</p><ol><li>創造匿名函式</li><li>把函式指派給變數 anonymousGreet</li><li>使用”()”  anonymousGreet()</li><li>就可以呼叫此匿名函式瞜</li></ol><p>#關於匿名函式的部分，其實可以命名，但是基於程式碼簡潔的關係以及其實函式位置已經綁訂於變數所以命名這部分是比較多餘的</p><h2 id="函式表達式無法做Hoisting"><a href="#函式表達式無法做Hoisting" class="headerlink" title="函式表達式無法做Hoisting"></a>函式表達式無法做Hoisting</h2><ul><li>因為變數的預設值為undefined</li><li>要到變數被執行了才會知道它的值，所以只會先顯示undefined那當然不是個函式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">anonymousGreet();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anonymousGreet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1 &#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/OtTr7EZ.png"></p><h2 id="把函式作為參數丟進另一個函式"><a href="#把函式作為參數丟進另一個函式" class="headerlink" title="把函式作為參數丟進另一個函式"></a>把函式作為參數丟進另一個函式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>把函式做完參數傳送</li><li>這樣的寫法其實就是下方範例，也就是<a href="#First-Class-Functions">First Class Functions</a>的概念</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br></pre></td></tr></table></figure><h1 id="Conceptual-Aside"><a href="#Conceptual-Aside" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="By-Value-vs-By-reference"><a href="#By-Value-vs-By-reference" class="headerlink" title="By Value vs By reference"></a>By Value vs By reference</h2><ul><li>這邊主要談論的都是指變數</li><li>reference 像是記憶體中的地址</li><li>value 代表變數的值</li></ul><h3 id="By-Value"><a href="#By-Value" class="headerlink" title="By Value"></a>By Value</h3><blockquote><p>讓兩個變數有相同的value藉由複製value的方式但是有兩個不同的reference</p></blockquote><ul><li>所有純值都是傳值(By value)</li></ul><ol><li>設置 a = 純值(數字、字串)</li><li>這時候純值會有個reference就像是它的地址讓變數a可以找到它</li><li>讓 新的變數b b = a </li><li>這時候b就會複製純值的value到不一樣的地址b</li></ol><p><img src="https://i.imgur.com/pPMboQa.png"></p><h3 id="By-Value-範例"><a href="#By-Value-範例" class="headerlink" title="By Value 範例"></a>By Value 範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by value(primitives)</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"></span><br><span class="line">b = a;</span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><p>印出結果<br><img src="https://i.imgur.com/piUJv9Y.png"></p><p>因為by value只會複製值不會複製reference所以，b還是保持在新的地址，a的變化跟b無關</p><h3 id="Mutate"><a href="#Mutate" class="headerlink" title="Mutate"></a>Mutate</h3><p>改變某樣東西</p><ul><li>Immutable 代表無法被改變</li></ul><h3 id="By-reference"><a href="#By-reference" class="headerlink" title="By reference"></a>By reference</h3><blockquote><p>讓兩個物件有相同的物件藉由給予同樣的reference並不是複製同樣的內容</p></blockquote><ul><li>所有的物件都是傳址(by reference)</li><li>不管是處理把他們(物件)設置相等或是傳入函式</li></ul><ol><li>設置 a = 純值(數字、字串)</li><li>這時候純值會有個reference就像是它的地址讓變數a可以找到它</li><li>讓 新的變數b b = a </li><li>這時候b會藉由原本 a 的reference找到其value</li></ol><p><img src="https://i.imgur.com/JMYnTYu.png"></p><h3 id="By-reference-範例"><a href="#By-reference-範例" class="headerlink" title="By reference 範例"></a>By reference 範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// by reference(all objects(including function))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    greeting: <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> d;</span><br><span class="line"></span><br><span class="line">d = c;</span><br><span class="line">c.greeting = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/1ixoIdP.png"></p><p>因為By reference 傳遞的是地址，所以兩個物件c d 基本上是在一樣的地址一樣的內容，修改其一另一個一樣也被修改</p><h3 id="By-reference-even-as-parameters-範例"><a href="#By-reference-even-as-parameters-範例" class="headerlink" title="By reference(even as parameters) 範例"></a>By reference(even as parameters) 範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeGreeting</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    obj.greeting = <span class="string">&#x27;Hola&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeGreeting(d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/VjO4C4H.png"></p><p>把物件使用參數做傳遞，一樣是傳址，因此兩個傳遞對象是一樣的地址，修改一個其他都會修改</p><h3 id="By-reference-使用-指派-範例-特例"><a href="#By-reference-使用-指派-範例-特例" class="headerlink" title="By reference 使用(=)指派 範例(特例)"></a>By reference 使用(=)指派 範例(特例)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = &#123;</span><br><span class="line">    greeting: <span class="string">&#x27;Howdy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/2Mbfcfb.png"></p><ul><li>這邊可以看到不是說reference是傳址，所以兩方物件應該會一樣?</li><li>但是(=)運算子可以設定新的記憶體地址給c因此c,d印出來的結果不同了</li></ul><h1 id="物件、函式以及’this’-Objects-Functions-And-‘this’"><a href="#物件、函式以及’this’-Objects-Functions-And-‘this’" class="headerlink" title="物件、函式以及’this’(Objects, Functions, And ‘this’)"></a>物件、函式以及’this’(Objects, Functions, And ‘this’)</h1><p><img src="https://i.imgur.com/RIdUSQV.png"></p><ul><li>函式就是物件: 其中有兩個特殊屬性 code, name</li><li>當函式被呼叫時(也就是code的部分)，會創造出執行背景(Execution Context)，接著會被擺入執行堆(Execution stack)，這會決定這個函式會如何被執行</li><li>當執行背景被創造出來時，內部都會有variable Environment也就是變數被創造在函式內部</li><li>也會有Outer Environment也就是當在函式內部找不到變數使用時，會往外部尋找參考一直找到全域變數為止(再來也沒了)</li><li>但我們也知道每天JS引擎創造執行背景時都會創造’this’這個變數，甚至我們不需要輸入任何內容</li><li>而這個this會指向(代表)不同的物件取決於這個函式是如何被呼叫</li></ul><h2 id="‘this’的指向"><a href="#‘this’的指向" class="headerlink" title="‘this’的指向"></a>‘this’的指向</h2><h3 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.newvariable = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(newvariable);</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>這邊設置了三種情況</p><ol><li>一定有的golbal object</li><li>函式陳述式</li><li>函式表達式</li></ol><p>結果印出來:</p><p>全部都指向window這個global object<br>並且可以直接給global object加上屬性都沒問題</p><p><img src="https://i.imgur.com/DlKoeZ0.png"></p><ul><li>當值是純值的時候被稱為property</li><li>當值是函式的時候被稱為method</li></ul><h3 id="範例二-例外"><a href="#範例二-例外" class="headerlink" title="範例二(例外)"></a>範例二(例外)</h3><p>這邊把this使用在物件內部的函式也就是methods</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/q1ClvKP.png"></p><p>竟然是指向了object</p><p>並且可以這樣使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;I can change name&quot;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:<br><img src="https://i.imgur.com/rBANwZ9.png"></p><p>竟然可以通過this的指向來操作物件的內容key的部分</p><h3 id="範例三-類似bug"><a href="#範例三-類似bug" class="headerlink" title="範例三(類似bug)"></a>範例三(類似bug)</h3><p>於是我們找到一個類似於JS引擎比較類似缺點的地方:</p><p>透過函式表達式的方式使用變數傳遞函式在物件內部的methods內，並且使用this再次改寫一次name屬性，這邊理論上應該會使”I can change name”修改成’change name again’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;I can change name&quot;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> setname = <span class="function"><span class="keyword">function</span> (<span class="params">newname</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = newname;</span><br><span class="line">        &#125;</span><br><span class="line">        setname(<span class="string">&#x27;change name again&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>沒有任何變化<br>剛剛以為透過物件內部的methods內部的this會指向物件本身，但是這邊的this卻指向別的地方</p><p><img src="https://i.imgur.com/p3yMbyc.png"></p><p>打開window全域物件查看發現，這邊的this竟然指向的位置是全域物件window<br><img src="https://i.imgur.com/S0rUjDo.png"></p><h3 id="範例四-範例三的解答"><a href="#範例四-範例三的解答" class="headerlink" title="範例四(範例三的解答)"></a>範例四(範例三的解答)</h3><p>如何避免這樣的情況發生呢?</p><p>把this的位置好好綁訂好並且把每個地方的this都使用變數確認是使用同一個this指向同一個地方就可以解決這個問題摟!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">    name: <span class="string">&#x27;The c object&#x27;</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">        self.name = <span class="string">&quot;I can change name&quot;</span></span><br><span class="line">        <span class="built_in">console</span>.log(self);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> setname = <span class="function"><span class="keyword">function</span> (<span class="params">newname</span>) </span>&#123;</span><br><span class="line">            self.name = newname;</span><br><span class="line">        &#125;</span><br><span class="line">        setname(<span class="string">&#x27;change name again&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(self);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.log();</span><br></pre></td></tr></table></figure><p>印出結果:</p><p>這次的this就正常的指向物件本身因此可以修改name屬性搂!</p><p><img src="https://i.imgur.com/Xq4GGwA.png"></p><h1 id="Conceptual-Aside-1"><a href="#Conceptual-Aside-1" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="Arrays-Collection-of-Anything"><a href="#Arrays-Collection-of-Anything" class="headerlink" title="Arrays Collection of Anything"></a>Arrays Collection of Anything</h2><p>創造一個array<br><code>var arr = new Array();</code></p><p>使用array literal syntax<br><code>var arr = [];</code></p><p>JS的array是以0為基底的:</p><p><code>console.log(arr[0])</code></p><p>可以印出array第一個元素</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;物件與函式-Objects-And-Functions&quot;&gt;&lt;a href=&quot;#物件與函式-Objects-And-Functions&quot; class=&quot;headerlink&quot; title=&quot;物件與函式 (Objects And Functions)&quot;&gt;&lt;/a&gt;物件與</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS-The Weird Part Of Javascript - part 1(一萬字)</title>
    <link href="http://example.com/2021/02/12/JS-The%20Weird%20Part%20Of%20Javascript%20-%20part%201/"/>
    <id>http://example.com/2021/02/12/JS-The%20Weird%20Part%20Of%20Javascript%20-%20part%201/</id>
    <published>2021-02-12T03:27:20.000Z</published>
    <updated>2021-04-04T16:31:19.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Conceptual-Aside"><a href="#Conceptual-Aside" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><blockquote><p>當我們寫好JS程式時，在執行時，我們宣告的變數、函式，就會呈現在記憶體中，由電腦去運作使用。</p></blockquote><h2 id="語法解析器-Syntax-Parsers"><a href="#語法解析器-Syntax-Parsers" class="headerlink" title="語法解析器 (Syntax Parsers)"></a>語法解析器 (Syntax Parsers)</h2><p>翻譯程式:</p><ul><li>直譯器(Interpreter)</li><li>編譯器(Compiler)</li></ul><p>一個程式用來翻譯JS code成電腦可以理解的語法</p><h2 id="詞彙環境-Lexical-Environment"><a href="#詞彙環境-Lexical-Environment" class="headerlink" title="詞彙環境 (Lexical Environment)"></a>詞彙環境 (Lexical Environment)</h2><ul><li>代表程式碼在程式中的實際位置</li><li>那些”翻譯程式”非常注重你把那些程式碼寫在哪以及當下環境是什麼</li></ul><h2 id="執行背景-Execution-Contexts"><a href="#執行背景-Execution-Contexts" class="headerlink" title="執行背景 (Execution Contexts)"></a>執行背景 (Execution Contexts)</h2><ul><li>別人寫好的程式來驗證以及執行使用者的程式碼</li><li>管理哪段程式碼先執行</li><li>管理的內容不只是使用者撰寫的還有更多</li></ul><h1 id="Conceptual-Aside-1"><a href="#Conceptual-Aside-1" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="鍵值配-Name-Value-Pairs"><a href="#鍵值配-Name-Value-Pairs" class="headerlink" title="鍵值配(Name/ Value Pairs)"></a>鍵值配(Name/ Value Pairs)</h2><ul><li>一個name 會配對到 一個 value</li><li>值(value) 也可以是 數個 name:value 的配對(也就是objects)</li></ul><h2 id="物件-Objects"><a href="#物件-Objects" class="headerlink" title="物件(Objects)"></a>物件(Objects)</h2><ul><li>是數個name:value 配對的組合</li></ul><p>address的值 裏面包含了數個鍵值配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">address:&#123;</span><br><span class="line">    street:<span class="string">&#x27;Main&#x27;</span>,</span><br><span class="line">    <span class="built_in">Number</span>:<span class="string">&#x27;100&#x27;</span>,</span><br><span class="line">    Apartment:&#123;</span><br><span class="line">        Floor:<span class="number">3</span>,</span><br><span class="line">        <span class="built_in">Number</span>:<span class="number">301</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="The-Global-Environment-and-The-Global-Object"><a href="#The-Global-Environment-and-The-Global-Object" class="headerlink" title="The Global Environment and The Global Object"></a>The Global Environment and The Global Object</h1><blockquote><p>不論使用者的JS程式碼何時執行，它都會跑在執行背景(Execution Context)裡面，意味著別人已經寫好的程式會來驗證以及執行使用者的程式碼</p></blockquote><h2 id="基礎執行背景-Base-Execution-Context也就是Global-Execution-Context"><a href="#基礎執行背景-Base-Execution-Context也就是Global-Execution-Context" class="headerlink" title="基礎執行背景(Base Execution Context也就是Global Execution Context)"></a>基礎執行背景(Base Execution Context也就是Global Execution Context)</h2><ul><li>代表整段程式的任何地方都可以取用它們</li><li>基礎執行環境創造了兩個事情 1.Global Object 2.特殊變數 this</li></ul><p><img src="https://i.imgur.com/0AtZF3g.png"></p><p>就算使用者沒有撰寫任程式碼，JS引擎也會直接創造它們兩個</p><p>1.window(Global Object)(但如果在node.js運行的話會不一樣)<br>2.特殊變數 this</p><p><img src="https://i.imgur.com/brA2yZq.png"></p><h2 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h2><blockquote><p>不在函式裡面就是Global<br>Not Inside a Function</p></blockquote><p>我們在IDE中輸入變數以及函式，會讓它們跟Glbal Object產生連結而我們剛剛設置的變數以及函式就變成了Global Object，因為它們都不在函式內部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/IbYW4PQ.png"></p><p>Execution Context會包裹住這些內容:</p><ul><li>Global Object(window)</li><li>‘this’變數</li><li>Outer Environment - Execution Context的外部環境</li><li>Your Code(如果寫的位置不在任何函式內部)</li></ul><p><img src="https://i.imgur.com/UkmvpH1.png"></p><h1 id="The-Execution-Context-Creation-And-‘Hoisting’"><a href="#The-Execution-Context-Creation-And-‘Hoisting’" class="headerlink" title="The Execution Context: Creation And ‘Hoisting’"></a>The Execution Context: Creation And ‘Hoisting’</h1><h2 id="Hoisting-範例說明"><a href="#Hoisting-範例說明" class="headerlink" title="Hoisting 範例說明"></a>Hoisting 範例說明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>我們會預期這樣的程式碼得到下面的結果</p><p><img src="https://i.imgur.com/z16LB4L.png"></p><hr><p>但如果我們做些一些改變呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有學過其他的語言應該會覺得這邊會直接出錯，因為程式碼應該是一行一行執行的，並且還沒宣告b函式所以b函式應該無法使用</p><p>但結果如下:</p><ul><li>他執行了函式b()</li><li>a的部份沒有出錯卻顯示undefined</li></ul><p>所以儘管b函式在下方才宣告卻還是執行了，以及a的部份還是可以使用的雖然它目前是一個值undefined(尚未定義)，**這樣的現象被稱為’Hoisting’**，但並不是把宣告內容提升到最上方那麼單純!</p><p><img src="https://i.imgur.com/kUSKFDe.png"></p><p>那我們直接把a移除會發生甚麼事呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出現錯誤訊息:a is not defined(沒有被定義)</p><p><img src="https://i.imgur.com/vg4o9Ru.png"></p><hr><h2 id="Execution-Context-is-Created-Creation-Phase創造階段"><a href="#Execution-Context-is-Created-Creation-Phase創造階段" class="headerlink" title="Execution Context is Created(Creation Phase創造階段)"></a>Execution Context is Created(Creation Phase創造階段)</h2><blockquote><p>變數或是函式沒有值卻還是可以取用<br>JS會這樣運作是因為執行背景被分為兩個階段</p></blockquote><h3 id="第一階段創造-Creation-Phase"><a href="#第一階段創造-Creation-Phase" class="headerlink" title="第一階段創造(Creation Phase)"></a>第一階段創造(Creation Phase)</h3><p><img src="https://i.imgur.com/C7YYlAm.png"></p><p><strong>在記憶體內部設定好空間給變數以及函式被稱為’Hoisting’</strong></p><p>他的意思不是把程式碼移到最上方!!</p><p>而是在逐行執行程式碼之前也就是第一階段，JS引擎已經把變數以及函式設定好空間給它們了，也就是變數以及函式已經存在記憶體中，所以當程式逐行執行時，就可以使用它們</p><h3 id="變數的不同點"><a href="#變數的不同點" class="headerlink" title="變數的不同點"></a>變數的不同點</h3><p>不過變數的情況比較不一樣</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函式b()已經全部都在記憶體內了，代表他已經被執行了</li><li>但是JS騰出空間給變數a時，JS不知道它的值是什麼直到被執行了才知道所以會先放入undefined代表還不知道它的值就跟完全不設值的情況一樣</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一樣會取得undefinded<br><img src="https://i.imgur.com/qTbIzIe.png"></p><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><ul><li><strong>所有的JS變數一開始都會被設定成undefined</strong></li><li><strong>函式則是會被完全設定好放進記憶體裡</strong></li><li>所以盡量還是不要太依賴’Hoisting’，好好讓程式逐行執行的順序比較好!</li></ul><h1 id="Conceptual-Aside-2"><a href="#Conceptual-Aside-2" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="Javascript-and-Undefined"><a href="#Javascript-and-Undefined" class="headerlink" title="Javascript and Undefined"></a>Javascript and Undefined</h2><ul><li>undefined 是一個JS內建的特殊的值，代表這個變數還沒被設定</li><li>undefined 是一個值並且實際佔據記憶體空間 代表一個變數的初始值</li><li>undefined 是一個在變數再創造階段會被設定的值也就是(未設定)</li></ul><p>下方程式碼代表undefine是一個特殊值不需要加上””</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;a is undefined&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;a is defined&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我們不宣告變數內容會得到undefined結果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ZnYKpex.png"></p><h2 id="作者建議"><a href="#作者建議" class="headerlink" title="作者建議"></a>作者建議</h2><p>永遠不要設定變數為undefined，因為你其實可以這樣做並且不會出錯，但你會不知道出現的undefined是你設定好的還是程式碼中那些地方有出錯，最好使用的方式就是不設定它併用它來除錯</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line">a = <span class="literal">undefined</span>; <span class="comment">// 永遠別這樣做</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h1 id="The-Execution-Context-Code-Execution"><a href="#The-Execution-Context-Code-Execution" class="headerlink" title="The Execution Context: Code Execution"></a>The Execution Context: Code Execution</h1><blockquote><p>第一個階段是創造階段，第二個部分是執行</p></blockquote><ul><li>在創造階段就已經設定好所有東西</li><li>執行階段會執行使用者寫的程式碼<strong>逐行</strong>轉譯、轉換成電腦可以理解的內容</li></ul><p><img src="https://i.imgur.com/RMVW6WP.png"></p><h2 id="範例說明"><a href="#範例說明" class="headerlink" title="範例說明"></a>範例說明</h2><p>從下方程式碼以及結果可以理解:</p><ul><li>程式碼逐行執行</li></ul><p>第七行的a暫時還未指派因此印出結果為undefined<br>然後經過第九行新指派a = “Hello World!”，因此在11行重新印出a 的時候就印出被指派的內容Hello World!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Called b!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/89oShvj.png"></p><h1 id="Conceptual-Aside-3"><a href="#Conceptual-Aside-3" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="單執行緒-Single-Threaded"><a href="#單執行緒-Single-Threaded" class="headerlink" title="單執行緒(Single Threaded)"></a>單執行緒(Single Threaded)</h2><ul><li>一次執行一個指令(使用者的視角)</li><li>瀏覽器下有很多程序在執行所以用瀏覽器的角度看的時候就不能這樣理解</li></ul><h2 id="同步執行-Synchronous-Execution"><a href="#同步執行-Synchronous-Execution" class="headerlink" title="同步執行(Synchronous Execution)"></a>同步執行(Synchronous Execution)</h2><ul><li>一次執行一行程式碼</li><li>並且按照順序</li><li>在JS中一次只會發生一件事情</li></ul><h1 id="Funciton-Invocation-and-The-Execution-Stack"><a href="#Funciton-Invocation-and-The-Execution-Stack" class="headerlink" title="Funciton Invocation and The Execution Stack"></a>Funciton Invocation and The Execution Stack</h1><h2 id="函式呼叫-Funciton-Invocation"><a href="#函式呼叫-Funciton-Invocation" class="headerlink" title="函式呼叫(Funciton Invocation)"></a>函式呼叫(Funciton Invocation)</h2><h3 id="Invocation"><a href="#Invocation" class="headerlink" title="Invocation"></a>Invocation</h3><blockquote><p>代表執行或是呼叫函式，會使用括號<code>()</code></p></blockquote><p>比方說要執行函式app可以這樣使用:</p><p><code>app();</code></p><h2 id="執行堆-Execution-Stack"><a href="#執行堆-Execution-Stack" class="headerlink" title="執行堆(Execution Stack)"></a>執行堆(Execution Stack)</h2><ul><li>每個函式會多創造一層Execution Context</li><li>會逐行且同步地執行程式碼</li><li>執行結束後會從最上層開始拋棄</li></ul><h3 id="範例說明-1"><a href="#範例說明-1" class="headerlink" title="範例說明"></a>範例說明</h3><p>橘色部分就是執行堆<br><img src="https://i.imgur.com/mduoRi5.png"></p><p>每一層都會創造一個新的Execution Context都會經歷創造階段然後逐行執行程式，這邊就是函式被呼叫之後做事情</p><ol><li>Global Execution Context 會處理所有的全域項目變數、函式等等</li><li>a() 這邊會創造一個嶄新的Execution Context 代表函式 a內的變數、函式</li><li>b() 這邊會創造一個嶄新的Execution Context 代表函式 b內的變數、函式</li></ol><h3 id="範例說明二"><a href="#範例說明二" class="headerlink" title="範例說明二"></a>範例說明二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  b();</span><br><span class="line">  <span class="keyword">var</span> c;</span><br><span class="line">  <span class="built_in">console</span>.log(c + <span class="string">&quot; is c&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d;</span><br><span class="line">  <span class="built_in">console</span>.log(d + <span class="string">&quot; is d&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e;</span><br><span class="line"><span class="built_in">console</span>.log(e + <span class="string">&quot; is e&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這邊可以先忽略undefined畢竟都沒指派內容當然都會是預設值，可以先注意印出順序<br><img src="https://i.imgur.com/dOdzoLW.png"></p><blockquote><p>執行堆最上方的程式就是正在執行的程式，逐行、同步地在被處理中</p></blockquote><p>從上方程式碼可以理解函式呼叫以及執行堆的順序:</p><ol><li>呼叫 a();</li><li>進到a的內部，這邊呼叫b()</li><li>進到b的內部，印出 d (第一個印出結果)</li><li>因為b()內部執行完成，所以從執行堆中移除換執行函式a()</li><li>印出函式a()，印出 c (第二個印出結果)</li><li>因為a()內部執行完成，所以從執行堆中移除換執行Global object(也就是最下面的e)並且印出</li></ol><h1 id="Function-Context-and-Variable-Environments"><a href="#Function-Context-and-Variable-Environments" class="headerlink" title="Function, Context, and Variable Environments"></a>Function, Context, and Variable Environments</h1><h2 id="變數環境-Variable-Environments"><a href="#變數環境-Variable-Environments" class="headerlink" title="變數環境(Variable Environments)"></a>變數環境(Variable Environments)</h2><blockquote><p>描述使用者創造變數的位置以及在記憶體中與其他變數的關聯，所以當你想到這個詞基本上就是在想變數在哪裡?</p></blockquote><ul><li>變數環境 = 變數的位置以及與其他變數的關聯</li><li>每個執行背景內部(Execution Context)的變數是不會彼此影響的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myVar;</span><br><span class="line">  <span class="built_in">console</span>.log(myVar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myVar = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(myVar);</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myVar);</span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(myVar);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/1mC8Hv5.png"></p><p>上方的程式碼可以這樣理解:</p><blockquote><p>每個執行背景內部的變數是不會彼此影響的</p></blockquote><ol><li>印出13行結果 myVar = 1</li><li>跑呼叫a()，內部函式印出結果 2，並且呼叫 b()</li><li>進入函式b()，內部函式結果印出undefined</li><li>執行堆移除函式b =&gt; 移除函式a =&gt; 回到Global Execution，15行在印出一次myVar = 1</li></ol><h1 id="範圍鏈-The-Scope-Chain"><a href="#範圍鏈-The-Scope-Chain" class="headerlink" title="範圍鏈(The Scope Chain)"></a>範圍鏈(The Scope Chain)</h1><ul><li>簡單來說明就是當函式內部找不到變數時就會往外找(outer environment)而這個過程就是範圍鏈</li><li>函式的位置決定它的外部環境(outer environment)</li></ul><p><img src="https://i.imgur.com/7yVQZtW.png"></p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myVar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myVar = <span class="number">2</span>;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>印出myVar的結果是1<br><img src="https://i.imgur.com/x6DtNiM.png"></p><p>由範例可以得知:</p><ol><li>呼叫a()</li><li>進入函式a()，呼叫函式b()</li><li>進入函式b()，內容需要印出myVar但內容沒有變數於是往外找</li><li>函式b()的outer environment是Global Execution因此印出結果 1</li></ol><h2 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h2><p>我們把函式b()整個移進去函式a()內部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myVar);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> myVar = <span class="number">2</span>;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>印出結果是錯誤 b is not defined<br><img src="https://i.imgur.com/KJcmUHs.png"></p><p>由範例二可以得知:</p><ul><li>呼叫函式b()位於Global Execution的環境中</li><li>位於Global Execution的環境中找不到函式b()，因為我們把它移動到函式a()裡面了</li><li>當呼叫函式找不到東西時就會顯示錯誤 <code>&#39;XXX is not defined&#39;</code></li></ul><h2 id="範例三"><a href="#範例三" class="headerlink" title="範例三"></a>範例三</h2><p>函式b()的外層是函式a()</p><p><img src="https://i.imgur.com/vvRCywU.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myVar);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> myVar = <span class="number">2</span>;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>印出myVar的結果是2<br><img src="https://i.imgur.com/Gj4zC6Q.png"></p><p>由範例三可以得知:</p><p>由於函式b()內部找不到變數因此往外層找到a()的<code>var myVar = 2;</code>故印出結果為2</p><h2 id="範例四"><a href="#範例四" class="headerlink" title="範例四"></a>範例四</h2><p>去掉<code>var myVar = 2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myVar);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>由範例四可以得知:</p><p>所以當 <code>var myVar = 2</code> 又被拉掉的時候，就會得到結果 1，因為又會繼續往外找<br>b的外層是a a的外層是Global Execution</p><h1 id="Scope-Es6-And-let"><a href="#Scope-Es6-And-let" class="headerlink" title="Scope, Es6, And let"></a>Scope, Es6, And let</h1><h2 id="範圍-Scope"><a href="#範圍-Scope" class="headerlink" title="範圍(Scope)"></a>範圍(Scope)</h2><ul><li>指的是變數可以被取用的區域</li><li>呼叫兩個函式它會各自有一個執行背景</li><li>如果有兩個看起來相同的變數但在記憶體中其實是兩個不同的變數(因為環境不同)</li></ul><h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myVar); <span class="comment">// 步驟 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(myVar); <span class="comment">// 步驟2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> myVar = <span class="number">2</span>;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myVar = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(myVar); <span class="comment">// 步驟 3</span></span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/LcmlEqh.png"></p><p>從範例可以得知:</p><ul><li>叫了兩遍一樣的函示b() 第11行、18行，他們會各有一個執行背景</li><li>這邊的變數myVar雖然變數名稱一樣但是結果完全不同</li><li>因為它們的範圍(scope)不同，並且處在不同的函式中彼此的變數不會互相干擾</li></ul><ol><li>呼叫a() =&gt; 進去a()內部呼叫b()(位於a()內部)</li><li>b()內部的console找不到變數因此往外(函式a()是外部)找 故印出2</li><li>接下來回到外層印出 Global Execution的 myVar = 1 故印出1</li><li>最後又呼叫一次b()，很明顯地這次直接找尋了跟Global Execution位於同一層的b()(位於第一行)故印出結果往外找到myVar = 1 故印出1</li></ol><h2 id="let簡介"><a href="#let簡介" class="headerlink" title="let簡介"></a>let簡介</h2><ul><li>區塊範圍(Block Scope) - 變數的作用範圍只限在大括號間<code>&#123;&#125;</code></li></ul><h3 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`迴圈跑第<span class="subst">$&#123;i&#125;</span>次`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><p>很明顯的地方是外面的var i = 0被裡面的迴圈汙染到所以傳回來的結果是10<br><img src="https://i.imgur.com/wexESY7.png"></p><p>所以改成let做操作時因為其作用域是{}因此沒有汙染到外面來</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`迴圈跑第<span class="subst">$&#123;i&#125;</span>次`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/za2DaSb.png"></p><h1 id="What-About-Asynchronous-Callbacks"><a href="#What-About-Asynchronous-Callbacks" class="headerlink" title="What About Asynchronous Callbacks?"></a>What About Asynchronous Callbacks?</h1><ul><li>JS引擎的內部處理方式是同步的，但是與外部引擎的合作就是非同步的</li><li>非同步的部分只是在於瀏覽器會把非同步的東西放進去Event Queue但JS依舊一行一行執行</li><li>Event Queue的執行會排在執行堆任務執行完並且執行背景清除了才會動作</li></ul><h2 id="非同步-Asynchronous"><a href="#非同步-Asynchronous" class="headerlink" title="非同步(Asynchronous)"></a>非同步(Asynchronous)</h2><ul><li>代表不只一件事情同時發生</li></ul><p>但前面有說JS是同步的，那它會怎麼處理非同步事件呢?</p><p><img src="https://i.imgur.com/ecNSwqe.jpg"></p><p>JS引擎其實在運行的時候，在瀏覽器下面還有其他的引擎同時在運行:</p><ul><li>呈現引擎(Rendering Engine) - 處理畫面的呈現在螢幕上</li><li>HTTP Request - 處理瀏覽器的HTTP請求，以及獲取資料</li></ul><h3 id="結論-1"><a href="#結論-1" class="headerlink" title="結論"></a>結論</h3><p>所以我們可以理解的是JS引擎的內部處理方式是同步的，但是與外部引擎的合作就是非同步的(在瀏覽器下)</p><h2 id="事件佇列-Event-Queue"><a href="#事件佇列-Event-Queue" class="headerlink" title="事件佇列(Event Queue)"></a>事件佇列(Event Queue)</h2><ul><li><p>當執行堆是空的 JS 才會注意事件佇列</p><p>當在瀏覽器中有一個事件需要被JS引擎處理時，就會被放在Event Queue排隊並且會被事件監聽並等待函式做處不過就是要等待在Event Queue之中<br><img src="https://i.imgur.com/mfkOqWu.png"></p></li></ul><p>上面提到Event Queue在排隊其實是在等Execution stack的任務處理完之後，才會輪到Event Queue的函式創造新的執行背景<code>clickHandler()</code>處理click事件接下來輪到HTTP Request(以圖片舉例)<br><img src="https://i.imgur.com/9tyPbPp.png"></p><h3 id="範例-3"><a href="#範例-3" class="headerlink" title="範例"></a>範例</h3><p><img src="https://i.imgur.com/gEUKBJ8.gif"></p><p>這個範例可以看出被放在Event Queue的事件(clickHandler)一直到執行堆的任務完成(3秒)之後才會執行，要等三秒函式完成並且清空execution stacks，才會跑Event Queue內的click事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitThreeSeconds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ms = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>() &lt; ms) &#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;finished function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;click event!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;click&quot;</span>, clickHandler);</span><br><span class="line"></span><br><span class="line">waitThreeSeconds();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;finished execution&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="Conceptual-Aside-4"><a href="#Conceptual-Aside-4" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="靜態型別-Static-Typing"><a href="#靜態型別-Static-Typing" class="headerlink" title="靜態型別(Static Typing)"></a>靜態型別(Static Typing)</h2><p>常用在Java或是C#<br>代表必須在一開始就告訴編譯器目前使用的變數是甚麼型別</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool isNew = <span class="string">&quot;hello&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 前方就指示型別</span></span><br><span class="line"><span class="comment">// 明顯這邊會報錯因為&#x27;Hello&#x27;是字串不是布林值</span></span><br></pre></td></tr></table></figure><h2 id="動態型別-Dynamic-Typing"><a href="#動態型別-Dynamic-Typing" class="headerlink" title="動態型別(Dynamic Typing)"></a>動態型別(Dynamic Typing)</h2><p>意味著你不需告訴JS引擎你使用的變數型別(字串、數字、布林值等等)，當程式執行時它會自己做辨識</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isNew = <span class="literal">true</span>; <span class="comment">//不會報錯</span></span><br><span class="line">isNew = <span class="string">&#x27;yup!&#x27;</span>;</span><br><span class="line">isNew = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="型別-Types-And-Javascirpt"><a href="#型別-Types-And-Javascirpt" class="headerlink" title="型別(Types And Javascirpt)"></a>型別(Types And Javascirpt)</h2><h3 id="純值-Primitive-Types"><a href="#純值-Primitive-Types" class="headerlink" title="純值(Primitive Types)"></a>純值(Primitive Types)</h3><ul><li>是一種資料型態並且只代表一個值意味著不是物件</li></ul><ol><li>undefined</li></ol><ul><li>是所有變數的初始值</li><li>代表其值還尚未存在(千萬不要設到變裡)</li><li>會一直保持undefined直到你給變數設定值為止</li></ul><ol start="2"><li>null</li></ol><ul><li>代表其值”不存在”為空(可以設到變數裡)</li></ul><ol start="3"><li>Boolean</li></ol><ul><li>代表true or false其中一種可能</li></ul><ol start="4"><li>number</li></ol><ul><li>在JS中只有一種數字型態number(其他語言不是這樣可能有整數或其他類型)</li><li>它是一種浮點數代表後面總會有小數位</li><li>會讓數學在JS裡面比較奇怪</li></ul><ol start="5"><li>string</li></ol><ul><li>一連串的文字並且使用單引號或是雙引號包裹住</li><li>Es6可以使用<code>(``)</code>包裹住文字並且使用變數在裡面</li></ul><ol start="6"><li>symbol</li></ol><ul><li>使用在ES6中尚未被全部瀏覽器支援</li><li>在後面的bouns課程會講解</li></ul><h1 id="Conceptual-Aside-5"><a href="#Conceptual-Aside-5" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="運算子-Operators"><a href="#運算子-Operators" class="headerlink" title="運算子(Operators)"></a>運算子(Operators)</h2><ul><li>是種特殊的function並且在語法、寫法上都不一樣</li><li>一般來說運算子取兩個參數並且返回一個結果</li></ul><h3 id="範例-4"><a href="#範例-4" class="headerlink" title="範例"></a>範例</h3><p>(+)加號運算子 做代表(-,&gt;,&lt;,% 這些也是一樣)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span> + <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>實際上 (+)的部分是是一個函式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> +(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我們要呼叫函式不是應該這樣寫嗎?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span> + <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">+(<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>不過太惱人了對嗎? 還好JS提供了<strong>中綴表示法 (Infix notation)</strong></p><p>讓我們可以把呼叫的部分寫在參數中間，讓程式看起來更人性化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>+<span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="運算子的優先性與相依姓-Operator-Precedence-and-Associativity"><a href="#運算子的優先性與相依姓-Operator-Precedence-and-Associativity" class="headerlink" title="運算子的優先性與相依姓(Operator Precedence and Associativity)"></a>運算子的優先性與相依姓(Operator Precedence and Associativity)</h1><h2 id="運算子的優先性"><a href="#運算子的優先性" class="headerlink" title="運算子的優先性"></a>運算子的優先性</h2><ul><li>代表哪個運算子會被優先使用</li><li>當同一行程式有不只一個運算子時，函式會依序被呼叫</li><li>具備高優先性的運算子優先運算</li></ul><h2 id="運算子的相依姓"><a href="#運算子的相依姓" class="headerlink" title="運算子的相依姓"></a>運算子的相依姓</h2><ul><li>當優先順序都相同時才會使用到相依姓</li><li>代表運算子被呼叫的順序</li><li>左到右、右到左</li></ul><h2 id="範例-5"><a href="#範例-5" class="headerlink" title="範例"></a>範例</h2><ul><li>從下圖可以理解 *(乘號)的優先序高於 +(加號)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span> + <span class="number">4</span> * <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a 為23</span></span><br></pre></td></tr></table></figure><p>擷取自mdn<br><img src="https://i.imgur.com/8UTEPpN.png"></p><ul><li>grouping - ()</li></ul><p>相依姓最高的運算子，會優先計算括號內部的運算子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="number">3</span> + <span class="number">4</span>) * <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a為35</span></span><br></pre></td></tr></table></figure><p>擷取自mdn<br><img src="https://i.imgur.com/duIO03J.png"></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">運算子優先序參考 - MDN</a></p><h2 id="範例二-1"><a href="#範例二-1" class="headerlink" title="範例二"></a>範例二</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>, b =<span class="number">3</span>, c=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">a = b = c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果 4, 4, 4</span></span><br></pre></td></tr></table></figure><ul><li>印出結果都是四，因為他們都是相同的運算子具有相同的相同的優先性所以必須使用相依姓來處理，因此以MDN網站上的結果顯示必須從右到左執行</li><li>a = b = c, 會先處理右邊的 等號(=) 所以會這樣執行:<br>a = (b=c)，必須先求出b=c，因c = 4，所以b = 4，外面則 a = 4</li></ul><p><img src="https://i.imgur.com/rg1yoF9.png"></p><h1 id="Conceptual-Aside-6"><a href="#Conceptual-Aside-6" class="headerlink" title="Conceptual Aside"></a>Conceptual Aside</h1><h2 id="強制轉型-Coercion"><a href="#強制轉型-Coercion" class="headerlink" title="強制轉型(Coercion)"></a>強制轉型(Coercion)</h2><ul><li> 轉換一個值從一個形態到另一個<br>(ex.你可能有的Number類型別被轉換成String)</li><li> 在JS很常發生因為其為動態型別</li></ul><h2 id="隱性-vs-顯性-Implicit-vs-explicit-coercion"><a href="#隱性-vs-顯性-Implicit-vs-explicit-coercion" class="headerlink" title="隱性 vs. 顯性 (Implicit vs. explicit coercion)"></a>隱性 vs. 顯性 (Implicit vs. explicit coercion)</h2><h3 id="顯性-explicit"><a href="#顯性-explicit" class="headerlink" title="顯性(explicit)"></a>顯性(explicit)</h3><p>會直接顯示出要轉換的型別</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(value)</span><br></pre></td></tr></table></figure><h3 id="隱性-implicit"><a href="#隱性-implicit" class="headerlink" title="隱性(implicit)"></a>隱性(implicit)</h3><p>當指派運算子時:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="literal">null</span>, <span class="number">2</span>/’<span class="number">5</span><span class="string">&#x27;, null + new Date()</span></span><br></pre></td></tr></table></figure><p>當被轉換成boolean時:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value) &#123;…&#125;</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 三種強制轉換(Three types of conversion)</span><br><span class="line"></span><br><span class="line">純值以及物件都只會有這三種轉換但是它們工作方式不太一樣</span><br><span class="line"></span><br><span class="line">* to string</span><br><span class="line">* to boolean</span><br><span class="line">* to number</span><br><span class="line"></span><br><span class="line">### 解釋純值轉型(Type coercion for primitives)</span><br><span class="line"></span><br><span class="line">#### String conversion</span><br><span class="line"></span><br><span class="line">* 顯性使用 <span class="built_in">String</span>()函式直接轉換成字串</span><br><span class="line">* 隱性使用 (+) 做轉換成字串，當兩個運算元(operand)有一方為字串就會觸發轉換成字串</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript=</span></span><br><span class="line"><span class="string">String(123) // explicit</span></span><br><span class="line"><span class="string">123 + &#x27;&#x27;    // implicit</span></span><br></pre></td></tr></table></figure><ul><li>所有的純值都可以被轉換成字串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">123</span>)                   <span class="comment">// &#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">String</span>(-<span class="number">12.3</span>)                 <span class="comment">// &#x27;-12.3&#x27;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>)                  <span class="comment">// &#x27;null&#x27;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>)             <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>)                  <span class="comment">// &#x27;true&#x27;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">false</span>)                 <span class="comment">// &#x27;false&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>Symbol 比較特別只能使用顯性的coercion</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="built_in">Symbol</span>(<span class="string">&#x27;my symbol&#x27;</span>))   <span class="comment">// &#x27;Symbol(my symbol)&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> + <span class="built_in">Symbol</span>(<span class="string">&#x27;my symbol&#x27;</span>)      <span class="comment">// TypeError is thrown</span></span><br></pre></td></tr></table></figure><ul><li>Symbol 使用所有數學運算子都會報錯</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let uid &#x3D; Symbol.for(&quot;uid&quot;),</span><br><span class="line">    sum &#x3D; uid &#x2F; 1;            &#x2F;&#x2F; error!</span><br></pre></td></tr></table></figure><p><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-symbol-coercion">Symbol coercion - 參考</a></p><h4 id="Boolean-conversion"><a href="#Boolean-conversion" class="headerlink" title="Boolean conversion"></a>Boolean conversion</h4><ul><li>顯性的使用<code>Boolean()</code></li><li>隱性的必須使用在邏輯運算子的環境下或是被邏輯運算子直接影響</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="number">2</span>)          <span class="comment">// explicit</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span>) &#123; ... &#125;      <span class="comment">// implicit due to logical context</span></span><br><span class="line">!!<span class="number">2</span>                 <span class="comment">// implicit due to logical operator</span></span><br><span class="line"><span class="number">2</span> || <span class="string">&#x27;hello&#x27;</span>        <span class="comment">// implicit due to logical operator</span></span><br></pre></td></tr></table></figure><ul><li>需要注意的是 ||以及&amp;&amp;運算子它們是會返回運算元的值的也就是不會返回true or false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回123而不是true</span></span><br><span class="line"><span class="comment">// &#x27;hello&#x27; and 123 在內部依舊是布林值來計算這個表達式</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">&#x27;hello&#x27;</span> &amp;&amp; <span class="number">123</span>;   <span class="comment">// x === 123</span></span><br></pre></td></tr></table></figure><ul><li>下方列表以外的值都是返回true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="string">&#x27;&#x27;</span>)           <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>)            <span class="comment">// false     </span></span><br><span class="line"><span class="built_in">Boolean</span>(-<span class="number">0</span>)           <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>)          <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>)         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>)    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">false</span>)        <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>物件、陣列、Symbol、Date、自定義function都會返回true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(&#123;&#125;)             <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>([])             <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="built_in">Symbol</span>())       <span class="comment">// true</span></span><br><span class="line">!!<span class="built_in">Symbol</span>()              <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Numeric-conversion"><a href="#Numeric-conversion" class="headerlink" title="Numeric conversion"></a>Numeric conversion</h4><ul><li>顯性的使用<code>Number()</code>函式</li></ul><p>隱性的比較麻煩有多種觸發方式:</p><ul><li>使用比較運算子(&gt;, &lt;, &lt;=,&gt;=)</li><li>使用位元算子( | &amp; ^ ~)</li><li>算數運算子 (- + * / % )(注意當+包含的運算元有字串時會轉成字串)</li><li>單一使用+運算子</li><li>使用(==,!=)(注意當兩邊運算元都是字串時不會觸發數字轉型)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;123&#x27;</span>)   <span class="comment">// explicit</span></span><br><span class="line">+<span class="string">&#x27;123&#x27;</span>          <span class="comment">// implicit</span></span><br><span class="line"><span class="number">123</span> != <span class="string">&#x27;456&#x27;</span>    <span class="comment">// implicit</span></span><br><span class="line"><span class="number">4</span> &gt; <span class="string">&#x27;5&#x27;</span>         <span class="comment">// implicit</span></span><br><span class="line"><span class="number">5</span>/<span class="literal">null</span>          <span class="comment">// implicit</span></span><br><span class="line"><span class="literal">true</span> | <span class="number">0</span>        <span class="comment">// implicit</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)              <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)                   <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)                  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot; 12 &quot;</span>)                 <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;-12.34&quot;</span>)               <span class="comment">// -12.34</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;\n&quot;</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot; 12s &quot;</span>)                <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">123</span>)                    <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><ul><li>跳脫字元的部分如果內含不是數字則顯示NaN，為空則顯示0</li><li>null, undefined比較特別需要特別記憶</li><li>Symbols不能轉換為Number會直接報錯<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;\n&quot;</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)                   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)              <span class="comment">// NaN</span></span><br><span class="line">+sym or sym | <span class="number">0</span>                <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure></li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#symbol_type_conversions">Symbol type conversions -MDN</a></p><ul><li>當== 應用到null, undefined時數字轉換不會進行</li><li>null = null, null = undefined但不等於0</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="number">0</span>               <span class="comment">// false, null is not converted to 0</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">null</span>            <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>       <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>NaN不等於任何東西連自己都不等於</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value !== value) &#123; <span class="built_in">console</span>.log(<span class="string">&quot;we&#x27;re dealing with NaN here&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span></span><br><span class="line"><span class="comment">// return false</span></span><br></pre></td></tr></table></figure><h3 id="解釋物件轉型-Type-coercion-for-objects"><a href="#解釋物件轉型-Type-coercion-for-objects" class="headerlink" title="解釋物件轉型(Type coercion for objects)"></a>解釋物件轉型(Type coercion for objects)</h3><h4 id="傳換成Boolean值"><a href="#傳換成Boolean值" class="headerlink" title="傳換成Boolean值"></a>傳換成Boolean值</h4><ul><li>非純值的值都會轉成true</li><li>物件、陣列、空都會返回true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>([<span class="literal">NaN</span>])</span><br><span class="line"><span class="built_in">Boolean</span>([<span class="number">123</span>])</span><br><span class="line"><span class="built_in">Boolean</span>([<span class="string">&#x27;123&#x27;</span>])</span><br><span class="line"><span class="built_in">Boolean</span>([<span class="literal">false</span>])</span><br><span class="line"><span class="built_in">Boolean</span>([<span class="literal">undefined</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(&#123;<span class="literal">NaN</span>&#125;)</span><br><span class="line"><span class="built_in">Boolean</span>(&#123;<span class="number">123</span>:<span class="number">123</span>&#125;)</span><br><span class="line"><span class="built_in">Boolean</span>(&#123;<span class="string">&#x27;123&#x27;</span>:<span class="number">123</span>&#125;)</span><br><span class="line"><span class="built_in">Boolean</span>(&#123;<span class="literal">undefined</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全部輸出都為true</span></span><br></pre></td></tr></table></figure><h4 id="轉換成Number-String"><a href="#轉換成Number-String" class="headerlink" title="轉換成Number, String"></a>轉換成Number, String</h4><ul><li>物件會轉為純值藉由內部的<code>[[ToPrimitive]]</code>方法</li><li><code>ToPrimitive(input, PreferredType?)</code>(PreferredType可以為Number or String)</li><li>使用<code>valueOf</code> 、<code>toString</code> </li></ul><p>一般來說演算法如下:</p><ol><li>如果input已經是純值則直接返回</li><li>呼叫input.toString() 如果結果是純值則返回</li><li>呼叫input.valueOf() 如果解果是純值則返回</li><li>都不是則產出TypeError</li></ol><ul><li>字串轉型 先呼叫 toString() 隨後 valueOf() </li><li>數字轉型 先呼叫 valueOf() 隨後 toString()</li></ul><p>過程是這樣的：</p><p>一個物件 obj 透過呼叫 ToPrimitive(obj, Number) 轉換成原始型別，接著在使用 ToNumber() 取得最後的結果</p><p>一個物件 obj 透過調用 ToPrimitive(obj, String) 轉換為原始型別，然後 ToString() 取得最後結果</p><ul><li>可以觀察這個實作理解其觸發順序:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  valueOf: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;valueOf&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;toString&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(obj); <span class="comment">// 先印valueOf, 在接toString</span></span><br><span class="line"><span class="built_in">String</span>(obj); <span class="comment">// 先印toString, 在接valueOf</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>大多數的build-in type方法不包含<code>valueOf()</code>或是會返回this.object(也就是會把同樣的元素回傳)然而並不是純值而被忽略，所以數字或是字串轉型可能都會返回呼叫<code>toString()</code>的內容<br>舉例:<br><img src="https://i.imgur.com/1Xcp7FK.png"></li></ul><h4 id="loose-equality-這兩個運算子有特別之處"><a href="#loose-equality-這兩個運算子有特別之處" class="headerlink" title="loose equality(==), (+)這兩個運算子有特別之處"></a>loose equality(==), (+)這兩個運算子有特別之處</h4><ul><li>大多數的情況當這兩個運算子出現時都會預設使用Number 轉換</li><li>除了Date()<br>預設Date()會出現現在時間的字串<br><img src="https://i.imgur.com/yDrcFGu.png"></li></ul><h2 id="小練習"><a href="#小練習" class="headerlink" title="小練習"></a>小練習</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> + <span class="literal">false</span>             <span class="comment">// 1</span></span><br><span class="line"><span class="number">12</span> / <span class="string">&quot;6&quot;</span>                 <span class="comment">// 2</span></span><br><span class="line"><span class="string">&quot;number&quot;</span> + <span class="number">15</span> + <span class="number">3</span>        <span class="comment">// &#x27;number153&#x27;</span></span><br><span class="line"><span class="number">15</span> + <span class="number">3</span> + <span class="string">&quot;number&quot;</span>        <span class="comment">// &#x27;18number&#x27;</span></span><br><span class="line">[<span class="number">1</span>] &gt; <span class="literal">null</span>               <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;foo&quot;</span> + + <span class="string">&quot;bar&quot;</span>          <span class="comment">// &#x27;fooNaN&#x27;</span></span><br><span class="line"><span class="string">&#x27;true&#x27;</span> == <span class="literal">true</span>           <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;false&#x27;</span>         <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="string">&#x27;&#x27;</span>               <span class="comment">// false</span></span><br><span class="line">!!<span class="string">&quot;false&quot;</span> == !!<span class="string">&quot;true&quot;</span>    <span class="comment">// true</span></span><br><span class="line">[<span class="string">&#x27;x&#x27;</span>] == <span class="string">&#x27;x&#x27;</span>             <span class="comment">// true </span></span><br><span class="line">[] + <span class="literal">null</span> + <span class="number">1</span>            <span class="comment">// &#x27;null1&#x27;</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]       <span class="comment">// false</span></span><br><span class="line">&#123;&#125;+[]+&#123;&#125;+[<span class="number">1</span>]             <span class="comment">// &#x27;0[object Object]1&#x27;</span></span><br><span class="line">!+[]+[]+![]              <span class="comment">// &#x27;truefalse&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) - <span class="number">0</span>          <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) + <span class="number">0</span>          <span class="comment">// &#x27;Thu Jan 01 1970 02:00:00(EET)0&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="題目解題"><a href="#題目解題" class="headerlink" title="題目解題"></a>題目解題</h3><ul><li>true + false             // 1</li></ul><p>使用 + 運算子會轉換成Numbe轉換<br>true = 1<br>false = 0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> + <span class="literal">false</span></span><br><span class="line">==&gt; <span class="number">1</span> + <span class="number">0</span></span><br><span class="line">==&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>12 / “6”                 // 2</li></ul><p>算數運算子 / 會轉換成Number轉換</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> / <span class="string">&#x27;6&#x27;</span></span><br><span class="line">==&gt; <span class="number">12</span> / <span class="number">6</span></span><br><span class="line">==&gt;&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>“number” + 15 + 3        // ‘number153’</li></ul><p>(+) 運算子的相依姓是由左自右</p><ol><li>所以這邊會先處理”number” + 15</li><li>因為+號兩側有字串直接轉成字串”number15”</li><li>在來處理 “number15” + 3 =&gt; “number153”</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“number” + <span class="number">15</span> + <span class="number">3</span> </span><br><span class="line">==&gt; <span class="string">&quot;number15&quot;</span> + <span class="number">3</span> </span><br><span class="line">==&gt; <span class="string">&quot;number153&quot;</span></span><br></pre></td></tr></table></figure><ul><li>15 + 3 + “number”        // ‘18number’</li></ul><ol><li>15+3 這邊就正常運算</li><li>18+’number’因為有字串所以就變成’18number’</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span> + <span class="number">3</span> + <span class="string">&quot;number&quot;</span> </span><br><span class="line">==&gt; <span class="number">18</span> + <span class="string">&quot;number&quot;</span> </span><br><span class="line">==&gt; <span class="string">&quot;18number&quot;</span></span><br></pre></td></tr></table></figure><ul><li>[1] &gt; null //true</li></ul><p>比較運算子(&gt;)會觸發Number轉換</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] &gt; <span class="literal">null</span></span><br><span class="line">==&gt; <span class="string">&#x27;1&#x27;</span> &gt; <span class="number">0</span></span><br><span class="line">==&gt; <span class="number">1</span> &gt; <span class="number">0</span></span><br><span class="line">==&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>“foo” + + “bar”   //“fooNaN”</li></ul><ol><li>單位元的 (+)運算子的優先級高於二進制(+)</li><li>故+”bar” 先處理 因為轉型Number後內容物不是number故產出NaN</li><li>跟”foo”串接觸發字串轉換故結果為”fooNaN”</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;foo&quot;</span> + + <span class="string">&quot;bar&quot;</span> </span><br><span class="line">==&gt; <span class="string">&quot;foo&quot;</span> + (+<span class="string">&quot;bar&quot;</span>) </span><br><span class="line">==&gt; <span class="string">&quot;foo&quot;</span> + <span class="literal">NaN</span> </span><br><span class="line">==&gt; <span class="string">&quot;fooNaN&quot;</span></span><br></pre></td></tr></table></figure><ul><li>‘true’ == true  //false</li><li>false == ‘false’    //false</li></ul><ol><li>== 運算子觸發Number轉換</li><li>‘true’ 轉換成Number轉換 因內容不是數字因此為NaN</li><li>布林值 true的部分轉換成數字為1/ false為0</li><li>所以他們不相等</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;true&#x27;</span> == <span class="literal">true</span></span><br><span class="line">==&gt; <span class="literal">NaN</span> == <span class="number">1</span></span><br><span class="line">==&gt; <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;false&#x27;</span>   </span><br><span class="line">==&gt; <span class="number">0</span> == <span class="literal">NaN</span></span><br><span class="line">==&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>null == ‘’   //false</li></ul><p>Null比較特別</p><ul><li>當== 應用到null, undefined時數字轉換不會進行</li><li>null = null, null = undefined但不等於0</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="string">&#x27;&#x27;</span></span><br><span class="line">==&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>!!”false” == !!”true” //true</li><li>兩個驚嘆號代表如果內容為true則會顯示true</li><li>一般字串沒有為空的話是會顯示true的</li><li>下面是會顯示false的範例:</li></ul><ol><li>null;</li><li>NaN;</li><li>0;</li><li>empty string (“” or ‘’ or ``);</li><li>undefined.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="string">&quot;false&quot;</span> == !!<span class="string">&quot;true&quot;</span>  </span><br><span class="line">==&gt; <span class="literal">true</span> == <span class="literal">true</span></span><br><span class="line">==&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>[‘x’] == ‘x’   //true</li></ul><ol><li>== 觸發Number轉換</li><li>[‘x’].valueOf()會得出他自己[“x”] 這並不是純值所以不會返回結果</li><li>故使用toString()得到”x”因此相等</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;x&#x27;</span>] == <span class="string">&#x27;x&#x27;</span>  </span><br><span class="line">==&gt; <span class="string">&#x27;x&#x27;</span> == <span class="string">&#x27;x&#x27;</span></span><br><span class="line">==&gt;  <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>[] + null + 1    // ‘null1’</li></ul><ol><li>(+)號運算子觸發Number轉換給[]</li><li>然而陣列做Number轉換後因為陣列做<code>valueOf()</code>得出自己不是純值無法返回</li><li>因此使用<code>toString()</code>空陣列轉為’’空字串</li><li>‘’ 空字串出現在 (+)運算子中所以變成’null’+1 在得出結果’null1’</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[] + <span class="literal">null</span> + <span class="number">1</span>  </span><br><span class="line">==&gt;  <span class="string">&#x27;&#x27;</span> + <span class="literal">null</span> + <span class="number">1</span>  </span><br><span class="line">==&gt;  <span class="string">&#x27;null&#x27;</span> + <span class="number">1</span>  </span><br><span class="line">==&gt; <span class="string">&#x27;null1&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>0 || “0” &amp;&amp; {}     //{}</li></ul><ol><li>邏輯運算子會轉換運算元為布林值(內部)但會返回原本的值</li><li>0為false, “0”字串為true因為不為空, 空物件為true</li><li>|| 運算子只要有false則取其左邊的值，&amp;&amp; 運算子如果運算元都為true取右邊的值故為{}</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> || <span class="string">&quot;0&quot;</span> &amp;&amp; &#123;&#125;  </span><br><span class="line">==&gt;  (<span class="number">0</span> || <span class="string">&quot;0&quot;</span>) &amp;&amp; &#123;&#125;</span><br><span class="line">==&gt; (<span class="literal">false</span> || <span class="literal">true</span>) &amp;&amp; <span class="literal">true</span>  <span class="comment">// internally</span></span><br><span class="line">==&gt; <span class="string">&quot;0&quot;</span> &amp;&amp; &#123;&#125;</span><br><span class="line">==&gt; <span class="literal">true</span> &amp;&amp; <span class="literal">true</span>             <span class="comment">// internally</span></span><br><span class="line">==&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>[1,2,3] == [1,2,3]   /false</li></ul><ol><li>不需要強制轉型因為兩邊的型別一樣</li><li>==會確認物件的id然而兩個array是不同的instance,id一定不同所以答出false</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] == [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">==&gt;  <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>{}+[]+{}+[1] //‘0[object Object]1’</li></ul><ol><li>(+)觸發Number轉型(但是因為物件以及陣列都會切換成toString())從最左邊開始轉換</li><li>第一個{}轉換成””(透過toString())但因為沒有+在前面轉換成數字所以先不理</li><li>+[]會轉換成0</li><li>{}會轉換成字串’[object Object]’</li><li>[1]toString()會變成’1’</li><li>最後做字串串接得出’0[object Object]1’<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;+[]+&#123;&#125;+[<span class="number">1</span>]</span><br><span class="line">==&gt; +[]+&#123;&#125;+[<span class="number">1</span>]</span><br><span class="line">==&gt; <span class="number">0</span> + &#123;&#125; + [<span class="number">1</span>]</span><br><span class="line">==&gt; <span class="number">0</span> + <span class="string">&#x27;[object Object]&#x27;</span> + [<span class="number">1</span>]</span><br><span class="line">==&gt; <span class="string">&#x27;0[object Object]&#x27;</span> + [<span class="number">1</span>]</span><br><span class="line">==&gt; <span class="string">&#x27;0[object Object]&#x27;</span> + <span class="string">&#x27;1&#x27;</span></span><br><span class="line">==&gt; <span class="string">&#x27;0[object Object]1&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>!+[]+[]+![]    //‘truefalse’</li></ul><ol><li>驚嘆號邏輯運算子優先權大於(+)</li><li>故有驚嘆號的地方先處理(!+[]) + [] + (![])</li><li>!+[] =&gt; !=false, +[] = 0 = false ,兩個false則為true</li><li>![] =&gt; []為true, 故得出false</li><li>[] =&gt; 做Number轉後轉成’’</li><li>三個串起來’truefalse’</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!+[]+[]+![]  </span><br><span class="line">==&gt; (!+[]) + [] + (![])</span><br><span class="line">==&gt; !<span class="number">0</span> + [] + <span class="literal">false</span></span><br><span class="line">==&gt; <span class="literal">true</span> + [] + <span class="literal">false</span></span><br><span class="line">==&gt; <span class="literal">true</span> + <span class="string">&#x27;&#x27;</span> + <span class="literal">false</span></span><br><span class="line">==&gt; <span class="string">&#x27;truefalse&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>new Date(0) - 0 //0</li></ul><p>new Date(0).valueOf()會取得毫秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) - <span class="number">0</span></span><br><span class="line">==&gt; <span class="number">0</span> - <span class="number">0</span></span><br><span class="line">==&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>new Date(0) + 0 //‘Thu Jan 01 1970 02:00:00 GMT+0200 (EET)0’</li></ul><ol><li>new Date(0) 會出字串</li><li>把0做String轉型</li><li>串接得出答案’Thu Jan 01 1970 02:00:00 GMT+0200 (EET)0’</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>) + <span class="number">0</span></span><br><span class="line">==&gt; <span class="string">&#x27;Thu Jan 01 1970 02:00:00 GMT+0200 (EET)&#x27;</span> + <span class="number">0</span></span><br><span class="line">==&gt; <span class="string">&#x27;Thu Jan 01 1970 02:00:00 GMT+0200 (EET)0&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="本篇參考來源"><a href="#本篇參考來源" class="headerlink" title="本篇參考來源:"></a>本篇參考來源:</h2><p><a href="https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/">JavaScript type coercion explained</a></p><h1 id="比較運算子-Comparison-Operators"><a href="#比較運算子-Comparison-Operators" class="headerlink" title="比較運算子(Comparison Operators)"></a>比較運算子(Comparison Operators)</h1><h2 id="範例-6"><a href="#範例-6" class="headerlink" title="範例"></a>範例</h2><ul><li>兩個範例的優先順序都是一樣的(畢竟符號都一樣)</li><li>故比較的是相依姓(&lt;)，(&gt;)排序是由左至右</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>&lt;<span class="number">2</span>&lt;<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果得出 true</span></span><br></pre></td></tr></table></figure><p>第一題處理:</p><ol><li>1&lt;2 會得到 true, 接著處理true&lt;3</li><li>比較運算子會做Number強制轉型 true轉型為數字為1<img src="https://i.imgur.com/gw7Dkeg.png"></li><li>故1&lt;3 為true</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>&lt;<span class="number">2</span>&lt;<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果得出 true</span></span><br></pre></td></tr></table></figure><p>第二題處理:</p><ol><li>3&lt;2 會得到 false, 接著處理false&lt;1</li><li>比較運算子會做Number強制轉型 false轉型為數字為0 <img src="https://i.imgur.com/9vLEghi.png"></li><li>故0&lt;1 為true</li></ol><h2 id="null-undefined-是特別的"><a href="#null-undefined-是特別的" class="headerlink" title="null, undefined 是特別的"></a>null, undefined 是特別的</h2><ul><li><p>當== 應用到null, undefined時數字轉換不會進行</p></li><li><p>null = null, null = undefined但不等於0</p></li><li><p>雖然使用Number()函式來取得數值 null有取得0，undefined取得NaN但是還是不能應用在(==)<br><img src="https://i.imgur.com/tzWiWI3.png"></p></li><li><p>不過null&lt;1是得出true <img src="https://i.imgur.com/JxDpW2I.png"></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">null</span>            <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>       <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但是當情況越演越烈:</p><p>這樣強制型別轉換會讓程式碼難以預期，於是我們往下介紹**(===)Strict Equality**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span>&lt;<span class="number">1</span> <span class="comment">// tru</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="number">0</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">&quot;&quot;</span> == <span class="literal">false</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Strict-Equality"><a href="#Strict-Equality" class="headerlink" title="(===)Strict Equality"></a>(===)Strict Equality</h2><p>這個符號他不會強制轉換型別，如果運算元型別不同就會直接跑false</p><p><img src="https://i.imgur.com/PqvIMJD.png"></p><h2 id="作者建議-1"><a href="#作者建議-1" class="headerlink" title="作者建議"></a>作者建議</h2><ul><li>大多數的時間使用 (===)Strict Equality</li><li>除非你真的需要強制轉型來做一些功能不然不要輕易使用(==)</li><li>作者推薦文章 <a href="http://www-lia.deis.unibo.it/materiale/JS/developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness.html">內含(==, ===)比對表格 MDN</a></li></ul><h1 id="存在以及布林值-Existence-and-Booleans"><a href="#存在以及布林值-Existence-and-Booleans" class="headerlink" title="存在以及布林值(Existence and Booleans)"></a>存在以及布林值(Existence and Booleans)</h1><ul><li>如果我們試著轉化null, undefined,”” 成布林值都會取得false</li><li>因此可以利用這個狀況使用if判斷式來尋找是否變數存在於內容之中<br>如果a存在的話則印出console.log()的內容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a; <span class="comment">// a is undefined</span></span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Something is there.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="預設值-Default-Values"><a href="#預設值-Default-Values" class="headerlink" title="預設值(Default Values)"></a>預設值(Default Values)</h1><p>如果我們使用這個函式並且不輸入參數會發生什麼事呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">greet();</span><br></pre></td></tr></table></figure><p>會印出Helloundefined，因為變數在這邊沒有被指定的情況下，預設值就會是undefined，然後碰上(+)運算子只要前方有字串就會把純值undefined轉換成字串因此得出這個結果<br><img src="https://i.imgur.com/sGylF11.png"></p><p>但我們可以這樣寫讓這個預設值更有功能性:</p><ul><li>使用 or 運算子</li><li>因為or運算子的優先級高於 (=)所以右邊會先處理</li><li>當name為undeined時因為or運算子會回傳true的結果也就是’Your name here’</li><li>當name不為undefined時就立即回傳，因為當兩邊都為ture時會回傳左側</li><li>唯一例外則為使用 0 因為 0 會回傳false</li><li>最後記得ES6有新的方法可以做參考使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">   name = name || <span class="string">&#x27;Your name here&#x27;</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">greet(<span class="string">&#x27;Joan&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="框架小叮嚀-Framework-Aside"><a href="#框架小叮嚀-Framework-Aside" class="headerlink" title="框架小叮嚀(Framework Aside)"></a>框架小叮嚀(Framework Aside)</h1><p>想像一種情況當我們要使用複數個框架或是函式庫時，其中的變數名稱重複了，這時候撰寫位置於下方的程式會複寫上方的:</p><p>以下方的範例舉例的話，Lib2的變數內容會取代Lib1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;Lib1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;Lib2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以常常會看到函式庫使用預設值來避免這種被取代的現象發生:</p><ul><li>如果變數已經存在(libraryName)則會使用現有的library的變數，如果沒有則使用Lib2</li><li>這樣的使用預設值的方式就是在檢查全域命名空間(global namespace)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.libraryName = <span class="built_in">window</span>.libraryName || <span class="string">&quot;Lib2&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Conceptual-Aside&quot;&gt;&lt;a href=&quot;#Conceptual-Aside&quot; class=&quot;headerlink&quot; title=&quot;Conceptual Aside&quot;&gt;&lt;/a&gt;Conceptual Aside&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;當</summary>
      
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
</feed>
